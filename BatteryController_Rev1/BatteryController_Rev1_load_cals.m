function result = BatteryController_Rev1_load_cals()

assignin('base', 'BatteryController_Rev1_cals', module_calibrations);

function s = module_calibrations()
%%MODULE_CALIBRATIONS -- Retrieved values of MotoHawk calibrations

%%MotoHawk Get Calibrations
%%Usage:
%%motohawk_getcals [--no-flash] [--no-ram] [--no-ee] [--no-code] [--port=portname]
%%  --no-flash = don't get flash values
%%  --no-ram = don't get ram values
%%  --no-ee = don't get eeprom values
%%  --no-code = don't get code values
%%  --port=portname connect to module on MotoServer port portname

s=struct;

%C:\PROGRA~2\Woodward\MCS\MotoHawk\2010A_~1.49\Bin\motohawk_getcals.exe --no-ram --no-code 

%Opening session...
%Session Opened...
%Connecting online to get table revisions and softwareID.
%Connected OK.
%Getting Table revisions
%Got 8 Table revisions...
%TableRevision[0] = 9
%TableRevision[1] = 1
%TableRevision[2] = 1
%TableRevision[3] = 1
%TableRevision[4] = 1
%TableRevision[5] = 1
%TableRevision[6] = 1
%TableRevision[7] = 1
%Getting Software ID
%Got software ID of - BatteryCo_051
%Getting Project ID
%Got project ID of - 6
%Opening Database...
%Database Opened...
%Opening dll...
s.project_id.value =  6.000000;
s.project_id.units = '';
s.project_id.help = 'This is the Platform ID used by the tools.';
s.project_id.format = '3.0';
s.project_id.group = 'System | System Config | Project Config';
s.project_id.storage = 'FLASH';
s.project_id.access = uint8(hex2dec('d5'));
s.project_id.min = 0.000000;
s.project_id.max = 255.000000;
s.project_id.gain = 1.000000;
s.project_id.offset = 0.000000;
s.project_id.exponent = 1.000000;
s.project_id.type = 'uint8';

s.project_id.value =  6.000000;
s.project_id.units = '';
s.project_id.help = 'This is the Platform ID used by the tools.';
s.project_id.format = '3.0';
s.project_id.group = 'System | System Config | Project Config';
s.project_id.storage = 'FLASH';
s.project_id.access = uint8(hex2dec('d5'));
s.project_id.min = 0.000000;
s.project_id.max = 255.000000;
s.project_id.gain = 1.000000;
s.project_id.offset = 0.000000;
s.project_id.exponent = 1.000000;
s.project_id.type = 'uint8';

s.project_id.value =  6.000000;
s.project_id.units = '';
s.project_id.help = 'This is the Platform ID used by the tools.';
s.project_id.format = '3.0';
s.project_id.group = 'System | System Config | Project Config';
s.project_id.storage = 'FLASH';
s.project_id.access = uint8(hex2dec('d5'));
s.project_id.min = 0.000000;
s.project_id.max = 255.000000;
s.project_id.gain = 1.000000;
s.project_id.offset = 0.000000;
s.project_id.exponent = 1.000000;
s.project_id.type = 'uint8';

s.project_id.value =  6.000000;
s.project_id.units = '';
s.project_id.help = 'This is the Platform ID used by the tools.';
s.project_id.format = '3.0';
s.project_id.group = 'System | System Config | Project Config';
s.project_id.storage = 'FLASH';
s.project_id.access = uint8(hex2dec('d5'));
s.project_id.min = 0.000000;
s.project_id.max = 255.000000;
s.project_id.gain = 1.000000;
s.project_id.offset = 0.000000;
s.project_id.exponent = 1.000000;
s.project_id.type = 'uint8';

s.project_id.value =  6.000000;
s.project_id.units = '';
s.project_id.help = 'This is the Platform ID used by the tools.';
s.project_id.format = '3.0';
s.project_id.group = 'System | System Config | Project Config';
s.project_id.storage = 'FLASH';
s.project_id.access = uint8(hex2dec('d5'));
s.project_id.min = 0.000000;
s.project_id.max = 255.000000;
s.project_id.gain = 1.000000;
s.project_id.offset = 0.000000;
s.project_id.exponent = 1.000000;
s.project_id.type = 'uint8';

s.project_id.value =  6.000000;
s.project_id.units = '';
s.project_id.help = 'This is the Platform ID used by the tools.';
s.project_id.format = '3.0';
s.project_id.group = 'System | System Config | Project Config';
s.project_id.storage = 'FLASH';
s.project_id.access = uint8(hex2dec('d5'));
s.project_id.min = 0.000000;
s.project_id.max = 255.000000;
s.project_id.gain = 1.000000;
s.project_id.offset = 0.000000;
s.project_id.exponent = 1.000000;
s.project_id.type = 'uint8';

s.project_id.value =  6.000000;
s.project_id.units = '';
s.project_id.help = 'This is the Platform ID used by the tools.';
s.project_id.format = '3.0';
s.project_id.group = 'System | System Config | Project Config';
s.project_id.storage = 'FLASH';
s.project_id.access = uint8(hex2dec('d5'));
s.project_id.min = 0.000000;
s.project_id.max = 255.000000;
s.project_id.gain = 1.000000;
s.project_id.offset = 0.000000;
s.project_id.exponent = 1.000000;
s.project_id.type = 'uint8';

s.project_id.value =  6.000000;
s.project_id.units = '';
s.project_id.help = 'This is the Platform ID used by the tools.';
s.project_id.format = '3.0';
s.project_id.group = 'System | System Config | Project Config';
s.project_id.storage = 'FLASH';
s.project_id.access = uint8(hex2dec('d5'));
s.project_id.min = 0.000000;
s.project_id.max = 255.000000;
s.project_id.gain = 1.000000;
s.project_id.offset = 0.000000;
s.project_id.exponent = 1.000000;
s.project_id.type = 'uint8';

s.project_id.value =  6.000000;
s.project_id.units = '';
s.project_id.help = 'This is the Platform ID used by the tools.';
s.project_id.format = '3.0';
s.project_id.group = 'System | System Config | Project Config';
s.project_id.storage = 'FLASH';
s.project_id.access = uint8(hex2dec('d5'));
s.project_id.min = 0.000000;
s.project_id.max = 255.000000;
s.project_id.gain = 1.000000;
s.project_id.offset = 0.000000;
s.project_id.exponent = 1.000000;
s.project_id.type = 'uint8';

s.project_id.value =  6.000000;
s.project_id.units = '';
s.project_id.help = 'This is the Platform ID used by the tools.';
s.project_id.format = '3.0';
s.project_id.group = 'System | System Config | Project Config';
s.project_id.storage = 'FLASH';
s.project_id.access = uint8(hex2dec('d5'));
s.project_id.min = 0.000000;
s.project_id.max = 255.000000;
s.project_id.gain = 1.000000;
s.project_id.offset = 0.000000;
s.project_id.exponent = 1.000000;
s.project_id.type = 'uint8';

s.project_id.value =  6.000000;
s.project_id.units = '';
s.project_id.help = 'This is the Platform ID used by the tools.';
s.project_id.format = '3.0';
s.project_id.group = 'System | System Config | Project Config';
s.project_id.storage = 'FLASH';
s.project_id.access = uint8(hex2dec('d5'));
s.project_id.min = 0.000000;
s.project_id.max = 255.000000;
s.project_id.gain = 1.000000;
s.project_id.offset = 0.000000;
s.project_id.exponent = 1.000000;
s.project_id.type = 'uint8';

s.ProductID.value =  1.000000;
s.ProductID.units = 'ID';
s.ProductID.help = 'Customer''s ID used by the tools.';
s.ProductID.format = '4.2';
s.ProductID.group = 'System | System Config | Project Config';
s.ProductID.storage = 'FLASH';
s.ProductID.access = uint8(hex2dec('d5'));
s.ProductID.min = 0.000000;
s.ProductID.max = 4294967295.000000;
s.ProductID.gain = 1.000000;
s.ProductID.offset = 0.000000;
s.ProductID.exponent = 1.000000;
s.ProductID.type = 'uint32';

s.Ampeage_Switch.value =  20.000000;
s.Ampeage_Switch.units = '';
s.Ampeage_Switch.help = '';
s.Ampeage_Switch.format = '4.2';
s.Ampeage_Switch.group = 'BatteryController_Rev1|Foreground|Battery|Control|SOC';
s.Ampeage_Switch.storage = 'FLASH';
s.Ampeage_Switch.access = uint8(hex2dec('ff'));
s.Ampeage_Switch.min = -100000000000000000.000000;
s.Ampeage_Switch.max = 100000000000000000.000000;
s.Ampeage_Switch.gain = 1.000000;
s.Ampeage_Switch.offset = 0.000000;
s.Ampeage_Switch.exponent = 1.000000;
s.Ampeage_Switch.type = 'single';

s.ApplicationMonitorEnable.value =  0.000000;
s.ApplicationMonitorEnable.units = '';
s.ApplicationMonitorEnable.help = 'Enables runtime checking of stack, heap, CPU, and OS errors.  Stops the application on error.';
s.ApplicationMonitorEnable.format = '3.0';
s.ApplicationMonitorEnable.group = 'System | Debug | Application Monitor Config';
s.ApplicationMonitorEnable.storage = 'FLASH';
s.ApplicationMonitorEnable.access = uint8(hex2dec('f5'));
s.ApplicationMonitorEnable.min = 0.000000;
s.ApplicationMonitorEnable.max = 1.000000;
s.ApplicationMonitorEnable.gain = 1.000000;
s.ApplicationMonitorEnable.offset = 0.000000;
s.ApplicationMonitorEnable.exponent = 1.000000;
s.ApplicationMonitorEnable.type = 'uint8';
s.ApplicationMonitorEnable.enumeration = struct('name',{'Disabled','Enabled'},'value',{0,1});

s.ApplicationPausePoint.value =  3.000000;
s.ApplicationPausePoint.units = '';
s.ApplicationPausePoint.help = 'Selects the startup pause point, for debugging.  Can be moved forward to step through the initialization';
s.ApplicationPausePoint.format = '3.0';
s.ApplicationPausePoint.group = 'System | Debug | Application Monitor Config';
s.ApplicationPausePoint.storage = 'FLASH';
s.ApplicationPausePoint.access = uint8(hex2dec('f5'));
s.ApplicationPausePoint.min = 0.000000;
s.ApplicationPausePoint.max = 3.000000;
s.ApplicationPausePoint.gain = 1.000000;
s.ApplicationPausePoint.offset = 0.000000;
s.ApplicationPausePoint.exponent = 1.000000;
s.ApplicationPausePoint.type = 'uint8';
s.ApplicationPausePoint.enumeration = struct('name',{'Before Model Initialize','After Model Init - Before STARTUP Event','After STARTUP Event - Before Run','Run'},'value',{0,1,2,3});

s.BalancingCount.value =  0.000000;
s.BalancingCount.units = '';
s.BalancingCount.help = '';
s.BalancingCount.format = '4.2';
s.BalancingCount.group = 'BatteryController_Rev1|Foreground|Battery|Inputs|2G BMS';
s.BalancingCount.storage = 'FLASH';
s.BalancingCount.access = uint8(hex2dec('ff'));
s.BalancingCount.min = -100000000000000000.000000;
s.BalancingCount.max = 100000000000000000.000000;
s.BalancingCount.gain = 1.000000;
s.BalancingCount.offset = 0.000000;
s.BalancingCount.exponent = 1.000000;
s.BalancingCount.type = 'single';

s.BgndStackMargin.value =  256.000000;
s.BgndStackMargin.units = '';
s.BgndStackMargin.help = 'When the available stack space drops below this threshold, the application performs a safety stop';
s.BgndStackMargin.format = '5.0';
s.BgndStackMargin.group = 'System | Debug | Application Monitor Config';
s.BgndStackMargin.storage = 'FLASH';
s.BgndStackMargin.access = uint8(hex2dec('f5'));
s.BgndStackMargin.min = 0.000000;
s.BgndStackMargin.max = 2048.000000;
s.BgndStackMargin.gain = 1.000000;
s.BgndStackMargin.offset = 0.000000;
s.BgndStackMargin.exponent = 1.000000;
s.BgndStackMargin.type = 'uint16';

s.CityID_CAN_1.value =  13.000000;
s.CityID_CAN_1.units = '';
s.CityID_CAN_1.help = 'City ID for CAN bus CAN_1';
s.CityID_CAN_1.format = '3.0';
s.CityID_CAN_1.group = 'System | System Config | Communication Config';
s.CityID_CAN_1.storage = 'FLASH';
s.CityID_CAN_1.access = uint8(hex2dec('c0'));
s.CityID_CAN_1.min = 0.000000;
s.CityID_CAN_1.max = 255.000000;
s.CityID_CAN_1.gain = 1.000000;
s.CityID_CAN_1.offset = 0.000000;
s.CityID_CAN_1.exponent = 1.000000;
s.CityID_CAN_1.type = 'uint8';

s.CoolantTemperature.value =  0.000000;
s.CoolantTemperature.units = '';
s.CoolantTemperature.help = '';
s.CoolantTemperature.format = '4.2';
s.CoolantTemperature.group = 'BatteryController_Rev1|Foreground|Battery|Outputs|Battery';
s.CoolantTemperature.storage = 'FLASH';
s.CoolantTemperature.access = uint8(hex2dec('ff'));
s.CoolantTemperature.min = -100000000000000000.000000;
s.CoolantTemperature.max = 100000000000000000.000000;
s.CoolantTemperature.gain = 1.000000;
s.CoolantTemperature.offset = 0.000000;
s.CoolantTemperature.exponent = 1.000000;
s.CoolantTemperature.type = 'single';

s.CPUMargin.value =  9.999223;
s.CPUMargin.units = '';
s.CPUMargin.help = 'When the available CPU idle time drops below this threshold, the application performs a safety stop';
s.CPUMargin.format = '3.0';
s.CPUMargin.group = 'System | Debug | Application Monitor Config';
s.CPUMargin.storage = 'FLASH';
s.CPUMargin.access = uint8(hex2dec('f5'));
s.CPUMargin.min = 0.000000;
s.CPUMargin.max = 100.000000;
s.CPUMargin.gain = 0.001526;
s.CPUMargin.offset = 0.000000;
s.CPUMargin.exponent = 1.000000;
s.CPUMargin.type = 'uint16';

s.Current_Div.value =  205.000000;
s.Current_Div.units = '';
s.Current_Div.help = '';
s.Current_Div.format = '4.2';
s.Current_Div.group = 'BatteryController_Rev1|Foreground|Battery|Control|AMP Clamp';
s.Current_Div.storage = 'FLASH';
s.Current_Div.access = uint8(hex2dec('ff'));
s.Current_Div.min = -100000000000000000.000000;
s.Current_Div.max = 100000000000000000.000000;
s.Current_Div.gain = 1.000000;
s.Current_Div.offset = 0.000000;
s.Current_Div.exponent = 1.000000;
s.Current_Div.type = 'single';

s.Delay_3_Cal.value =  0.300000;
s.Delay_3_Cal.units = '';
s.Delay_3_Cal.help = '';
s.Delay_3_Cal.format = '4.2';
s.Delay_3_Cal.group = 'BatteryController_Rev1|Foreground|Battery|Control|Battery States|Delay3';
s.Delay_3_Cal.storage = 'FLASH';
s.Delay_3_Cal.access = uint8(hex2dec('ff'));
s.Delay_3_Cal.min = -5000000000000000.000000;
s.Delay_3_Cal.max = 5000000000000000.000000;
s.Delay_3_Cal.gain = 0.050000;
s.Delay_3_Cal.offset = 0.000000;
s.Delay_3_Cal.exponent = 1.000000;
s.Delay_3_Cal.type = 'single';

s.Delay_5_Cal.value =  5.000000;
s.Delay_5_Cal.units = '';
s.Delay_5_Cal.help = '';
s.Delay_5_Cal.format = '4.2';
s.Delay_5_Cal.group = 'BatteryController_Rev1|Foreground|Battery|Control|Battery States|Delay5';
s.Delay_5_Cal.storage = 'FLASH';
s.Delay_5_Cal.access = uint8(hex2dec('ff'));
s.Delay_5_Cal.min = -5000000000000000.000000;
s.Delay_5_Cal.max = 5000000000000000.000000;
s.Delay_5_Cal.gain = 0.050000;
s.Delay_5_Cal.offset = 0.000000;
s.Delay_5_Cal.exponent = 1.000000;
s.Delay_5_Cal.type = 'single';

s.DPI_RollingCounter.value =  0.000000;
s.DPI_RollingCounter.units = '';
s.DPI_RollingCounter.help = '';
s.DPI_RollingCounter.format = '4.2';
s.DPI_RollingCounter.group = 'BatteryController_Rev1|Foreground|Battery|Outputs|Battery';
s.DPI_RollingCounter.storage = 'FLASH';
s.DPI_RollingCounter.access = uint8(hex2dec('ff'));
s.DPI_RollingCounter.min = -100000000000000000.000000;
s.DPI_RollingCounter.max = 100000000000000000.000000;
s.DPI_RollingCounter.gain = 1.000000;
s.DPI_RollingCounter.offset = 0.000000;
s.DPI_RollingCounter.exponent = 1.000000;
s.DPI_RollingCounter.type = 'single';

s.DutyCycle.value =  2056.000000;
s.DutyCycle.units = '';
s.DutyCycle.help = '';
s.DutyCycle.format = '4.2';
s.DutyCycle.group = 'BatteryController_Rev1|Foreground|Battery|Inputs|Contactors';
s.DutyCycle.storage = 'FLASH';
s.DutyCycle.access = uint8(hex2dec('ff'));
s.DutyCycle.min = -100000000000000000.000000;
s.DutyCycle.max = 100000000000000000.000000;
s.DutyCycle.gain = 1.000000;
s.DutyCycle.offset = 0.000000;
s.DutyCycle.exponent = 1.000000;
s.DutyCycle.type = 'single';

s.ECUP_Threshold.value =  100.000000;
s.ECUP_Threshold.units = 'ADC_counts';
s.ECUP_Threshold.help = 'ADC voltage threshold above which ECU is considered powered';
s.ECUP_Threshold.format = '5.0';
s.ECUP_Threshold.group = 'System | Main Power Relay | Main Power Relay Config';
s.ECUP_Threshold.storage = 'FLASH';
s.ECUP_Threshold.access = uint8(hex2dec('ff'));
s.ECUP_Threshold.min = 0.000000;
s.ECUP_Threshold.max = 1023.000000;
s.ECUP_Threshold.gain = 1.000000;
s.ECUP_Threshold.offset = 0.000000;
s.ECUP_Threshold.exponent = 1.000000;
s.ECUP_Threshold.type = 'uint16';

s.FaultsDTC.value =  0.000000;
s.FaultsDTC.units = '';
s.FaultsDTC.help = '';
s.FaultsDTC.format = '4.2';
s.FaultsDTC.group = 'BatteryController_Rev1|Foreground|Battery|Inputs|2G BMS';
s.FaultsDTC.storage = 'FLASH';
s.FaultsDTC.access = uint8(hex2dec('ff'));
s.FaultsDTC.min = -100000000000000000.000000;
s.FaultsDTC.max = 100000000000000000.000000;
s.FaultsDTC.gain = 1.000000;
s.FaultsDTC.offset = 0.000000;
s.FaultsDTC.exponent = 1.000000;
s.FaultsDTC.type = 'single';

s.FgndTimeStackMargin.value =  512.000000;
s.FgndTimeStackMargin.units = '';
s.FgndTimeStackMargin.help = 'When the available stack space drops below this threshold, the application performs a safety stop';
s.FgndTimeStackMargin.format = '5.0';
s.FgndTimeStackMargin.group = 'System | Debug | Application Monitor Config';
s.FgndTimeStackMargin.storage = 'FLASH';
s.FgndTimeStackMargin.access = uint8(hex2dec('f5'));
s.FgndTimeStackMargin.min = 0.000000;
s.FgndTimeStackMargin.max = 3072.000000;
s.FgndTimeStackMargin.gain = 1.000000;
s.FgndTimeStackMargin.offset = 0.000000;
s.FgndTimeStackMargin.exponent = 1.000000;
s.FgndTimeStackMargin.type = 'uint16';

s.FiltConst.value =  0.400000;
s.FiltConst.units = 'sec';
s.FiltConst.help = 'Filter time constant';
s.FiltConst.format = '4.2';
s.FiltConst.group = 'BatteryController_Rev1|Foreground|Battery|Control|SOC';
s.FiltConst.storage = 'FLASH';
s.FiltConst.access = uint8(hex2dec('ff'));
s.FiltConst.min = -100000000000000000.000000;
s.FiltConst.max = 100000000000000000.000000;
s.FiltConst.gain = 1.000000;
s.FiltConst.offset = 0.000000;
s.FiltConst.exponent = 1.000000;
s.FiltConst.type = 'single';

s.FreqEnd.value =  300.000000;
s.FreqEnd.units = '';
s.FreqEnd.help = '';
s.FreqEnd.format = '4.2';
s.FreqEnd.group = 'BatteryController_Rev1|Foreground|Battery|Inputs|Contactors';
s.FreqEnd.storage = 'FLASH';
s.FreqEnd.access = uint8(hex2dec('ff'));
s.FreqEnd.min = -100000000000000000.000000;
s.FreqEnd.max = 100000000000000000.000000;
s.FreqEnd.gain = 1.000000;
s.FreqEnd.offset = 0.000000;
s.FreqEnd.exponent = 1.000000;
s.FreqEnd.type = 'single';

s.FreqStart.value =  400.000000;
s.FreqStart.units = '';
s.FreqStart.help = '';
s.FreqStart.format = '4.2';
s.FreqStart.group = 'BatteryController_Rev1|Foreground|Battery|Inputs|Contactors';
s.FreqStart.storage = 'FLASH';
s.FreqStart.access = uint8(hex2dec('ff'));
s.FreqStart.min = -100000000000000000.000000;
s.FreqStart.max = 100000000000000000.000000;
s.FreqStart.gain = 1.000000;
s.FreqStart.offset = 0.000000;
s.FreqStart.exponent = 1.000000;
s.FreqStart.type = 'single';

s.HeapMargin.value =  256.000000;
s.HeapMargin.units = '';
s.HeapMargin.help = 'When the available heap drops below this threshold, the application performs a safety stop';
s.HeapMargin.format = '5.0';
s.HeapMargin.group = 'System | Debug | Application Monitor Config';
s.HeapMargin.storage = 'FLASH';
s.HeapMargin.access = uint8(hex2dec('f5'));
s.HeapMargin.min = 0.000000;
s.HeapMargin.max = 4096.000000;
s.HeapMargin.gain = 1.000000;
s.HeapMargin.offset = 0.000000;
s.HeapMargin.exponent = 1.000000;
s.HeapMargin.type = 'uint16';

s.HVIL_Status.value =  1.000000;
s.HVIL_Status.units = '';
s.HVIL_Status.help = '';
s.HVIL_Status.format = '4.2';
s.HVIL_Status.group = 'BatteryController_Rev1|Foreground|Battery|Outputs|Battery';
s.HVIL_Status.storage = 'FLASH';
s.HVIL_Status.access = uint8(hex2dec('ff'));
s.HVIL_Status.min = -100000000000000000.000000;
s.HVIL_Status.max = 100000000000000000.000000;
s.HVIL_Status.gain = 1.000000;
s.HVIL_Status.offset = 0.000000;
s.HVIL_Status.exponent = 1.000000;
s.HVIL_Status.type = 'single';

s.hystoresis.value =  1.500000;
s.hystoresis.units = '';
s.hystoresis.help = '';
s.hystoresis.format = '4.2';
s.hystoresis.group = 'BatteryController_Rev1|Foreground|Battery|Control|SOC';
s.hystoresis.storage = 'FLASH';
s.hystoresis.access = uint8(hex2dec('ff'));
s.hystoresis.min = -100000000000000000.000000;
s.hystoresis.max = 100000000000000000.000000;
s.hystoresis.gain = 1.000000;
s.hystoresis.offset = 0.000000;
s.hystoresis.exponent = 1.000000;
s.hystoresis.type = 'single';

s.IdleStackMargin.value =  256.000000;
s.IdleStackMargin.units = '';
s.IdleStackMargin.help = 'When the available stack space drops below this threshold, the application performs a safety stop';
s.IdleStackMargin.format = '5.0';
s.IdleStackMargin.group = 'System | Debug | Application Monitor Config';
s.IdleStackMargin.storage = 'FLASH';
s.IdleStackMargin.access = uint8(hex2dec('f5'));
s.IdleStackMargin.min = 0.000000;
s.IdleStackMargin.max = 1024.000000;
s.IdleStackMargin.gain = 1.000000;
s.IdleStackMargin.offset = 0.000000;
s.IdleStackMargin.exponent = 1.000000;
s.IdleStackMargin.type = 'uint16';

s.InterruptStackMargin.value =  128.000000;
s.InterruptStackMargin.units = '';
s.InterruptStackMargin.help = 'When the available stack space drops below this threshold, the application performs a safety stop';
s.InterruptStackMargin.format = '5.0';
s.InterruptStackMargin.group = 'System | Debug | Application Monitor Config';
s.InterruptStackMargin.storage = 'FLASH';
s.InterruptStackMargin.access = uint8(hex2dec('f5'));
s.InterruptStackMargin.min = 0.000000;
s.InterruptStackMargin.max = 1536.000000;
s.InterruptStackMargin.gain = 1.000000;
s.InterruptStackMargin.offset = 0.000000;
s.InterruptStackMargin.exponent = 1.000000;
s.InterruptStackMargin.type = 'uint16';

s.IsolationLevel.value =  10.000000;
s.IsolationLevel.units = '';
s.IsolationLevel.help = '';
s.IsolationLevel.format = '4.2';
s.IsolationLevel.group = 'BatteryController_Rev1|Foreground|Battery|Outputs|Battery';
s.IsolationLevel.storage = 'FLASH';
s.IsolationLevel.access = uint8(hex2dec('ff'));
s.IsolationLevel.min = -100000000000000000.000000;
s.IsolationLevel.max = 100000000000000000.000000;
s.IsolationLevel.gain = 1.000000;
s.IsolationLevel.offset = 0.000000;
s.IsolationLevel.exponent = 1.000000;
s.IsolationLevel.type = 'single';

s.IsolationStatus.value =  0.000000;
s.IsolationStatus.units = '';
s.IsolationStatus.help = '';
s.IsolationStatus.format = '4.2';
s.IsolationStatus.group = 'BatteryController_Rev1|Foreground|Battery|Outputs|Battery';
s.IsolationStatus.storage = 'FLASH';
s.IsolationStatus.access = uint8(hex2dec('ff'));
s.IsolationStatus.min = -100000000000000000.000000;
s.IsolationStatus.max = 100000000000000000.000000;
s.IsolationStatus.gain = 1.000000;
s.IsolationStatus.offset = 0.000000;
s.IsolationStatus.exponent = 1.000000;
s.IsolationStatus.type = 'single';

s.kFactor_Increment.value =  0.100000;
s.kFactor_Increment.units = '';
s.kFactor_Increment.help = '';
s.kFactor_Increment.format = '4.2';
s.kFactor_Increment.group = 'BatteryController_Rev1|Foreground|Battery|Control|SOC';
s.kFactor_Increment.storage = 'FLASH';
s.kFactor_Increment.access = uint8(hex2dec('ff'));
s.kFactor_Increment.min = -100000000000000000.000000;
s.kFactor_Increment.max = 100000000000000000.000000;
s.kFactor_Increment.gain = 1.000000;
s.kFactor_Increment.offset = 0.000000;
s.kFactor_Increment.exponent = 1.000000;
s.kFactor_Increment.type = 'single';

s.MaxCellTemp.value =  25.000000;
s.MaxCellTemp.units = '';
s.MaxCellTemp.help = '';
s.MaxCellTemp.format = '4.2';
s.MaxCellTemp.group = 'BatteryController_Rev1|Foreground|Battery|Inputs|2G BMS';
s.MaxCellTemp.storage = 'FLASH';
s.MaxCellTemp.access = uint8(hex2dec('ff'));
s.MaxCellTemp.min = -100000000000000000.000000;
s.MaxCellTemp.max = 100000000000000000.000000;
s.MaxCellTemp.gain = 1.000000;
s.MaxCellTemp.offset = 0.000000;
s.MaxCellTemp.exponent = 1.000000;
s.MaxCellTemp.type = 'single';

s.MaximumDischargePower_10S.value =  300.000000;
s.MaximumDischargePower_10S.units = '';
s.MaximumDischargePower_10S.help = '';
s.MaximumDischargePower_10S.format = '4.2';
s.MaximumDischargePower_10S.group = 'BatteryController_Rev1|Foreground|Battery|Outputs|Battery';
s.MaximumDischargePower_10S.storage = 'FLASH';
s.MaximumDischargePower_10S.access = uint8(hex2dec('ff'));
s.MaximumDischargePower_10S.min = -100000000000000000.000000;
s.MaximumDischargePower_10S.max = 100000000000000000.000000;
s.MaximumDischargePower_10S.gain = 1.000000;
s.MaximumDischargePower_10S.offset = 0.000000;
s.MaximumDischargePower_10S.exponent = 1.000000;
s.MaximumDischargePower_10S.type = 'single';

s.MaximumDischargePower_Continous.value =  210.000000;
s.MaximumDischargePower_Continous.units = '';
s.MaximumDischargePower_Continous.help = '';
s.MaximumDischargePower_Continous.format = '4.2';
s.MaximumDischargePower_Continous.group = 'BatteryController_Rev1|Foreground|Battery|Outputs|Battery';
s.MaximumDischargePower_Continous.storage = 'FLASH';
s.MaximumDischargePower_Continous.access = uint8(hex2dec('ff'));
s.MaximumDischargePower_Continous.min = -100000000000000000.000000;
s.MaximumDischargePower_Continous.max = 100000000000000000.000000;
s.MaximumDischargePower_Continous.gain = 1.000000;
s.MaximumDischargePower_Continous.offset = 0.000000;
s.MaximumDischargePower_Continous.exponent = 1.000000;
s.MaximumDischargePower_Continous.type = 'single';

s.MaximumRegenPower_10S.value =  300.000000;
s.MaximumRegenPower_10S.units = '';
s.MaximumRegenPower_10S.help = '';
s.MaximumRegenPower_10S.format = '4.2';
s.MaximumRegenPower_10S.group = 'BatteryController_Rev1|Foreground|Battery|Outputs|Battery';
s.MaximumRegenPower_10S.storage = 'FLASH';
s.MaximumRegenPower_10S.access = uint8(hex2dec('ff'));
s.MaximumRegenPower_10S.min = -100000000000000000.000000;
s.MaximumRegenPower_10S.max = 100000000000000000.000000;
s.MaximumRegenPower_10S.gain = 1.000000;
s.MaximumRegenPower_10S.offset = 0.000000;
s.MaximumRegenPower_10S.exponent = 1.000000;
s.MaximumRegenPower_10S.type = 'single';

s.MaximumRegenPower_Continous.value =  210.000000;
s.MaximumRegenPower_Continous.units = '';
s.MaximumRegenPower_Continous.help = '';
s.MaximumRegenPower_Continous.format = '4.2';
s.MaximumRegenPower_Continous.group = 'BatteryController_Rev1|Foreground|Battery|Outputs|Battery';
s.MaximumRegenPower_Continous.storage = 'FLASH';
s.MaximumRegenPower_Continous.access = uint8(hex2dec('ff'));
s.MaximumRegenPower_Continous.min = -100000000000000000.000000;
s.MaximumRegenPower_Continous.max = 100000000000000000.000000;
s.MaximumRegenPower_Continous.gain = 1.000000;
s.MaximumRegenPower_Continous.offset = 0.000000;
s.MaximumRegenPower_Continous.exponent = 1.000000;
s.MaximumRegenPower_Continous.type = 'single';

s.MILState.value =  0.000000;
s.MILState.units = '';
s.MILState.help = '';
s.MILState.format = '4.2';
s.MILState.group = 'BatteryController_Rev1|Foreground|Battery|Outputs|Battery';
s.MILState.storage = 'FLASH';
s.MILState.access = uint8(hex2dec('ff'));
s.MILState.min = -100000000000000000.000000;
s.MILState.max = 100000000000000000.000000;
s.MILState.gain = 1.000000;
s.MILState.offset = 0.000000;
s.MILState.exponent = 1.000000;
s.MILState.type = 'single';

s.MinCellTemp.value =  25.000000;
s.MinCellTemp.units = '';
s.MinCellTemp.help = '';
s.MinCellTemp.format = '4.2';
s.MinCellTemp.group = 'BatteryController_Rev1|Foreground|Battery|Inputs|2G BMS';
s.MinCellTemp.storage = 'FLASH';
s.MinCellTemp.access = uint8(hex2dec('ff'));
s.MinCellTemp.min = -100000000000000000.000000;
s.MinCellTemp.max = 100000000000000000.000000;
s.MinCellTemp.gain = 1.000000;
s.MinCellTemp.offset = 0.000000;
s.MinCellTemp.exponent = 1.000000;
s.MinCellTemp.type = 'single';

s.NonVolatileRestoreOnFirstStartup.value =  1.000000;
s.NonVolatileRestoreOnFirstStartup.units = '';
s.NonVolatileRestoreOnFirstStartup.help = 'Selects whether to restore from factory defaults the first time an application boots';
s.NonVolatileRestoreOnFirstStartup.format = '1.0';
s.NonVolatileRestoreOnFirstStartup.group = 'System | NonVolatile Storage | NonVolatile Storage Config';
s.NonVolatileRestoreOnFirstStartup.storage = 'FLASH';
s.NonVolatileRestoreOnFirstStartup.access = uint8(hex2dec('ff'));
s.NonVolatileRestoreOnFirstStartup.min = 0.000000;
s.NonVolatileRestoreOnFirstStartup.max = 1.000000;
s.NonVolatileRestoreOnFirstStartup.gain = 1.000000;
s.NonVolatileRestoreOnFirstStartup.offset = 0.000000;
s.NonVolatileRestoreOnFirstStartup.exponent = 1.000000;
s.NonVolatileRestoreOnFirstStartup.type = 'uint8';
s.NonVolatileRestoreOnFirstStartup.enumeration = struct('name',{'Load saved application values on next startup','Load factory defaults on next startup'},'value',{0,1});

s.NonVolatileRestoreOnStartup.value =  0.000000;
s.NonVolatileRestoreOnStartup.units = '';
s.NonVolatileRestoreOnStartup.help = 'Selects whether to restore from factory defaults on next startup';
s.NonVolatileRestoreOnStartup.format = '1.0';
s.NonVolatileRestoreOnStartup.group = 'System | NonVolatile Storage | NonVolatile Storage Config';
s.NonVolatileRestoreOnStartup.storage = 'FLASH';
s.NonVolatileRestoreOnStartup.access = uint8(hex2dec('ff'));
s.NonVolatileRestoreOnStartup.min = 0.000000;
s.NonVolatileRestoreOnStartup.max = 1.000000;
s.NonVolatileRestoreOnStartup.gain = 1.000000;
s.NonVolatileRestoreOnStartup.offset = 0.000000;
s.NonVolatileRestoreOnStartup.exponent = 1.000000;
s.NonVolatileRestoreOnStartup.type = 'uint8';
s.NonVolatileRestoreOnStartup.enumeration = struct('name',{'Load saved application values on next startup','Load factory defaults on next startup'},'value',{0,1});

s.PackIdentifier.value =  69.000000;
s.PackIdentifier.units = '';
s.PackIdentifier.help = '';
s.PackIdentifier.format = '4.2';
s.PackIdentifier.group = 'BatteryController_Rev1|Foreground|Battery|Outputs|Battery';
s.PackIdentifier.storage = 'FLASH';
s.PackIdentifier.access = uint8(hex2dec('ff'));
s.PackIdentifier.min = -100000000000000000.000000;
s.PackIdentifier.max = 100000000000000000.000000;
s.PackIdentifier.gain = 1.000000;
s.PackIdentifier.offset = 0.000000;
s.PackIdentifier.exponent = 1.000000;
s.PackIdentifier.type = 'single';

s.PPL_RollingCounter.value =  0.000000;
s.PPL_RollingCounter.units = '';
s.PPL_RollingCounter.help = '';
s.PPL_RollingCounter.format = '4.2';
s.PPL_RollingCounter.group = 'BatteryController_Rev1|Foreground|Battery|Outputs|Battery';
s.PPL_RollingCounter.storage = 'FLASH';
s.PPL_RollingCounter.access = uint8(hex2dec('ff'));
s.PPL_RollingCounter.min = -100000000000000000.000000;
s.PPL_RollingCounter.max = 100000000000000000.000000;
s.PPL_RollingCounter.gain = 1.000000;
s.PPL_RollingCounter.offset = 0.000000;
s.PPL_RollingCounter.exponent = 1.000000;
s.PPL_RollingCounter.type = 'single';

s.PPL10S_RollingCounter.value =  0.000000;
s.PPL10S_RollingCounter.units = '';
s.PPL10S_RollingCounter.help = '';
s.PPL10S_RollingCounter.format = '4.2';
s.PPL10S_RollingCounter.group = 'BatteryController_Rev1|Foreground|Battery|Outputs|Battery';
s.PPL10S_RollingCounter.storage = 'FLASH';
s.PPL10S_RollingCounter.access = uint8(hex2dec('ff'));
s.PPL10S_RollingCounter.min = -100000000000000000.000000;
s.PPL10S_RollingCounter.max = 100000000000000000.000000;
s.PPL10S_RollingCounter.gain = 1.000000;
s.PPL10S_RollingCounter.offset = 0.000000;
s.PPL10S_RollingCounter.exponent = 1.000000;
s.PPL10S_RollingCounter.type = 'single';

s.Precharge_Current_Threshold.value =  0.750000;
s.Precharge_Current_Threshold.units = '';
s.Precharge_Current_Threshold.help = '';
s.Precharge_Current_Threshold.format = '4.2';
s.Precharge_Current_Threshold.group = 'BatteryController_Rev1|Foreground|Battery|Control|Battery States';
s.Precharge_Current_Threshold.storage = 'FLASH';
s.Precharge_Current_Threshold.access = uint8(hex2dec('ff'));
s.Precharge_Current_Threshold.min = -100000000000000000.000000;
s.Precharge_Current_Threshold.max = 100000000000000000.000000;
s.Precharge_Current_Threshold.gain = 1.000000;
s.Precharge_Current_Threshold.offset = 0.000000;
s.Precharge_Current_Threshold.exponent = 1.000000;
s.Precharge_Current_Threshold.type = 'single';

s.PS_RollingCounter.value =  0.000000;
s.PS_RollingCounter.units = '';
s.PS_RollingCounter.help = '';
s.PS_RollingCounter.format = '4.2';
s.PS_RollingCounter.group = 'BatteryController_Rev1|Foreground|Battery|Outputs|Battery';
s.PS_RollingCounter.storage = 'FLASH';
s.PS_RollingCounter.access = uint8(hex2dec('ff'));
s.PS_RollingCounter.min = -100000000000000000.000000;
s.PS_RollingCounter.max = 100000000000000000.000000;
s.PS_RollingCounter.gain = 1.000000;
s.PS_RollingCounter.offset = 0.000000;
s.PS_RollingCounter.exponent = 1.000000;
s.PS_RollingCounter.type = 'single';

s.PVC_RollingCounter.value =  0.000000;
s.PVC_RollingCounter.units = '';
s.PVC_RollingCounter.help = '';
s.PVC_RollingCounter.format = '4.2';
s.PVC_RollingCounter.group = 'BatteryController_Rev1|Foreground|Battery|Outputs|Battery';
s.PVC_RollingCounter.storage = 'FLASH';
s.PVC_RollingCounter.access = uint8(hex2dec('ff'));
s.PVC_RollingCounter.min = -100000000000000000.000000;
s.PVC_RollingCounter.max = 100000000000000000.000000;
s.PVC_RollingCounter.gain = 1.000000;
s.PVC_RollingCounter.offset = 0.000000;
s.PVC_RollingCounter.exponent = 1.000000;
s.PVC_RollingCounter.type = 'single';

s.Sensitivity_G_mV_per_A.value =  6.150000;
s.Sensitivity_G_mV_per_A.units = '';
s.Sensitivity_G_mV_per_A.help = '';
s.Sensitivity_G_mV_per_A.format = '4.2';
s.Sensitivity_G_mV_per_A.group = 'BatteryController_Rev1|Foreground|Battery|Control|AMP Clamp';
s.Sensitivity_G_mV_per_A.storage = 'FLASH';
s.Sensitivity_G_mV_per_A.access = uint8(hex2dec('ff'));
s.Sensitivity_G_mV_per_A.min = -100000000000000000.000000;
s.Sensitivity_G_mV_per_A.max = 100000000000000000.000000;
s.Sensitivity_G_mV_per_A.gain = 1.000000;
s.Sensitivity_G_mV_per_A.offset = 0.000000;
s.Sensitivity_G_mV_per_A.exponent = 1.000000;
s.Sensitivity_G_mV_per_A.type = 'single';

s.SleepInhibited.value =  0.000000;
s.SleepInhibited.units = '';
s.SleepInhibited.help = '';
s.SleepInhibited.format = '4.2';
s.SleepInhibited.group = 'BatteryController_Rev1|Foreground|Battery|Outputs|Battery';
s.SleepInhibited.storage = 'FLASH';
s.SleepInhibited.access = uint8(hex2dec('ff'));
s.SleepInhibited.min = -100000000000000000.000000;
s.SleepInhibited.max = 100000000000000000.000000;
s.SleepInhibited.gain = 1.000000;
s.SleepInhibited.offset = 0.000000;
s.SleepInhibited.exponent = 1.000000;
s.SleepInhibited.type = 'single';

s.StateOfChargeMax.value =  100.000000;
s.StateOfChargeMax.units = '';
s.StateOfChargeMax.help = '';
s.StateOfChargeMax.format = '4.2';
s.StateOfChargeMax.group = 'BatteryController_Rev1|Foreground|Battery|Outputs|Battery';
s.StateOfChargeMax.storage = 'FLASH';
s.StateOfChargeMax.access = uint8(hex2dec('ff'));
s.StateOfChargeMax.min = -100000000000000000.000000;
s.StateOfChargeMax.max = 100000000000000000.000000;
s.StateOfChargeMax.gain = 1.000000;
s.StateOfChargeMax.offset = 0.000000;
s.StateOfChargeMax.exponent = 1.000000;
s.StateOfChargeMax.type = 'single';

s.StateOfChargeMin.value =  0.000000;
s.StateOfChargeMin.units = '';
s.StateOfChargeMin.help = '';
s.StateOfChargeMin.format = '4.2';
s.StateOfChargeMin.group = 'BatteryController_Rev1|Foreground|Battery|Outputs|Battery';
s.StateOfChargeMin.storage = 'FLASH';
s.StateOfChargeMin.access = uint8(hex2dec('ff'));
s.StateOfChargeMin.min = -100000000000000000.000000;
s.StateOfChargeMin.max = 100000000000000000.000000;
s.StateOfChargeMin.gain = 1.000000;
s.StateOfChargeMin.offset = 0.000000;
s.StateOfChargeMin.exponent = 1.000000;
s.StateOfChargeMin.type = 'single';

s.TAH_RollingCounter.value =  0.000000;
s.TAH_RollingCounter.units = '';
s.TAH_RollingCounter.help = '';
s.TAH_RollingCounter.format = '4.2';
s.TAH_RollingCounter.group = 'BatteryController_Rev1|Foreground|Battery|Outputs|Battery';
s.TAH_RollingCounter.storage = 'FLASH';
s.TAH_RollingCounter.access = uint8(hex2dec('ff'));
s.TAH_RollingCounter.min = -100000000000000000.000000;
s.TAH_RollingCounter.max = 100000000000000000.000000;
s.TAH_RollingCounter.gain = 1.000000;
s.TAH_RollingCounter.offset = 0.000000;
s.TAH_RollingCounter.exponent = 1.000000;
s.TAH_RollingCounter.type = 'single';

s.TripAmpsHoursIn.value =  0.000000;
s.TripAmpsHoursIn.units = '';
s.TripAmpsHoursIn.help = '';
s.TripAmpsHoursIn.format = '4.2';
s.TripAmpsHoursIn.group = 'BatteryController_Rev1|Foreground|Battery|Outputs|Battery';
s.TripAmpsHoursIn.storage = 'FLASH';
s.TripAmpsHoursIn.access = uint8(hex2dec('ff'));
s.TripAmpsHoursIn.min = -100000000000000000.000000;
s.TripAmpsHoursIn.max = 100000000000000000.000000;
s.TripAmpsHoursIn.gain = 1.000000;
s.TripAmpsHoursIn.offset = 0.000000;
s.TripAmpsHoursIn.exponent = 1.000000;
s.TripAmpsHoursIn.type = 'single';

s.TripAmpsHoursOut.value =  0.000000;
s.TripAmpsHoursOut.units = '';
s.TripAmpsHoursOut.help = '';
s.TripAmpsHoursOut.format = '4.2';
s.TripAmpsHoursOut.group = 'BatteryController_Rev1|Foreground|Battery|Outputs|Battery';
s.TripAmpsHoursOut.storage = 'FLASH';
s.TripAmpsHoursOut.access = uint8(hex2dec('ff'));
s.TripAmpsHoursOut.min = -100000000000000000.000000;
s.TripAmpsHoursOut.max = 100000000000000000.000000;
s.TripAmpsHoursOut.gain = 1.000000;
s.TripAmpsHoursOut.offset = 0.000000;
s.TripAmpsHoursOut.exponent = 1.000000;
s.TripAmpsHoursOut.type = 'single';

s.Voltage_Div.value =  205.000000;
s.Voltage_Div.units = '';
s.Voltage_Div.help = '';
s.Voltage_Div.format = '4.2';
s.Voltage_Div.group = 'BatteryController_Rev1|Foreground|Battery|Control|AMP Clamp';
s.Voltage_Div.storage = 'FLASH';
s.Voltage_Div.access = uint8(hex2dec('ff'));
s.Voltage_Div.min = -100000000000000000.000000;
s.Voltage_Div.max = 100000000000000000.000000;
s.Voltage_Div.gain = 1.000000;
s.Voltage_Div.offset = 0.000000;
s.Voltage_Div.exponent = 1.000000;
s.Voltage_Div.type = 'single';

s.WakeSignal.value =  0.000000;
s.WakeSignal.units = '';
s.WakeSignal.help = '';
s.WakeSignal.format = '4.2';
s.WakeSignal.group = 'BatteryController_Rev1|Foreground|Battery|Outputs|Battery';
s.WakeSignal.storage = 'FLASH';
s.WakeSignal.access = uint8(hex2dec('ff'));
s.WakeSignal.min = -100000000000000000.000000;
s.WakeSignal.max = 100000000000000000.000000;
s.WakeSignal.gain = 1.000000;
s.WakeSignal.offset = 0.000000;
s.WakeSignal.exponent = 1.000000;
s.WakeSignal.type = 'single';

s.project_id.value =  6.000000;
s.project_id.units = '';
s.project_id.help = 'This is the Platform ID used by the tools.';
s.project_id.format = '3.0';
s.project_id.group = 'System | System Config | Project Config';
s.project_id.storage = 'FLASH';
s.project_id.access = uint8(hex2dec('d5'));
s.project_id.min = 0.000000;
s.project_id.max = 255.000000;
s.project_id.gain = 1.000000;
s.project_id.offset = 0.000000;
s.project_id.exponent = 1.000000;
s.project_id.type = 'uint8';

s.project_id.value =  6.000000;
s.project_id.units = '';
s.project_id.help = 'This is the Platform ID used by the tools.';
s.project_id.format = '3.0';
s.project_id.group = 'System | System Config | Project Config';
s.project_id.storage = 'FLASH';
s.project_id.access = uint8(hex2dec('d5'));
s.project_id.min = 0.000000;
s.project_id.max = 255.000000;
s.project_id.gain = 1.000000;
s.project_id.offset = 0.000000;
s.project_id.exponent = 1.000000;
s.project_id.type = 'uint8';

s.project_id.value =  6.000000;
s.project_id.units = '';
s.project_id.help = 'This is the Platform ID used by the tools.';
s.project_id.format = '3.0';
s.project_id.group = 'System | System Config | Project Config';
s.project_id.storage = 'FLASH';
s.project_id.access = uint8(hex2dec('d5'));
s.project_id.min = 0.000000;
s.project_id.max = 255.000000;
s.project_id.gain = 1.000000;
s.project_id.offset = 0.000000;
s.project_id.exponent = 1.000000;
s.project_id.type = 'uint8';

s.project_id.value =  6.000000;
s.project_id.units = '';
s.project_id.help = 'This is the Platform ID used by the tools.';
s.project_id.format = '3.0';
s.project_id.group = 'System | System Config | Project Config';
s.project_id.storage = 'FLASH';
s.project_id.access = uint8(hex2dec('d5'));
s.project_id.min = 0.000000;
s.project_id.max = 255.000000;
s.project_id.gain = 1.000000;
s.project_id.offset = 0.000000;
s.project_id.exponent = 1.000000;
s.project_id.type = 'uint8';

s.project_id.value =  6.000000;
s.project_id.units = '';
s.project_id.help = 'This is the Platform ID used by the tools.';
s.project_id.format = '3.0';
s.project_id.group = 'System | System Config | Project Config';
s.project_id.storage = 'FLASH';
s.project_id.access = uint8(hex2dec('d5'));
s.project_id.min = 0.000000;
s.project_id.max = 255.000000;
s.project_id.gain = 1.000000;
s.project_id.offset = 0.000000;
s.project_id.exponent = 1.000000;
s.project_id.type = 'uint8';

s.project_id.value =  6.000000;
s.project_id.units = '';
s.project_id.help = 'This is the Platform ID used by the tools.';
s.project_id.format = '3.0';
s.project_id.group = 'System | System Config | Project Config';
s.project_id.storage = 'FLASH';
s.project_id.access = uint8(hex2dec('d5'));
s.project_id.min = 0.000000;
s.project_id.max = 255.000000;
s.project_id.gain = 1.000000;
s.project_id.offset = 0.000000;
s.project_id.exponent = 1.000000;
s.project_id.type = 'uint8';

s.CalIdTxt.value =  'BatteryController_Rev1_051_000';
s.CalIdTxt.units = '';
s.CalIdTxt.help = 'Calibration ID';
s.CalIdTxt.format = '';
s.CalIdTxt.group = 'System | Version';
s.CalIdTxt.storage = 'FLASH';
s.CalIdTxt.access = uint8(hex2dec('ff'));
s.CalIdTxt.min = -inf;
s.CalIdTxt.max =  inf;

s.FriendlyName.value =  'PCM';
s.FriendlyName.units = '';
s.FriendlyName.help = 'The device''s friendly name.';
s.FriendlyName.format = '';
s.FriendlyName.group = 'System | System Config';
s.FriendlyName.storage = 'FLASH';
s.FriendlyName.access = uint8(hex2dec('f5'));
s.FriendlyName.min = -inf;
s.FriendlyName.max =  inf;

s.PasswordTxt.value =  '';
s.PasswordTxt.units = '';
s.PasswordTxt.help = 'Password protection for this calibration';
s.PasswordTxt.format = '';
s.PasswordTxt.group = 'System | System Config';
s.PasswordTxt.storage = 'FLASH';
s.PasswordTxt.access = uint8(hex2dec('f5'));
s.PasswordTxt.min = -inf;
s.PasswordTxt.max =  inf;

s.SOC_TableIdxArr.value =  ...
[
	  385.950012 	  385.029999 	  384.109985 	  383.179993 	  382.260010 	  381.329987 	  380.399994 	  379.480011 	  378.549988 	  377.630005 	  376.700012 	  375.769989 	  374.850006 	  373.920013 	  373.000000 	  372.070007 	  371.144012 	  370.220001 	  369.291992 	  368.369995 	  367.440002 	  366.510010 	  365.589996 	  364.660004 	  363.739990 	  362.809998 	  361.880005 	  360.959991 	  360.029999 	  359.105988 	  358.179993 	  357.253998 	  356.329987 	  355.399994 	  354.470001 	  353.549988 	  352.619995 	  351.700012 	  350.769989 	  349.850006 	  349.000000 	  348.000000 	  347.000000 	  346.000000 	  345.000000 	  344.000000 	  343.000000 	  342.000000 	  341.000000 	  340.000000 	  339.000000 	  338.000000 	  337.000000 	  336.000000 	  335.000000 	  334.000000 	  333.000000 	  332.000000 	  331.000000 	  330.000000 	  329.000000 	  328.000000 	  327.000000 	  326.000000 	  325.000000 	  324.000000 	  323.000000 	  322.000000 	  321.000000 	  320.000000 	  319.000000 	  318.000000 	  317.000000 	  316.000000 	  315.000000 	  314.000000 	  313.000000 	  312.000000 	  311.000000 	  310.000000 	  309.000000 	  308.000000 	  307.000000 	  306.000000 	  305.000000 	  304.000000 	  303.000000 	  302.000000 	  301.000000 	  300.000000 	  299.000000 	  298.000000 	  297.000000 	  296.000000 	  295.000000 	  294.000000 	  293.000000 	  292.000000 	  291.000000 	  290.000000 	  289.000000 	  288.000000 	  287.000000 	  286.000000 	  285.000000 
];
s.SOC_TableIdxArr.units = '';
s.SOC_TableIdxArr.help = '';
s.SOC_TableIdxArr.format = '4.2';
s.SOC_TableIdxArr.group = 'BatteryController_Rev1|Foreground|Battery|Control|SOC';
s.SOC_TableIdxArr.storage = 'FLASH';
s.SOC_TableIdxArr.access = uint8(hex2dec('ff'));
s.SOC_TableIdxArr.min = -100000000000000000.000000;
s.SOC_TableIdxArr.max = 100000000000000000.000000;
s.SOC_TableIdxArr.gain = 1.000000;
s.SOC_TableIdxArr.offset = 0.000000;
s.SOC_TableIdxArr.exponent = 1.000000;
s.SOC_TableIdxArr.type = 'single';

s.SOCMapTbl.value =  ...
[
	  100.000000 	   99.699997 	   99.599998 	   99.400002 	   99.199997 	   99.000000 	   98.800003 	   98.599998 	   98.400002 	   98.199997 	   98.000000 	   97.699997 	   97.449997 	   97.199997 	   97.000000 	   96.589996 	   96.000000 	   95.800003 	   95.000000 	   94.000000 	   93.000000 	   92.000000 	   91.000000 	   90.000000 	   89.000000 	   87.000000 	   86.000000 	   85.000000 	   84.000000 	   83.000000 	   82.000000 	   81.000000 	   80.000000 	   79.000000 	   78.000000 	   77.000000 	   76.000000 	   75.000000 	   74.000000 	   73.000000 	   72.000000 	   71.000000 	   70.000000 	   69.000000 	   68.000000 	   67.000000 	   66.000000 	   65.000000 	   64.000000 	   63.000000 	   62.000000 	   61.000000 	   60.000000 	   59.000000 	   58.000000 	   57.000000 	   56.000000 	   55.000000 	   54.000000 	   53.000000 	   52.000000 	   51.000000 	   50.000000 	   48.000000 	   48.000000 	   47.000000 	   46.000000 	   45.000000 	   44.000000 	   43.000000 	   42.000000 	   41.000000 	   40.000000 	   39.000000 	   38.000000 	   37.000000 	   36.000000 	   35.000000 	   34.000000 	   33.000000 	   32.000000 	   31.000000 	   30.000000 	   29.000000 	   28.000000 	   27.000000 	   26.000000 	   25.000000 	   24.000000 	   23.000000 	   22.000000 	   21.000000 	   20.000000 	   19.000000 	   18.000000 	   17.000000 	   16.000000 	   14.000000 	   12.000000 	   10.000000 	    8.000000 	    6.000000 	    4.000000 	    2.000000 	    0.000000 
];
s.SOCMapTbl.units = '';
s.SOCMapTbl.help = '';
s.SOCMapTbl.format = '1.2';
s.SOCMapTbl.group = 'BatteryController_Rev1|Foreground|Battery|Control|SOC';
s.SOCMapTbl.storage = 'FLASH';
s.SOCMapTbl.access = uint8(hex2dec('ff'));
s.SOCMapTbl.min = 0.000000;
s.SOCMapTbl.max = 100.000000;
s.SOCMapTbl.gain = 1.000000;
s.SOCMapTbl.offset = 0.000000;
s.SOCMapTbl.exponent = 1.000000;
s.SOCMapTbl.type = 'single';

