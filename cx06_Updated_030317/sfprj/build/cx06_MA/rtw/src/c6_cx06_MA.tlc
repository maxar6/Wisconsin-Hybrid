%implements "chartSource" "C"
%function ChartConfig(block, system) void
  %createrecord chartConfiguration { ...
          executeAtInitialization  0 ...
  }
  %return chartConfiguration
%endfunction
%function ChartDefines(block,system) void
   %openfile chartConstBuf
   %closefile chartConstBuf
   %return chartConstBuf
%endfunction %% ChartDefines
%function ChartFunctions(block,system) void
   %openfile chartFcnsBuf
     
            
            
            
   %closefile chartFcnsBuf
   %return chartFcnsBuf
%endfunction %% ChartFunctions
%function ChartFunctionProtos(block,system,oFile) void
   %openfile prototypesBuf
   %closefile prototypesBuf
   %<SLibSetModelFileAttribute(oFile,"FcnPrototypes",prototypesBuf)>
%endfunction %% ChartFunctionProtos
%function ChartSharedFunctions(block,system) void
   %openfile chartFcnsBuf
   %closefile chartFcnsBuf
   %return chartFcnsBuf
%endfunction %% ChartSharedFunctions
%function Outputs(block,system) void
   %openfile codeBuf
      if(%<LibSFInputs(block, 3, 0)> == 1) {
/* %<" This block supports an embeddable subset of the MATLAB language."> */
/* %<" See the help menu for details. "> */
/* %<"reverse assist possible implementation"> */
/* %<"if(braking == 1)"> */
/* %<"    state = 2;\%regen"> */
/* %<"elseif((neutral == 1) && (clutching == 0))"> */
/* %<"    state = 4;\%ZEV"> */
/* %<"elseif((clutching == 1) && (sport_mode == 0))"> */
/* %<"    state = 1;\%diesel"> */
/* %<"else"> */
/* %<"    state = 3;\%HEV"> */
/* %<"end"> */
/* %<"note: don\'t care about reverse (reverse is effectively any other gear)"> */
/* %<"sport mode (5/22/2007)"> */
%<LibSFAssignOutput(block, 1, "0", "2.0")>
/* %<"regen"> */
} else if(%<LibSFInputs(block, 2, 0)> == 1) {
%<LibSFAssignOutput(block, 1, "0", "1.0")>
/* %<"diesel"> */
} else if((%<LibSFInputs(block, 1, 0)> == 1) && (%<LibSFInputs(block, 4, 0)> == 0)) {
%<LibSFAssignOutput(block, 1, "0", "4.0")>
/* %<"ZEV"> */
} else if((%<LibSFInputs(block, 4, 0)> == 1) && (%<LibSFInputs(block, 0, 0)> == 0)) {
%<LibSFAssignOutput(block, 1, "0", "1.0")>
/* %<"diesel"> */
} else {
%<LibSFAssignOutput(block, 1, "0", "3.0")>
/* %<"HEV"> */
}
   %closefile codeBuf
   %return codeBuf
%endfunction  %% Outputs
%function InlinedInitializerCode(block,system) Output
   %<SLibResetSFChartInstanceAccessed(block)>\
   %openfile initBodyBuf
      
   %closefile initBodyBuf
   %if !WHITE_SPACE(initBodyBuf)
      /* Initialize code for chart: '%<LibGetBlockName(block)>' */
      %<initBodyBuf>\
   %endif
%endfunction


%function EnableUnboundOutputEventsCode(block,system) Output
   %openfile initBodyBuf
      
   %closefile initBodyBuf
   %if !WHITE_SPACE(initBodyBuf)
      /* Enable code for chart: '%<LibGetBlockName(block)>' */
      %<initBodyBuf>\
   %endif
%endfunction

%function DisableUnboundOutputEventsCode(block,system) Output
   %openfile initBodyBuf
      
   %closefile initBodyBuf
   %if !WHITE_SPACE(initBodyBuf)
      /* Disable code for chart: '%<LibGetBlockName(block)>' */
      %<initBodyBuf>\
   %endif
%endfunction

%function DumpSharedUtils(block,system) void
%endfunction

%function ChartDataMap(block, system) void
  %createrecord ChartDataElements {\
    UnifiedDWork   0\
    NumChartData   0 \
    ChartDataDefaults {\
      RecordType   "ChartData"\
      DataTypeIdx  0\
      IsComplex    0\
      IsFixPoint   0\
      With         1\
      Dimensions   []\
    }\
  }
  %return ChartDataElements
%endfunction
