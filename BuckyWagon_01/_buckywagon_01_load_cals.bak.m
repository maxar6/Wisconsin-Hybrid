function result = BuckyWagon_01_load_cals()

assignin('base', 'BuckyWagon_01_cals', module_calibrations);

function s = module_calibrations()
%%MODULE_CALIBRATIONS -- Retrieved values of MotoHawk calibrations

%%MotoHawk Get Calibrations
%%Usage:
%%motohawk_getcals [--no-flash] [--no-ram] [--no-ee] [--no-code] [--port=portname]
%%  --no-flash = don't get flash values
%%  --no-ram = don't get ram values
%%  --no-ee = don't get eeprom values
%%  --no-code = don't get code values
%%  --port=portname connect to module on MotoServer port portname

s=struct;

%C:\PROGRA~2\Woodward\MCS\MotoHawk\2011A_~1.184\Bin\motohawk_getcals.exe --no-ram --no-code 

%Opening session...
%Session Opened...
%Connecting online to get table revisions and softwareID.
%Connected OK.
%Getting Table revisions
%Got 8 Table revisions...
%TableRevision[0] = 9
%TableRevision[1] = 1
%TableRevision[2] = 1
%TableRevision[3] = 1
%TableRevision[4] = 1
%TableRevision[5] = 1
%TableRevision[6] = 1
%TableRevision[7] = 1
%Getting Software ID
%Got software ID of - BuckyWago_074
%Getting Project ID
%Got project ID of - 6
%Opening Database...
%Database Opened...
%Opening dll...
s.project_id.value =  6.000000;
s.project_id.units = '';
s.project_id.help = 'This is the Platform ID used by the tools.';
s.project_id.format = '3.0';
s.project_id.group = 'System | System Config | Project Config';
s.project_id.storage = 'FLASH';
s.project_id.access = uint8(hex2dec('d5'));
s.project_id.min = 0.000000;
s.project_id.max = 255.000000;
s.project_id.gain = 1.000000;
s.project_id.offset = 0.000000;
s.project_id.exponent = 1.000000;
s.project_id.type = 'uint8';

s.project_id.value =  6.000000;
s.project_id.units = '';
s.project_id.help = 'This is the Platform ID used by the tools.';
s.project_id.format = '3.0';
s.project_id.group = 'System | System Config | Project Config';
s.project_id.storage = 'FLASH';
s.project_id.access = uint8(hex2dec('d5'));
s.project_id.min = 0.000000;
s.project_id.max = 255.000000;
s.project_id.gain = 1.000000;
s.project_id.offset = 0.000000;
s.project_id.exponent = 1.000000;
s.project_id.type = 'uint8';

s.project_id.value =  6.000000;
s.project_id.units = '';
s.project_id.help = 'This is the Platform ID used by the tools.';
s.project_id.format = '3.0';
s.project_id.group = 'System | System Config | Project Config';
s.project_id.storage = 'FLASH';
s.project_id.access = uint8(hex2dec('d5'));
s.project_id.min = 0.000000;
s.project_id.max = 255.000000;
s.project_id.gain = 1.000000;
s.project_id.offset = 0.000000;
s.project_id.exponent = 1.000000;
s.project_id.type = 'uint8';

s.project_id.value =  6.000000;
s.project_id.units = '';
s.project_id.help = 'This is the Platform ID used by the tools.';
s.project_id.format = '3.0';
s.project_id.group = 'System | System Config | Project Config';
s.project_id.storage = 'FLASH';
s.project_id.access = uint8(hex2dec('d5'));
s.project_id.min = 0.000000;
s.project_id.max = 255.000000;
s.project_id.gain = 1.000000;
s.project_id.offset = 0.000000;
s.project_id.exponent = 1.000000;
s.project_id.type = 'uint8';

s.project_id.value =  6.000000;
s.project_id.units = '';
s.project_id.help = 'This is the Platform ID used by the tools.';
s.project_id.format = '3.0';
s.project_id.group = 'System | System Config | Project Config';
s.project_id.storage = 'FLASH';
s.project_id.access = uint8(hex2dec('d5'));
s.project_id.min = 0.000000;
s.project_id.max = 255.000000;
s.project_id.gain = 1.000000;
s.project_id.offset = 0.000000;
s.project_id.exponent = 1.000000;
s.project_id.type = 'uint8';

s.project_id.value =  6.000000;
s.project_id.units = '';
s.project_id.help = 'This is the Platform ID used by the tools.';
s.project_id.format = '3.0';
s.project_id.group = 'System | System Config | Project Config';
s.project_id.storage = 'FLASH';
s.project_id.access = uint8(hex2dec('d5'));
s.project_id.min = 0.000000;
s.project_id.max = 255.000000;
s.project_id.gain = 1.000000;
s.project_id.offset = 0.000000;
s.project_id.exponent = 1.000000;
s.project_id.type = 'uint8';

s.project_id.value =  6.000000;
s.project_id.units = '';
s.project_id.help = 'This is the Platform ID used by the tools.';
s.project_id.format = '3.0';
s.project_id.group = 'System | System Config | Project Config';
s.project_id.storage = 'FLASH';
s.project_id.access = uint8(hex2dec('d5'));
s.project_id.min = 0.000000;
s.project_id.max = 255.000000;
s.project_id.gain = 1.000000;
s.project_id.offset = 0.000000;
s.project_id.exponent = 1.000000;
s.project_id.type = 'uint8';

s.project_id.value =  6.000000;
s.project_id.units = '';
s.project_id.help = 'This is the Platform ID used by the tools.';
s.project_id.format = '3.0';
s.project_id.group = 'System | System Config | Project Config';
s.project_id.storage = 'FLASH';
s.project_id.access = uint8(hex2dec('d5'));
s.project_id.min = 0.000000;
s.project_id.max = 255.000000;
s.project_id.gain = 1.000000;
s.project_id.offset = 0.000000;
s.project_id.exponent = 1.000000;
s.project_id.type = 'uint8';

s.project_id.value =  6.000000;
s.project_id.units = '';
s.project_id.help = 'This is the Platform ID used by the tools.';
s.project_id.format = '3.0';
s.project_id.group = 'System | System Config | Project Config';
s.project_id.storage = 'FLASH';
s.project_id.access = uint8(hex2dec('d5'));
s.project_id.min = 0.000000;
s.project_id.max = 255.000000;
s.project_id.gain = 1.000000;
s.project_id.offset = 0.000000;
s.project_id.exponent = 1.000000;
s.project_id.type = 'uint8';

s.project_id.value =  6.000000;
s.project_id.units = '';
s.project_id.help = 'This is the Platform ID used by the tools.';
s.project_id.format = '3.0';
s.project_id.group = 'System | System Config | Project Config';
s.project_id.storage = 'FLASH';
s.project_id.access = uint8(hex2dec('d5'));
s.project_id.min = 0.000000;
s.project_id.max = 255.000000;
s.project_id.gain = 1.000000;
s.project_id.offset = 0.000000;
s.project_id.exponent = 1.000000;
s.project_id.type = 'uint8';

s.project_id.value =  6.000000;
s.project_id.units = '';
s.project_id.help = 'This is the Platform ID used by the tools.';
s.project_id.format = '3.0';
s.project_id.group = 'System | System Config | Project Config';
s.project_id.storage = 'FLASH';
s.project_id.access = uint8(hex2dec('d5'));
s.project_id.min = 0.000000;
s.project_id.max = 255.000000;
s.project_id.gain = 1.000000;
s.project_id.offset = 0.000000;
s.project_id.exponent = 1.000000;
s.project_id.type = 'uint8';

s.ProductID.value =  1.000000;
s.ProductID.units = 'ID';
s.ProductID.help = 'Customer''s ID used by the tools.';
s.ProductID.format = '4.2';
s.ProductID.group = 'System | System Config | Project Config';
s.ProductID.storage = 'FLASH';
s.ProductID.access = uint8(hex2dec('d5'));
s.ProductID.min = 0.000000;
s.ProductID.max = 4294967295.000000;
s.ProductID.gain = 1.000000;
s.ProductID.offset = 0.000000;
s.ProductID.exponent = 1.000000;
s.ProductID.type = 'uint32';

s.Accel_DfltValue.value =  0.000000;
s.Accel_DfltValue.units = '%';
s.Accel_DfltValue.help = 'This is the initial default value should the sensor be in fault on key-up.  Otherwise the sensors outputs the last value prior to faulting';
s.Accel_DfltValue.format = '4.2';
s.Accel_DfltValue.group = 'Sensors | Accel | Accel_Pedal | Accel_Pedal Config';
s.Accel_DfltValue.storage = 'FLASH';
s.Accel_DfltValue.access = uint8(hex2dec('ff'));
s.Accel_DfltValue.min = -100000000000000000.000000;
s.Accel_DfltValue.max = 100000000000000000.000000;
s.Accel_DfltValue.gain = 1.000000;
s.Accel_DfltValue.offset = 0.000000;
s.Accel_DfltValue.exponent = 1.000000;
s.Accel_DfltValue.type = 'single';

s.Accel_FilterConst.value =  0.010000;
s.Accel_FilterConst.units = 'sec';
s.Accel_FilterConst.help = 'Filter time constant';
s.Accel_FilterConst.format = '4.2';
s.Accel_FilterConst.group = 'Sensors | Accel | Accel_Pedal | Accel_Pedal Config';
s.Accel_FilterConst.storage = 'FLASH';
s.Accel_FilterConst.access = uint8(hex2dec('ff'));
s.Accel_FilterConst.min = -100000000000000000.000000;
s.Accel_FilterConst.max = 100000000000000000.000000;
s.Accel_FilterConst.gain = 1.000000;
s.Accel_FilterConst.offset = 0.000000;
s.Accel_FilterConst.exponent = 1.000000;
s.Accel_FilterConst.type = 'single';

s.Accel_Full.value =  900.000000;
s.Accel_Full.units = '%';
s.Accel_Full.help = 'Offset after gain in engineering units';
s.Accel_Full.format = '4.2';
s.Accel_Full.group = 'Sensors | Accel | Accel_Pedal | Accel_Pedal Config';
s.Accel_Full.storage = 'FLASH';
s.Accel_Full.access = uint8(hex2dec('ff'));
s.Accel_Full.min = -100000000000000000.000000;
s.Accel_Full.max = 100000000000000000.000000;
s.Accel_Full.gain = 1.000000;
s.Accel_Full.offset = 0.000000;
s.Accel_Full.exponent = 1.000000;
s.Accel_Full.type = 'single';

s.Accel_InputHiFltPos.value =  1000.000000;
s.Accel_InputHiFltPos.units = 'ADC';
s.Accel_InputHiFltPos.help = 'Maximum allowable input, indicating short or open circuit';
s.Accel_InputHiFltPos.format = '4.2';
s.Accel_InputHiFltPos.group = 'Sensors | Accel | Accel_Pedal | Accel_Pedal Config';
s.Accel_InputHiFltPos.storage = 'FLASH';
s.Accel_InputHiFltPos.access = uint8(hex2dec('ff'));
s.Accel_InputHiFltPos.min = -100000000000000000.000000;
s.Accel_InputHiFltPos.max = 100000000000000000.000000;
s.Accel_InputHiFltPos.gain = 1.000000;
s.Accel_InputHiFltPos.offset = 0.000000;
s.Accel_InputHiFltPos.exponent = 1.000000;
s.Accel_InputHiFltPos.type = 'single';

s.Accel_InputLoFltPos.value =  200.000000;
s.Accel_InputLoFltPos.units = 'ADC';
s.Accel_InputLoFltPos.help = 'Minimum allowable input, indicating short or open circuit';
s.Accel_InputLoFltPos.format = '4.2';
s.Accel_InputLoFltPos.group = 'Sensors | Accel | Accel_Pedal | Accel_Pedal Config';
s.Accel_InputLoFltPos.storage = 'FLASH';
s.Accel_InputLoFltPos.access = uint8(hex2dec('ff'));
s.Accel_InputLoFltPos.min = -100000000000000000.000000;
s.Accel_InputLoFltPos.max = 100000000000000000.000000;
s.Accel_InputLoFltPos.gain = 1.000000;
s.Accel_InputLoFltPos.offset = 0.000000;
s.Accel_InputLoFltPos.exponent = 1.000000;
s.Accel_InputLoFltPos.type = 'single';

s.Accel_Pedal_Pin.value =  70.000000;
s.Accel_Pedal_Pin.units = '';
s.Accel_Pedal_Pin.help = 'Analog input pin selection for Accel_Pedal_Pin';
s.Accel_Pedal_Pin.format = '5.0';
s.Accel_Pedal_Pin.group = 'System | I/O Pins | Inputs Config';
s.Accel_Pedal_Pin.storage = 'FLASH';
s.Accel_Pedal_Pin.access = uint8(hex2dec('ff'));
s.Accel_Pedal_Pin.min = -32768.000000;
s.Accel_Pedal_Pin.max = 32767.000000;
s.Accel_Pedal_Pin.gain = 1.000000;
s.Accel_Pedal_Pin.offset = 0.000000;
s.Accel_Pedal_Pin.exponent = 1.000000;
s.Accel_Pedal_Pin.type = 'int16';
s.Accel_Pedal_Pin.enumeration = struct('name',{'(None)','ECUP','DRVP','XDRP','AN1M','AN2M','AN3M','AN4M','AN5M','AN6M','AN7M','AN8M','AN9M','AN10M','AN11M','AN12M','AN13M','AN14M','AN15M','AN16M','AN17M','AN18M','AN19M','AN20M','AN21M','AN22M','AN23M','AN24M','AN25M','AN26M','AN27M','AN28M','AN29M','AN30M','AN31M','AN32M','AN33M','AN34M','O2A','O2B','XDRP_B','REF_14V'},'value',{-1,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,143});

s.Accel_Pedal_Pin_ref.value =  0.000000;
s.Accel_Pedal_Pin_ref.units = '';
s.Accel_Pedal_Pin_ref.help = 'Reference Voltage Selection';
s.Accel_Pedal_Pin_ref.format = '3.0';
s.Accel_Pedal_Pin_ref.group = 'System | I/O Pins | Inputs Config';
s.Accel_Pedal_Pin_ref.storage = 'FLASH';
s.Accel_Pedal_Pin_ref.access = uint8(hex2dec('ff'));
s.Accel_Pedal_Pin_ref.min = 0.000000;
s.Accel_Pedal_Pin_ref.max = 255.000000;
s.Accel_Pedal_Pin_ref.gain = 1.000000;
s.Accel_Pedal_Pin_ref.offset = 0.000000;
s.Accel_Pedal_Pin_ref.exponent = 1.000000;
s.Accel_Pedal_Pin_ref.type = 'uint8';
s.Accel_Pedal_Pin_ref.enumeration = struct('name',{'5V','2.7V'},'value',{0,1});

s.Accel_Zero.value =  300.000000;
s.Accel_Zero.units = '%/ADC';
s.Accel_Zero.help = 'Scaling from A/D counts to engineering units';
s.Accel_Zero.format = '5.4';
s.Accel_Zero.group = 'Sensors | Accel | Accel_Pedal | Accel_Pedal Config';
s.Accel_Zero.storage = 'FLASH';
s.Accel_Zero.access = uint8(hex2dec('ff'));
s.Accel_Zero.min = -100000000000000000.000000;
s.Accel_Zero.max = 100000000000000000.000000;
s.Accel_Zero.gain = 1.000000;
s.Accel_Zero.offset = 0.000000;
s.Accel_Zero.exponent = 1.000000;
s.Accel_Zero.type = 'single';

s.AccelRstSpd.value =  2.000000;
s.AccelRstSpd.units = 'Rate at which fault is cleared when accel is below%';
s.AccelRstSpd.help = '%';
s.AccelRstSpd.format = '4.2';
s.AccelRstSpd.group = 'BuckyWagon_01|Strategy|Control Strategy|Assist|StallTorqueFault';
s.AccelRstSpd.storage = 'FLASH';
s.AccelRstSpd.access = uint8(hex2dec('ff'));
s.AccelRstSpd.min = -100000000000000000.000000;
s.AccelRstSpd.max = 100000000000000000.000000;
s.AccelRstSpd.gain = 1.000000;
s.AccelRstSpd.offset = 0.000000;
s.AccelRstSpd.exponent = 1.000000;
s.AccelRstSpd.type = 'single';

s.AccelRstThres.value =  0.050000;
s.AccelRstThres.units = '%';
s.AccelRstThres.help = 'Below this accel position fault can reset.';
s.AccelRstThres.format = '1.2';
s.AccelRstThres.group = 'BuckyWagon_01|Strategy|Control Strategy|Assist|StallTorqueFault';
s.AccelRstThres.storage = 'FLASH';
s.AccelRstThres.access = uint8(hex2dec('ff'));
s.AccelRstThres.min = 0.000000;
s.AccelRstThres.max = 1.000000;
s.AccelRstThres.gain = 1.000000;
s.AccelRstThres.offset = 0.000000;
s.AccelRstThres.exponent = 1.000000;
s.AccelRstThres.type = 'single';

s.ApplicationMonitorEnable.value =  0.000000;
s.ApplicationMonitorEnable.units = '';
s.ApplicationMonitorEnable.help = 'Enables runtime checking of stack, heap, CPU, and OS errors.  Stops the application on error.';
s.ApplicationMonitorEnable.format = '3.0';
s.ApplicationMonitorEnable.group = 'System | Debug | Application Monitor Config';
s.ApplicationMonitorEnable.storage = 'FLASH';
s.ApplicationMonitorEnable.access = uint8(hex2dec('f5'));
s.ApplicationMonitorEnable.min = 0.000000;
s.ApplicationMonitorEnable.max = 1.000000;
s.ApplicationMonitorEnable.gain = 1.000000;
s.ApplicationMonitorEnable.offset = 0.000000;
s.ApplicationMonitorEnable.exponent = 1.000000;
s.ApplicationMonitorEnable.type = 'uint8';
s.ApplicationMonitorEnable.enumeration = struct('name',{'Disabled','Enabled'},'value',{0,1});

s.ApplicationPausePoint.value =  3.000000;
s.ApplicationPausePoint.units = '';
s.ApplicationPausePoint.help = 'Selects the startup pause point, for debugging.  Can be moved forward to step through the initialization';
s.ApplicationPausePoint.format = '3.0';
s.ApplicationPausePoint.group = 'System | Debug | Application Monitor Config';
s.ApplicationPausePoint.storage = 'FLASH';
s.ApplicationPausePoint.access = uint8(hex2dec('f5'));
s.ApplicationPausePoint.min = 0.000000;
s.ApplicationPausePoint.max = 3.000000;
s.ApplicationPausePoint.gain = 1.000000;
s.ApplicationPausePoint.offset = 0.000000;
s.ApplicationPausePoint.exponent = 1.000000;
s.ApplicationPausePoint.type = 'uint8';
s.ApplicationPausePoint.enumeration = struct('name',{'Before Model Initialize','After Model Init - Before STARTUP Event','After STARTUP Event - Before Run','Run'},'value',{0,1,2,3});

s.Batt_Empty_V.value =  315.000000;
s.Batt_Empty_V.units = 'V';
s.Batt_Empty_V.help = '0% SOC Voltage';
s.Batt_Empty_V.format = '3.1';
s.Batt_Empty_V.group = 'BuckyWagon_01|Strategy|Virtual Sensors|Batt SOC';
s.Batt_Empty_V.storage = 'FLASH';
s.Batt_Empty_V.access = uint8(hex2dec('ff'));
s.Batt_Empty_V.min = -100000000000000000.000000;
s.Batt_Empty_V.max = 100000000000000000.000000;
s.Batt_Empty_V.gain = 1.000000;
s.Batt_Empty_V.offset = 0.000000;
s.Batt_Empty_V.exponent = 1.000000;
s.Batt_Empty_V.type = 'single';

s.Batt_Full_V.value =  370.000000;
s.Batt_Full_V.units = 'V';
s.Batt_Full_V.help = '100% SOC Voltage';
s.Batt_Full_V.format = '3.1';
s.Batt_Full_V.group = 'BuckyWagon_01|Strategy|Virtual Sensors|Batt SOC';
s.Batt_Full_V.storage = 'FLASH';
s.Batt_Full_V.access = uint8(hex2dec('ff'));
s.Batt_Full_V.min = -100000000000000000.000000;
s.Batt_Full_V.max = 100000000000000000.000000;
s.Batt_Full_V.gain = 1.000000;
s.Batt_Full_V.offset = 0.000000;
s.Batt_Full_V.exponent = 1.000000;
s.Batt_Full_V.type = 'single';

s.Batt_Pol_TC.value =  25.000000;
s.Batt_Pol_TC.units = 's';
s.Batt_Pol_TC.help = 'Battery Polarization curent TC.';
s.Batt_Pol_TC.format = '1.3';
s.Batt_Pol_TC.group = 'BuckyWagon_01|Strategy|Virtual Sensors|Batt SOC';
s.Batt_Pol_TC.storage = 'FLASH';
s.Batt_Pol_TC.access = uint8(hex2dec('ff'));
s.Batt_Pol_TC.min = -500000000000000.000000;
s.Batt_Pol_TC.max = 500000000000000.000000;
s.Batt_Pol_TC.gain = 0.005000;
s.Batt_Pol_TC.offset = 0.000000;
s.Batt_Pol_TC.exponent = 1.000000;
s.Batt_Pol_TC.type = 'single';

s.Batt_TempRamp_Start.value =  -40.000000;
s.Batt_TempRamp_Start.units = 'rpm';
s.Batt_TempRamp_Start.help = 'Assist starts ramping out below this speed';
s.Batt_TempRamp_Start.format = '4.2';
s.Batt_TempRamp_Start.group = 'BuckyWagon_01|Strategy|Control Strategy|Batt Temp RampOut';
s.Batt_TempRamp_Start.storage = 'FLASH';
s.Batt_TempRamp_Start.access = uint8(hex2dec('ff'));
s.Batt_TempRamp_Start.min = -100000000000000000.000000;
s.Batt_TempRamp_Start.max = 100000000000000000.000000;
s.Batt_TempRamp_Start.gain = 1.000000;
s.Batt_TempRamp_Start.offset = 0.000000;
s.Batt_TempRamp_Start.exponent = 1.000000;
s.Batt_TempRamp_Start.type = 'single';

s.Batt_TempRamp_Stop.value =  -40.000000;
s.Batt_TempRamp_Stop.units = 'rpm';
s.Batt_TempRamp_Stop.help = 'No Assist below this speed';
s.Batt_TempRamp_Stop.format = '4.2';
s.Batt_TempRamp_Stop.group = 'BuckyWagon_01|Strategy|Control Strategy|Batt Temp RampOut';
s.Batt_TempRamp_Stop.storage = 'FLASH';
s.Batt_TempRamp_Stop.access = uint8(hex2dec('ff'));
s.Batt_TempRamp_Stop.min = -100000000000000000.000000;
s.Batt_TempRamp_Stop.max = 100000000000000000.000000;
s.Batt_TempRamp_Stop.gain = 1.000000;
s.Batt_TempRamp_Stop.offset = 0.000000;
s.Batt_TempRamp_Stop.exponent = 1.000000;
s.Batt_TempRamp_Stop.type = 'single';

s.BatteryTempFault_Pin.value =  -1.000000;
s.BatteryTempFault_Pin.units = '';
s.BatteryTempFault_Pin.help = 'Digital input pin selection for BatteryTempFault_Pin';
s.BatteryTempFault_Pin.format = '5.0';
s.BatteryTempFault_Pin.group = 'System | I/O Pins | Inputs Config';
s.BatteryTempFault_Pin.storage = 'FLASH';
s.BatteryTempFault_Pin.access = uint8(hex2dec('ff'));
s.BatteryTempFault_Pin.min = -32768.000000;
s.BatteryTempFault_Pin.max = 32767.000000;
s.BatteryTempFault_Pin.gain = 1.000000;
s.BatteryTempFault_Pin.offset = 0.000000;
s.BatteryTempFault_Pin.exponent = 1.000000;
s.BatteryTempFault_Pin.type = 'int16';
s.BatteryTempFault_Pin.enumeration = struct('name',{'(None)','AN1M','AN2M','AN3M','AN4M','AN5M','AN6M','AN7M','AN8M','AN9M','AN10M','AN11M','AN12M','AN13M','AN14M','AN15M','AN16M','AN17M','AN18M','AN19M','AN20M','AN21M','AN22M','AN23M','AN24M','AN25M','AN26M','AN27M','AN28M','AN29M','AN30M','AN31M','AN32M','AN33M','AN34M','O2A','O2B','DG1M','DG2M','DG3M','DG4M','DG5M','DG6M','DG7M','SPD1','SPD2','DG8M'},'value',{-1,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,94,95,96,102,103,104,105,106,111});

s.BatteryTempFlt_Polarity.value =  1.000000;
s.BatteryTempFlt_Polarity.units = 'bool';
s.BatteryTempFlt_Polarity.help = '0 = High True    1 = Low True';
s.BatteryTempFlt_Polarity.format = '1.0';
s.BatteryTempFlt_Polarity.group = 'Sensors | BatteryTempFault | BatteryTempFault Config';
s.BatteryTempFlt_Polarity.storage = 'FLASH';
s.BatteryTempFlt_Polarity.access = uint8(hex2dec('ff'));
s.BatteryTempFlt_Polarity.min = 0.000000;
s.BatteryTempFlt_Polarity.max = 1.000000;
s.BatteryTempFlt_Polarity.gain = 1.000000;
s.BatteryTempFlt_Polarity.offset = 0.000000;
s.BatteryTempFlt_Polarity.exponent = 1.000000;
s.BatteryTempFlt_Polarity.type = 'uint8';

s.BattInd__Polarity.value =  0.000000;
s.BattInd__Polarity.units = 'bool';
s.BattInd__Polarity.help = 'Inverts the output of the actuator relative to the desired command - 0 = High True    1 = Low True';
s.BattInd__Polarity.format = '1.0';
s.BattInd__Polarity.group = 'Actuators | BattInd | BattInd | BattInd Config';
s.BattInd__Polarity.storage = 'FLASH';
s.BattInd__Polarity.access = uint8(hex2dec('ff'));
s.BattInd__Polarity.min = 0.000000;
s.BattInd__Polarity.max = 1.000000;
s.BattInd__Polarity.gain = 1.000000;
s.BattInd__Polarity.offset = 0.000000;
s.BattInd__Polarity.exponent = 1.000000;
s.BattInd__Polarity.type = 'uint8';

s.BattInd_Pin.value =  -1.000000;
s.BattInd_Pin.units = '';
s.BattInd_Pin.help = 'Digital output pin selection for DOut782p0001';
s.BattInd_Pin.format = '5.0';
s.BattInd_Pin.group = 'System | I/O Pins | Outputs Config';
s.BattInd_Pin.storage = 'FLASH';
s.BattInd_Pin.access = uint8(hex2dec('ff'));
s.BattInd_Pin.min = -32768.000000;
s.BattInd_Pin.max = 32767.000000;
s.BattInd_Pin.gain = 1.000000;
s.BattInd_Pin.offset = 0.000000;
s.BattInd_Pin.exponent = 1.000000;
s.BattInd_Pin.type = 'int16';
s.BattInd_Pin.enumeration = struct('name',{'(None)','FINJ1','FINJ2','FINJ3','FINJ4','FINJ5','FINJ6','FINJ7','FINJ8','FINJ9','FINJ10','FINJ11','FINJ12','TACH','LSD1','LSD2','LSD3','LSD4','LSD5','LSD6','LSD7','LSD8','LSD9','LSD10','EST 1','EST 2','EST 3','EST 4','EST 5','EST 6','EST 7','EST 8','EST 9','EST 10','EST 11','EST 12','EST 13','EST 14','EST 15','EST 16','MPRD'},'value',{-1,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52});

s.BattIndFlash_Period.value =  0.500000;
s.BattIndFlash_Period.units = 's';
s.BattIndFlash_Period.help = 'Period for the flashing check engine indicator.';
s.BattIndFlash_Period.format = '1.3';
s.BattIndFlash_Period.group = 'BuckyWagon_01|Strategy|Actuators|BattIndicator';
s.BattIndFlash_Period.storage = 'FLASH';
s.BattIndFlash_Period.access = uint8(hex2dec('ff'));
s.BattIndFlash_Period.min = 0.000000;
s.BattIndFlash_Period.max = 100.000000;
s.BattIndFlash_Period.gain = 0.005000;
s.BattIndFlash_Period.offset = 0.000000;
s.BattIndFlash_Period.exponent = 1.000000;
s.BattIndFlash_Period.type = 'int16';

s.BattOverTemp_Pt.value =  70.000000;
s.BattOverTemp_Pt.units = 'C';
s.BattOverTemp_Pt.help = 'Temperature at which an overtemp fault occurs';
s.BattOverTemp_Pt.format = '4.2';
s.BattOverTemp_Pt.group = 'Sensors | Brusa';
s.BattOverTemp_Pt.storage = 'FLASH';
s.BattOverTemp_Pt.access = uint8(hex2dec('ff'));
s.BattOverTemp_Pt.min = -100000000000000000.000000;
s.BattOverTemp_Pt.max = 100000000000000000.000000;
s.BattOverTemp_Pt.gain = 1.000000;
s.BattOverTemp_Pt.offset = 0.000000;
s.BattOverTemp_Pt.exponent = 1.000000;
s.BattOverTemp_Pt.type = 'single';

s.BattUnderTemp_Pt.value =  -40.000000;
s.BattUnderTemp_Pt.units = 'C';
s.BattUnderTemp_Pt.help = 'Temperature at which an overtemp fault occurs';
s.BattUnderTemp_Pt.format = '4.2';
s.BattUnderTemp_Pt.group = 'Sensors | Brusa';
s.BattUnderTemp_Pt.storage = 'FLASH';
s.BattUnderTemp_Pt.access = uint8(hex2dec('ff'));
s.BattUnderTemp_Pt.min = -100000000000000000.000000;
s.BattUnderTemp_Pt.max = 100000000000000000.000000;
s.BattUnderTemp_Pt.gain = 1.000000;
s.BattUnderTemp_Pt.offset = 0.000000;
s.BattUnderTemp_Pt.exponent = 1.000000;
s.BattUnderTemp_Pt.type = 'single';

s.BattV_TC.value =  10.000000;
s.BattV_TC.units = 's';
s.BattV_TC.help = 'Filter on Batt OCV Time Constant.';
s.BattV_TC.format = '1.5';
s.BattV_TC.group = 'BuckyWagon_01|Strategy|Virtual Sensors|Batt SOC';
s.BattV_TC.storage = 'FLASH';
s.BattV_TC.access = uint8(hex2dec('ff'));
s.BattV_TC.min = 0.005000;
s.BattV_TC.max = 500000000000000.000000;
s.BattV_TC.gain = 0.005000;
s.BattV_TC.offset = 0.000000;
s.BattV_TC.exponent = 1.000000;
s.BattV_TC.type = 'single';

s.BattVFilt_PreLThres.value =  150.000000;
s.BattVFilt_PreLThres.units = 'V';
s.BattVFilt_PreLThres.help = 'Below this voltage the filter will preload.';
s.BattVFilt_PreLThres.format = '4.2';
s.BattVFilt_PreLThres.group = 'BuckyWagon_01|Strategy|Virtual Sensors|Batt SOC';
s.BattVFilt_PreLThres.storage = 'FLASH';
s.BattVFilt_PreLThres.access = uint8(hex2dec('ff'));
s.BattVFilt_PreLThres.min = -100000000000000000.000000;
s.BattVFilt_PreLThres.max = 100000000000000000.000000;
s.BattVFilt_PreLThres.gain = 1.000000;
s.BattVFilt_PreLThres.offset = 0.000000;
s.BattVFilt_PreLThres.exponent = 1.000000;
s.BattVFilt_PreLThres.type = 'single';

s.BattVFilt_PreLTime.value =  0.250000;
s.BattVFilt_PreLTime.units = 's';
s.BattVFilt_PreLTime.help = 'Filter will preload this long after the threshold is met.';
s.BattVFilt_PreLTime.format = '1.3';
s.BattVFilt_PreLTime.group = 'BuckyWagon_01|Strategy|Virtual Sensors|Batt SOC';
s.BattVFilt_PreLTime.storage = 'FLASH';
s.BattVFilt_PreLTime.access = uint8(hex2dec('ff'));
s.BattVFilt_PreLTime.min = -500000000000000.000000;
s.BattVFilt_PreLTime.max = 500000000000000.000000;
s.BattVFilt_PreLTime.gain = 0.005000;
s.BattVFilt_PreLTime.offset = 0.000000;
s.BattVFilt_PreLTime.exponent = 1.000000;
s.BattVFilt_PreLTime.type = 'single';

s.BgndStackMargin.value =  256.000000;
s.BgndStackMargin.units = '';
s.BgndStackMargin.help = 'When the available stack space drops below this threshold, the application performs a safety stop';
s.BgndStackMargin.format = '5.0';
s.BgndStackMargin.group = 'System | Debug | Application Monitor Config';
s.BgndStackMargin.storage = 'FLASH';
s.BgndStackMargin.access = uint8(hex2dec('f5'));
s.BgndStackMargin.min = 0.000000;
s.BgndStackMargin.max = 2048.000000;
s.BgndStackMargin.gain = 1.000000;
s.BgndStackMargin.offset = 0.000000;
s.BgndStackMargin.exponent = 1.000000;
s.BgndStackMargin.type = 'uint16';

s.Brake_Polarity.value =  1.000000;
s.Brake_Polarity.units = 'bool';
s.Brake_Polarity.help = '0 = High True    1 = Low True';
s.Brake_Polarity.format = '1.0';
s.Brake_Polarity.group = 'Sensors | Brake | Brake_Switch | Brake_Switch Config';
s.Brake_Polarity.storage = 'FLASH';
s.Brake_Polarity.access = uint8(hex2dec('ff'));
s.Brake_Polarity.min = 0.000000;
s.Brake_Polarity.max = 1.000000;
s.Brake_Polarity.gain = 1.000000;
s.Brake_Polarity.offset = 0.000000;
s.Brake_Polarity.exponent = 1.000000;
s.Brake_Polarity.type = 'uint8';

s.Brake_Switch_Pin.value =  65.000000;
s.Brake_Switch_Pin.units = '';
s.Brake_Switch_Pin.help = 'Analog input pin selection for Brake_Switch_Pin';
s.Brake_Switch_Pin.format = '5.0';
s.Brake_Switch_Pin.group = 'System | I/O Pins | Inputs Config';
s.Brake_Switch_Pin.storage = 'FLASH';
s.Brake_Switch_Pin.access = uint8(hex2dec('ff'));
s.Brake_Switch_Pin.min = -32768.000000;
s.Brake_Switch_Pin.max = 32767.000000;
s.Brake_Switch_Pin.gain = 1.000000;
s.Brake_Switch_Pin.offset = 0.000000;
s.Brake_Switch_Pin.exponent = 1.000000;
s.Brake_Switch_Pin.type = 'int16';
s.Brake_Switch_Pin.enumeration = struct('name',{'(None)','ECUP','DRVP','XDRP','AN1M','AN2M','AN3M','AN4M','AN5M','AN6M','AN7M','AN8M','AN9M','AN10M','AN11M','AN12M','AN13M','AN14M','AN15M','AN16M','AN17M','AN18M','AN19M','AN20M','AN21M','AN22M','AN23M','AN24M','AN25M','AN26M','AN27M','AN28M','AN29M','AN30M','AN31M','AN32M','AN33M','AN34M','O2A','O2B','XDRP_B','REF_14V'},'value',{-1,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,143});

s.Brake_Switch_Pin_ref.value =  0.000000;
s.Brake_Switch_Pin_ref.units = '';
s.Brake_Switch_Pin_ref.help = 'Reference Voltage Selection';
s.Brake_Switch_Pin_ref.format = '3.0';
s.Brake_Switch_Pin_ref.group = 'System | I/O Pins | Inputs Config';
s.Brake_Switch_Pin_ref.storage = 'FLASH';
s.Brake_Switch_Pin_ref.access = uint8(hex2dec('ff'));
s.Brake_Switch_Pin_ref.min = 0.000000;
s.Brake_Switch_Pin_ref.max = 255.000000;
s.Brake_Switch_Pin_ref.gain = 1.000000;
s.Brake_Switch_Pin_ref.offset = 0.000000;
s.Brake_Switch_Pin_ref.exponent = 1.000000;
s.Brake_Switch_Pin_ref.type = 'uint8';
s.Brake_Switch_Pin_ref.enumeration = struct('name',{'5V','2.7V'},'value',{0,1});

s.Brake_SwitchPt.value =  500.000000;
s.Brake_SwitchPt.units = 'ADC';
s.Brake_SwitchPt.help = 'Defines switch point in ADC units boolean conversion';
s.Brake_SwitchPt.format = '4.2';
s.Brake_SwitchPt.group = 'Sensors | Brake | Brake_Switch | Brake_Switch Config';
s.Brake_SwitchPt.storage = 'FLASH';
s.Brake_SwitchPt.access = uint8(hex2dec('ff'));
s.Brake_SwitchPt.min = -100000000000000000.000000;
s.Brake_SwitchPt.max = 100000000000000000.000000;
s.Brake_SwitchPt.gain = 1.000000;
s.Brake_SwitchPt.offset = 0.000000;
s.Brake_SwitchPt.exponent = 1.000000;
s.Brake_SwitchPt.type = 'single';

s.BrakeFlash_Period.value =  0.500000;
s.BrakeFlash_Period.units = 's';
s.BrakeFlash_Period.help = 'Period for the flashing check engine indicator.';
s.BrakeFlash_Period.format = '1.3';
s.BrakeFlash_Period.group = 'BuckyWagon_01|Strategy|Actuators|BrakeInd';
s.BrakeFlash_Period.storage = 'FLASH';
s.BrakeFlash_Period.access = uint8(hex2dec('ff'));
s.BrakeFlash_Period.min = 0.000000;
s.BrakeFlash_Period.max = 100.000000;
s.BrakeFlash_Period.gain = 0.005000;
s.BrakeFlash_Period.offset = 0.000000;
s.BrakeFlash_Period.exponent = 1.000000;
s.BrakeFlash_Period.type = 'int16';

s.BrakeOut_Pin.value =  16.000000;
s.BrakeOut_Pin.units = '';
s.BrakeOut_Pin.help = 'Digital output pin selection for DOut780p0001';
s.BrakeOut_Pin.format = '5.0';
s.BrakeOut_Pin.group = 'System | I/O Pins | Outputs Config';
s.BrakeOut_Pin.storage = 'FLASH';
s.BrakeOut_Pin.access = uint8(hex2dec('ff'));
s.BrakeOut_Pin.min = -32768.000000;
s.BrakeOut_Pin.max = 32767.000000;
s.BrakeOut_Pin.gain = 1.000000;
s.BrakeOut_Pin.offset = 0.000000;
s.BrakeOut_Pin.exponent = 1.000000;
s.BrakeOut_Pin.type = 'int16';
s.BrakeOut_Pin.enumeration = struct('name',{'(None)','FINJ1','FINJ2','FINJ3','FINJ4','FINJ5','FINJ6','FINJ7','FINJ8','FINJ9','FINJ10','FINJ11','FINJ12','TACH','LSD1','LSD2','LSD3','LSD4','LSD5','LSD6','LSD7','LSD8','LSD9','LSD10','EST 1','EST 2','EST 3','EST 4','EST 5','EST 6','EST 7','EST 8','EST 9','EST 10','EST 11','EST 12','EST 13','EST 14','EST 15','EST 16','MPRD'},'value',{-1,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52});

s.BrkLtFlashCnt.value =  3.000000;
s.BrkLtFlashCnt.units = '';
s.BrkLtFlashCnt.help = 'Number of times to flash the brake light.';
s.BrkLtFlashCnt.format = '2.0';
s.BrkLtFlashCnt.group = 'BuckyWagon_01|Strategy|Actuators|BrakeLightFlash';
s.BrkLtFlashCnt.storage = 'FLASH';
s.BrkLtFlashCnt.access = uint8(hex2dec('ff'));
s.BrkLtFlashCnt.min = 0.000000;
s.BrkLtFlashCnt.max = 255.000000;
s.BrkLtFlashCnt.gain = 1.000000;
s.BrkLtFlashCnt.offset = 0.000000;
s.BrkLtFlashCnt.exponent = 1.000000;
s.BrkLtFlashCnt.type = 'uint8';

s.BrkLtFlashEn.value =  1.000000;
s.BrkLtFlashEn.units = '';
s.BrkLtFlashEn.help = 'Enable Flashing Brake Light.';
s.BrkLtFlashEn.format = '3.0';
s.BrkLtFlashEn.group = 'BuckyWagon_01|Strategy|Actuators|BrakeLightFlash';
s.BrkLtFlashEn.storage = 'FLASH';
s.BrkLtFlashEn.access = uint8(hex2dec('ff'));
s.BrkLtFlashEn.min = 0.000000;
s.BrkLtFlashEn.max = 255.000000;
s.BrkLtFlashEn.gain = 1.000000;
s.BrkLtFlashEn.offset = 0.000000;
s.BrkLtFlashEn.exponent = 1.000000;
s.BrkLtFlashEn.type = 'uint8';
s.BrkLtFlashEn.enumeration = struct('name',{'Disabled','Enabled'},'value',{0,1});

s.BrkLtFlashTime.value =  0.030000;
s.BrkLtFlashTime.units = 's';
s.BrkLtFlashTime.help = 'Speed of flash. (Time for on or off)';
s.BrkLtFlashTime.format = '1.3';
s.BrkLtFlashTime.group = 'BuckyWagon_01|Strategy|Actuators|BrakeLightFlash';
s.BrkLtFlashTime.storage = 'FLASH';
s.BrkLtFlashTime.access = uint8(hex2dec('ff'));
s.BrkLtFlashTime.min = 0.000000;
s.BrkLtFlashTime.max = 1.275000;
s.BrkLtFlashTime.gain = 0.005000;
s.BrkLtFlashTime.offset = 0.000000;
s.BrkLtFlashTime.exponent = 1.000000;
s.BrkLtFlashTime.type = 'uint8';

s.BrkOut__Polarity.value =  0.000000;
s.BrkOut__Polarity.units = 'bool';
s.BrkOut__Polarity.help = 'Inverts the output of the actuator relative to the desired command - 0 = High True    1 = Low True';
s.BrkOut__Polarity.format = '1.0';
s.BrkOut__Polarity.group = 'Actuators | Brake | Brake_Out | Brake_Out Config';
s.BrkOut__Polarity.storage = 'FLASH';
s.BrkOut__Polarity.access = uint8(hex2dec('ff'));
s.BrkOut__Polarity.min = 0.000000;
s.BrkOut__Polarity.max = 1.000000;
s.BrkOut__Polarity.gain = 1.000000;
s.BrkOut__Polarity.offset = 0.000000;
s.BrkOut__Polarity.exponent = 1.000000;
s.BrkOut__Polarity.type = 'uint8';

s.cCEnable.value =  1.000000;
s.cCEnable.units = '';
s.cCEnable.help = 'Enable Cruise Control.';
s.cCEnable.format = '3.0';
s.cCEnable.group = 'BuckyWagon_01|Strategy|Control Strategy|Assist|CruiseControl';
s.cCEnable.storage = 'FLASH';
s.cCEnable.access = uint8(hex2dec('ff'));
s.cCEnable.min = 0.000000;
s.cCEnable.max = 255.000000;
s.cCEnable.gain = 1.000000;
s.cCEnable.offset = 0.000000;
s.cCEnable.exponent = 1.000000;
s.cCEnable.type = 'uint8';
s.cCEnable.enumeration = struct('name',{'Disabled','Enabled'},'value',{0,1});

s.cCInd_LongOff.value =  1.500000;
s.cCInd_LongOff.units = 's';
s.cCInd_LongOff.help = 'Long Off time in flash sequence.';
s.cCInd_LongOff.format = '1.3';
s.cCInd_LongOff.group = 'BuckyWagon_01|Strategy|Actuators|Cruise Control Indicator';
s.cCInd_LongOff.storage = 'FLASH';
s.cCInd_LongOff.access = uint8(hex2dec('ff'));
s.cCInd_LongOff.min = 0.000000;
s.cCInd_LongOff.max = 100.000000;
s.cCInd_LongOff.gain = 0.005000;
s.cCInd_LongOff.offset = 0.000000;
s.cCInd_LongOff.exponent = 1.000000;
s.cCInd_LongOff.type = 'uint16';

s.cCInd_OnTime.value =  0.050000;
s.cCInd_OnTime.units = 's';
s.cCInd_OnTime.help = 'On time in flash sequence.';
s.cCInd_OnTime.format = '1.3';
s.cCInd_OnTime.group = 'BuckyWagon_01|Strategy|Actuators|Cruise Control Indicator';
s.cCInd_OnTime.storage = 'FLASH';
s.cCInd_OnTime.access = uint8(hex2dec('ff'));
s.cCInd_OnTime.min = 0.000000;
s.cCInd_OnTime.max = 100.000000;
s.cCInd_OnTime.gain = 0.005000;
s.cCInd_OnTime.offset = 0.000000;
s.cCInd_OnTime.exponent = 1.000000;
s.cCInd_OnTime.type = 'uint16';

s.cCInd_ShortTime.value =  0.100000;
s.cCInd_ShortTime.units = 's';
s.cCInd_ShortTime.help = 'Short Off time in sequence.';
s.cCInd_ShortTime.format = '1.3';
s.cCInd_ShortTime.group = 'BuckyWagon_01|Strategy|Actuators|Cruise Control Indicator';
s.cCInd_ShortTime.storage = 'FLASH';
s.cCInd_ShortTime.access = uint8(hex2dec('ff'));
s.cCInd_ShortTime.min = 0.000000;
s.cCInd_ShortTime.max = 100.000000;
s.cCInd_ShortTime.gain = 0.005000;
s.cCInd_ShortTime.offset = 0.000000;
s.cCInd_ShortTime.exponent = 1.000000;
s.cCInd_ShortTime.type = 'uint16';

s.cCk_I.value =  0.015000;
s.cCk_I.units = '';
s.cCk_I.help = 'Integrator gain for cruise control PI.';
s.cCk_I.format = '1.4';
s.cCk_I.group = 'BuckyWagon_01|Strategy|Control Strategy|Assist|CruiseControl';
s.cCk_I.storage = 'FLASH';
s.cCk_I.access = uint8(hex2dec('ff'));
s.cCk_I.min = 0.000000;
s.cCk_I.max = 1.000000;
s.cCk_I.gain = 1.000000;
s.cCk_I.offset = 0.000000;
s.cCk_I.exponent = 1.000000;
s.cCk_I.type = 'single';

s.cCk_MaxAccel.value =  0.500000;
s.cCk_MaxAccel.units = '%';
s.cCk_MaxAccel.help = 'Maximum Torque the cruise control can request.';
s.cCk_MaxAccel.format = '1.3';
s.cCk_MaxAccel.group = 'BuckyWagon_01|Strategy|Control Strategy|Assist|CruiseControl';
s.cCk_MaxAccel.storage = 'FLASH';
s.cCk_MaxAccel.access = uint8(hex2dec('ff'));
s.cCk_MaxAccel.min = 0.000000;
s.cCk_MaxAccel.max = 1.000000;
s.cCk_MaxAccel.gain = 1.000000;
s.cCk_MaxAccel.offset = 0.000000;
s.cCk_MaxAccel.exponent = 1.000000;
s.cCk_MaxAccel.type = 'single';

s.cCk_P.value =  0.125000;
s.cCk_P.units = '';
s.cCk_P.help = 'Integrator gain for cruise control PI.';
s.cCk_P.format = '1.4';
s.cCk_P.group = 'BuckyWagon_01|Strategy|Control Strategy|Assist|CruiseControl';
s.cCk_P.storage = 'FLASH';
s.cCk_P.access = uint8(hex2dec('ff'));
s.cCk_P.min = 0.000000;
s.cCk_P.max = 1.000000;
s.cCk_P.gain = 1.000000;
s.cCk_P.offset = 0.000000;
s.cCk_P.exponent = 1.000000;
s.cCk_P.type = 'single';

s.cCMaxButtonTime.value =  0.400000;
s.cCMaxButtonTime.units = 's';
s.cCMaxButtonTime.help = 'Maximum time for button press or unpress.';
s.cCMaxButtonTime.format = '1.3';
s.cCMaxButtonTime.group = 'BuckyWagon_01|Strategy|Control Strategy|Assist|CruiseControl';
s.cCMaxButtonTime.storage = 'FLASH';
s.cCMaxButtonTime.access = uint8(hex2dec('ff'));
s.cCMaxButtonTime.min = 0.000000;
s.cCMaxButtonTime.max = 1.275000;
s.cCMaxButtonTime.gain = 0.005000;
s.cCMaxButtonTime.offset = 0.000000;
s.cCMaxButtonTime.exponent = 1.000000;
s.cCMaxButtonTime.type = 'uint8';

s.cCMinButtonTime.value =  0.010000;
s.cCMinButtonTime.units = 's';
s.cCMinButtonTime.help = 'Minimum time for button press or unpress.';
s.cCMinButtonTime.format = '1.3';
s.cCMinButtonTime.group = 'BuckyWagon_01|Strategy|Control Strategy|Assist|CruiseControl';
s.cCMinButtonTime.storage = 'FLASH';
s.cCMinButtonTime.access = uint8(hex2dec('ff'));
s.cCMinButtonTime.min = 0.000000;
s.cCMinButtonTime.max = 1.275000;
s.cCMinButtonTime.gain = 0.005000;
s.cCMinButtonTime.offset = 0.000000;
s.cCMinButtonTime.exponent = 1.000000;
s.cCMinButtonTime.type = 'uint8';

s.cCMinSOC.value =  0.200000;
s.cCMinSOC.units = '%';
s.cCMinSOC.help = 'Minimum SOC for cruise control to work.';
s.cCMinSOC.format = '1.2';
s.cCMinSOC.group = 'BuckyWagon_01|Strategy|Control Strategy|Assist|CruiseControl';
s.cCMinSOC.storage = 'FLASH';
s.cCMinSOC.access = uint8(hex2dec('ff'));
s.cCMinSOC.min = 0.000000;
s.cCMinSOC.max = 1.000000;
s.cCMinSOC.gain = 1.000000;
s.cCMinSOC.offset = 0.000000;
s.cCMinSOC.exponent = 1.000000;
s.cCMinSOC.type = 'single';

s.cCMinSpeed.value =  10.000000;
s.cCMinSpeed.units = 'mph';
s.cCMinSpeed.help = 'Minimum speed for cruise control to work.';
s.cCMinSpeed.format = '2.1';
s.cCMinSpeed.group = 'BuckyWagon_01|Strategy|Control Strategy|Assist|CruiseControl';
s.cCMinSpeed.storage = 'FLASH';
s.cCMinSpeed.access = uint8(hex2dec('ff'));
s.cCMinSpeed.min = 0.000000;
s.cCMinSpeed.max = 100.000000;
s.cCMinSpeed.gain = 1.000000;
s.cCMinSpeed.offset = 0.000000;
s.cCMinSpeed.exponent = 1.000000;
s.cCMinSpeed.type = 'single';

s.ChargeStartupDelay.value =  2.000000;
s.ChargeStartupDelay.units = 's';
s.ChargeStartupDelay.help = 'Charge will start after conditions met for this long.';
s.ChargeStartupDelay.format = '1.2';
s.ChargeStartupDelay.group = 'BuckyWagon_01|Strategy|Control Strategy|ChargeController';
s.ChargeStartupDelay.storage = 'FLASH';
s.ChargeStartupDelay.access = uint8(hex2dec('ff'));
s.ChargeStartupDelay.min = 0.000000;
s.ChargeStartupDelay.max = 327.675000;
s.ChargeStartupDelay.gain = 0.005000;
s.ChargeStartupDelay.offset = 0.000000;
s.ChargeStartupDelay.exponent = 1.000000;
s.ChargeStartupDelay.type = 'uint16';

s.ChassisPower_MinSysVolt.value =  2.000000;
s.ChassisPower_MinSysVolt.units = 'V';
s.ChassisPower_MinSysVolt.help = 'Minimum system voltage to turn on chassis power';
s.ChassisPower_MinSysVolt.format = '1.0';
s.ChassisPower_MinSysVolt.group = 'ESled_11 | Actuators | Chassis Power Relay Driver';
s.ChassisPower_MinSysVolt.storage = 'FLASH';
s.ChassisPower_MinSysVolt.access = uint8(hex2dec('ff'));
s.ChassisPower_MinSysVolt.min = 2.000000;
s.ChassisPower_MinSysVolt.max = 20.000000;
s.ChassisPower_MinSysVolt.gain = 1.000000;
s.ChassisPower_MinSysVolt.offset = 0.000000;
s.ChassisPower_MinSysVolt.exponent = 1.000000;
s.ChassisPower_MinSysVolt.type = 'single';

s.ChassisPowerRelayDriver__Polarity.value =  0.000000;
s.ChassisPowerRelayDriver__Polarity.units = 'bool';
s.ChassisPowerRelayDriver__Polarity.help = 'Inverts the output of the actuator relative to the desired command - 0 = High True    1 = Low True';
s.ChassisPowerRelayDriver__Polarity.format = '1.0';
s.ChassisPowerRelayDriver__Polarity.group = 'Actuators | Chasis Power Relay Driver | ChassisPowerRelayDriver | ChassisPowerRelayDriver Config';
s.ChassisPowerRelayDriver__Polarity.storage = 'FLASH';
s.ChassisPowerRelayDriver__Polarity.access = uint8(hex2dec('ff'));
s.ChassisPowerRelayDriver__Polarity.min = 0.000000;
s.ChassisPowerRelayDriver__Polarity.max = 1.000000;
s.ChassisPowerRelayDriver__Polarity.gain = 1.000000;
s.ChassisPowerRelayDriver__Polarity.offset = 0.000000;
s.ChassisPowerRelayDriver__Polarity.exponent = 1.000000;
s.ChassisPowerRelayDriver__Polarity.type = 'uint8';

s.ChassisPowerRelayDriver_Pin.value =  -1.000000;
s.ChassisPowerRelayDriver_Pin.units = '';
s.ChassisPowerRelayDriver_Pin.help = 'Digital output pin selection for DOut784p0001';
s.ChassisPowerRelayDriver_Pin.format = '5.0';
s.ChassisPowerRelayDriver_Pin.group = 'System | I/O Pins | Outputs Config';
s.ChassisPowerRelayDriver_Pin.storage = 'FLASH';
s.ChassisPowerRelayDriver_Pin.access = uint8(hex2dec('ff'));
s.ChassisPowerRelayDriver_Pin.min = -32768.000000;
s.ChassisPowerRelayDriver_Pin.max = 32767.000000;
s.ChassisPowerRelayDriver_Pin.gain = 1.000000;
s.ChassisPowerRelayDriver_Pin.offset = 0.000000;
s.ChassisPowerRelayDriver_Pin.exponent = 1.000000;
s.ChassisPowerRelayDriver_Pin.type = 'int16';
s.ChassisPowerRelayDriver_Pin.enumeration = struct('name',{'(None)','FINJ1','FINJ2','FINJ3','FINJ4','FINJ5','FINJ6','FINJ7','FINJ8','FINJ9','FINJ10','FINJ11','FINJ12','TACH','LSD1','LSD2','LSD3','LSD4','LSD5','LSD6','LSD7','LSD8','LSD9','LSD10','EST 1','EST 2','EST 3','EST 4','EST 5','EST 6','EST 7','EST 8','EST 9','EST 10','EST 11','EST 12','EST 13','EST 14','EST 15','EST 16','MPRD'},'value',{-1,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52});

s.ChkEngFlash_Period.value =  0.500000;
s.ChkEngFlash_Period.units = 's';
s.ChkEngFlash_Period.help = 'Period for the flashing check engine indicator.';
s.ChkEngFlash_Period.format = '1.3';
s.ChkEngFlash_Period.group = 'BuckyWagon_01|Strategy|Actuators|CheckEngineInd';
s.ChkEngFlash_Period.storage = 'FLASH';
s.ChkEngFlash_Period.access = uint8(hex2dec('ff'));
s.ChkEngFlash_Period.min = 0.000000;
s.ChkEngFlash_Period.max = 100.000000;
s.ChkEngFlash_Period.gain = 0.005000;
s.ChkEngFlash_Period.offset = 0.000000;
s.ChkEngFlash_Period.exponent = 1.000000;
s.ChkEngFlash_Period.type = 'int16';

s.ChkEngInd__Polarity.value =  0.000000;
s.ChkEngInd__Polarity.units = 'bool';
s.ChkEngInd__Polarity.help = 'Inverts the output of the actuator relative to the desired command - 0 = High True    1 = Low True';
s.ChkEngInd__Polarity.format = '1.0';
s.ChkEngInd__Polarity.group = 'Actuators | ChkEngInd | ChkEngInd | ChkEngInd Config';
s.ChkEngInd__Polarity.storage = 'FLASH';
s.ChkEngInd__Polarity.access = uint8(hex2dec('ff'));
s.ChkEngInd__Polarity.min = 0.000000;
s.ChkEngInd__Polarity.max = 1.000000;
s.ChkEngInd__Polarity.gain = 1.000000;
s.ChkEngInd__Polarity.offset = 0.000000;
s.ChkEngInd__Polarity.exponent = 1.000000;
s.ChkEngInd__Polarity.type = 'uint8';

s.ChkEngInd_Pin.value =  -1.000000;
s.ChkEngInd_Pin.units = '';
s.ChkEngInd_Pin.help = 'Digital output pin selection for DOut781p0001';
s.ChkEngInd_Pin.format = '5.0';
s.ChkEngInd_Pin.group = 'System | I/O Pins | Outputs Config';
s.ChkEngInd_Pin.storage = 'FLASH';
s.ChkEngInd_Pin.access = uint8(hex2dec('ff'));
s.ChkEngInd_Pin.min = -32768.000000;
s.ChkEngInd_Pin.max = 32767.000000;
s.ChkEngInd_Pin.gain = 1.000000;
s.ChkEngInd_Pin.offset = 0.000000;
s.ChkEngInd_Pin.exponent = 1.000000;
s.ChkEngInd_Pin.type = 'int16';
s.ChkEngInd_Pin.enumeration = struct('name',{'(None)','FINJ1','FINJ2','FINJ3','FINJ4','FINJ5','FINJ6','FINJ7','FINJ8','FINJ9','FINJ10','FINJ11','FINJ12','TACH','LSD1','LSD2','LSD3','LSD4','LSD5','LSD6','LSD7','LSD8','LSD9','LSD10','EST 1','EST 2','EST 3','EST 4','EST 5','EST 6','EST 7','EST 8','EST 9','EST 10','EST 11','EST 12','EST 13','EST 14','EST 15','EST 16','MPRD'},'value',{-1,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52});

s.CityID_CAN_1.value =  11.000000;
s.CityID_CAN_1.units = '';
s.CityID_CAN_1.help = 'City ID for CAN bus CAN_1';
s.CityID_CAN_1.format = '3.0';
s.CityID_CAN_1.group = 'System | System Config | Communication Config';
s.CityID_CAN_1.storage = 'FLASH';
s.CityID_CAN_1.access = uint8(hex2dec('c0'));
s.CityID_CAN_1.min = 0.000000;
s.CityID_CAN_1.max = 255.000000;
s.CityID_CAN_1.gain = 1.000000;
s.CityID_CAN_1.offset = 0.000000;
s.CityID_CAN_1.exponent = 1.000000;
s.CityID_CAN_1.type = 'uint8';

s.Contactor_Disable_Delay.value =  1.000000;
s.Contactor_Disable_Delay.units = '';
s.Contactor_Disable_Delay.help = '';
s.Contactor_Disable_Delay.format = '1.2';
s.Contactor_Disable_Delay.group = 'BuckyWagon_01|Strategy|Control Strategy|Contacter Controller';
s.Contactor_Disable_Delay.storage = 'FLASH';
s.Contactor_Disable_Delay.access = uint8(hex2dec('ff'));
s.Contactor_Disable_Delay.min = 0.000000;
s.Contactor_Disable_Delay.max = 10.000000;
s.Contactor_Disable_Delay.gain = 1.000000;
s.Contactor_Disable_Delay.offset = 0.000000;
s.Contactor_Disable_Delay.exponent = 1.000000;
s.Contactor_Disable_Delay.type = 'single';

s.Contactor_Power_LSD__Polarity.value =  0.000000;
s.Contactor_Power_LSD__Polarity.units = 'bool';
s.Contactor_Power_LSD__Polarity.help = 'Inverts the output of the actuator relative to the desired command - 0 = High True    1 = Low True';
s.Contactor_Power_LSD__Polarity.format = '1.0';
s.Contactor_Power_LSD__Polarity.group = 'Actuators | Contactor Power LSD | Contactor_Power_LSD | Contactor_Power_LSD Config';
s.Contactor_Power_LSD__Polarity.storage = 'FLASH';
s.Contactor_Power_LSD__Polarity.access = uint8(hex2dec('ff'));
s.Contactor_Power_LSD__Polarity.min = 0.000000;
s.Contactor_Power_LSD__Polarity.max = 1.000000;
s.Contactor_Power_LSD__Polarity.gain = 1.000000;
s.Contactor_Power_LSD__Polarity.offset = 0.000000;
s.Contactor_Power_LSD__Polarity.exponent = 1.000000;
s.Contactor_Power_LSD__Polarity.type = 'uint8';

s.ContactorPowerLSD_Pin.value =  15.000000;
s.ContactorPowerLSD_Pin.units = '';
s.ContactorPowerLSD_Pin.help = 'Digital output pin selection for DOut786p0001';
s.ContactorPowerLSD_Pin.format = '5.0';
s.ContactorPowerLSD_Pin.group = 'System | I/O Pins | Outputs Config';
s.ContactorPowerLSD_Pin.storage = 'FLASH';
s.ContactorPowerLSD_Pin.access = uint8(hex2dec('ff'));
s.ContactorPowerLSD_Pin.min = -32768.000000;
s.ContactorPowerLSD_Pin.max = 32767.000000;
s.ContactorPowerLSD_Pin.gain = 1.000000;
s.ContactorPowerLSD_Pin.offset = 0.000000;
s.ContactorPowerLSD_Pin.exponent = 1.000000;
s.ContactorPowerLSD_Pin.type = 'int16';
s.ContactorPowerLSD_Pin.enumeration = struct('name',{'(None)','FINJ1','FINJ2','FINJ3','FINJ4','FINJ5','FINJ6','FINJ7','FINJ8','FINJ9','FINJ10','FINJ11','FINJ12','TACH','LSD1','LSD2','LSD3','LSD4','LSD5','LSD6','LSD7','LSD8','LSD9','LSD10','EST 1','EST 2','EST 3','EST 4','EST 5','EST 6','EST 7','EST 8','EST 9','EST 10','EST 11','EST 12','EST 13','EST 14','EST 15','EST 16','MPRD'},'value',{-1,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52});

s.CPUMargin.value =  9.999223;
s.CPUMargin.units = '';
s.CPUMargin.help = 'When the available CPU idle time drops below this threshold, the application performs a safety stop';
s.CPUMargin.format = '3.0';
s.CPUMargin.group = 'System | Debug | Application Monitor Config';
s.CPUMargin.storage = 'FLASH';
s.CPUMargin.access = uint8(hex2dec('f5'));
s.CPUMargin.min = 0.000000;
s.CPUMargin.max = 100.000000;
s.CPUMargin.gain = 0.001526;
s.CPUMargin.offset = 0.000000;
s.CPUMargin.exponent = 1.000000;
s.CPUMargin.type = 'uint16';

s.CrntOut_Gain.value =  1.000000;
s.CrntOut_Gain.units = 'Hz/A';
s.CrntOut_Gain.help = 'Scaling from engineering units to PWM frequency';
s.CrntOut_Gain.format = '4.2';
s.CrntOut_Gain.group = 'Actuators | Current | CurrentOut | CurrentOut Config';
s.CrntOut_Gain.storage = 'FLASH';
s.CrntOut_Gain.access = uint8(hex2dec('ff'));
s.CrntOut_Gain.min = -100000000000000000.000000;
s.CrntOut_Gain.max = 100000000000000000.000000;
s.CrntOut_Gain.gain = 1.000000;
s.CrntOut_Gain.offset = 0.000000;
s.CrntOut_Gain.exponent = 1.000000;
s.CrntOut_Gain.type = 'single';

s.CrntOut_MaxLimit.value =  100.000000;
s.CrntOut_MaxLimit.units = 'Hz';
s.CrntOut_MaxLimit.help = 'Maximum limit of PWM frequency.';
s.CrntOut_MaxLimit.format = '4.2';
s.CrntOut_MaxLimit.group = 'Actuators | Current | CurrentOut | CurrentOut Config';
s.CrntOut_MaxLimit.storage = 'FLASH';
s.CrntOut_MaxLimit.access = uint8(hex2dec('ff'));
s.CrntOut_MaxLimit.min = -100000000000000000.000000;
s.CrntOut_MaxLimit.max = 100000000000000000.000000;
s.CrntOut_MaxLimit.gain = 1.000000;
s.CrntOut_MaxLimit.offset = 0.000000;
s.CrntOut_MaxLimit.exponent = 1.000000;
s.CrntOut_MaxLimit.type = 'single';

s.CrntOut_MinLimit.value =  0.000000;
s.CrntOut_MinLimit.units = 'Hz';
s.CrntOut_MinLimit.help = 'Minimum limit of PWM frequency.';
s.CrntOut_MinLimit.format = '4.2';
s.CrntOut_MinLimit.group = 'Actuators | Current | CurrentOut | CurrentOut Config';
s.CrntOut_MinLimit.storage = 'FLASH';
s.CrntOut_MinLimit.access = uint8(hex2dec('ff'));
s.CrntOut_MinLimit.min = -100000000000000000.000000;
s.CrntOut_MinLimit.max = 100000000000000000.000000;
s.CrntOut_MinLimit.gain = 1.000000;
s.CrntOut_MinLimit.offset = 0.000000;
s.CrntOut_MinLimit.exponent = 1.000000;
s.CrntOut_MinLimit.type = 'single';

s.CrntOut_Offset.value =  0.000000;
s.CrntOut_Offset.units = 'Hz';
s.CrntOut_Offset.help = 'Offset from engineering units to PWM frequency';
s.CrntOut_Offset.format = '4.2';
s.CrntOut_Offset.group = 'Actuators | Current | CurrentOut | CurrentOut Config';
s.CrntOut_Offset.storage = 'FLASH';
s.CrntOut_Offset.access = uint8(hex2dec('ff'));
s.CrntOut_Offset.min = -100000000000000000.000000;
s.CrntOut_Offset.max = 100000000000000000.000000;
s.CrntOut_Offset.gain = 1.000000;
s.CrntOut_Offset.offset = 0.000000;
s.CrntOut_Offset.exponent = 1.000000;
s.CrntOut_Offset.type = 'single';

s.CrntOut_PWM.value =  50.000000;
s.CrntOut_PWM.units = '%';
s.CrntOut_PWM.help = 'Duty Cycle of PWM output';
s.CrntOut_PWM.format = '5.0';
s.CrntOut_PWM.group = 'Actuators | Current | CurrentOut | CurrentOut Config';
s.CrntOut_PWM.storage = 'FLASH';
s.CrntOut_PWM.access = uint8(hex2dec('ff'));
s.CrntOut_PWM.min = 0.000000;
s.CrntOut_PWM.max = 100.000000;
s.CrntOut_PWM.gain = 0.024414;
s.CrntOut_PWM.offset = 0.000000;
s.CrntOut_PWM.exponent = 1.000000;
s.CrntOut_PWM.type = 'int16';

s.CurrentOut_Pin.value =  -1.000000;
s.CurrentOut_Pin.units = '';
s.CurrentOut_Pin.help = 'PWM output pin selection for CurrentOut_Pin';
s.CurrentOut_Pin.format = '5.0';
s.CurrentOut_Pin.group = 'System | I/O Pins | Outputs Config';
s.CurrentOut_Pin.storage = 'FLASH';
s.CurrentOut_Pin.access = uint8(hex2dec('ff'));
s.CurrentOut_Pin.min = -32768.000000;
s.CurrentOut_Pin.max = 32767.000000;
s.CurrentOut_Pin.gain = 1.000000;
s.CurrentOut_Pin.offset = 0.000000;
s.CurrentOut_Pin.exponent = 1.000000;
s.CurrentOut_Pin.type = 'int16';
s.CurrentOut_Pin.enumeration = struct('name',{'(None)','H1','H2','FINJ1','FINJ2','FINJ3','FINJ4','FINJ5','FINJ6','FINJ7','FINJ8','FINJ9','FINJ10','FINJ11','FINJ12','TACH','LSD1','LSD2','LSD3','LSD4','LSD5','LSD6','LSD7','LSD8','LSD9','LSD10','EST 1','EST 2','EST 3','EST 4','EST 5','EST 6','EST 7','EST 8','EST 9','EST 10','EST 11','EST 12','EST 13','EST 14','EST 15','EST 16','H3'},'value',{-1,1,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,107});

s.CV_CurrentLimit.value =  10.000000;
s.CV_CurrentLimit.units = 'A';
s.CV_CurrentLimit.help = 'Current limit during CV charge.';
s.CV_CurrentLimit.format = '3.2';
s.CV_CurrentLimit.group = 'BuckyWagon_01|Strategy|Control Strategy|ChargeController';
s.CV_CurrentLimit.storage = 'FLASH';
s.CV_CurrentLimit.access = uint8(hex2dec('ff'));
s.CV_CurrentLimit.min = 0.000000;
s.CV_CurrentLimit.max = 500.000000;
s.CV_CurrentLimit.gain = 1.000000;
s.CV_CurrentLimit.offset = 0.000000;
s.CV_CurrentLimit.exponent = 1.000000;
s.CV_CurrentLimit.type = 'single';

s.CV_EndCurrent.value =  2.000000;
s.CV_EndCurrent.units = 'A';
s.CV_EndCurrent.help = 'Below this current the charge is complete';
s.CV_EndCurrent.format = '3.1';
s.CV_EndCurrent.group = 'BuckyWagon_01|Strategy|Control Strategy|ChargeController';
s.CV_EndCurrent.storage = 'FLASH';
s.CV_EndCurrent.access = uint8(hex2dec('ff'));
s.CV_EndCurrent.min = 0.000000;
s.CV_EndCurrent.max = 500.000000;
s.CV_EndCurrent.gain = 1.000000;
s.CV_EndCurrent.offset = 0.000000;
s.CV_EndCurrent.exponent = 1.000000;
s.CV_EndCurrent.type = 'single';

s.CV_EndCurrentTime.value =  15.000000;
s.CV_EndCurrentTime.units = 's';
s.CV_EndCurrentTime.help = 'Current must be below end limit this long to end charge.';
s.CV_EndCurrentTime.format = '3.1';
s.CV_EndCurrentTime.group = 'BuckyWagon_01|Strategy|Control Strategy|ChargeController';
s.CV_EndCurrentTime.storage = 'FLASH';
s.CV_EndCurrentTime.access = uint8(hex2dec('ff'));
s.CV_EndCurrentTime.min = 0.000000;
s.CV_EndCurrentTime.max = 327.675000;
s.CV_EndCurrentTime.gain = 0.005000;
s.CV_EndCurrentTime.offset = 0.000000;
s.CV_EndCurrentTime.exponent = 1.000000;
s.CV_EndCurrentTime.type = 'uint16';

s.CV_Voltage.value =  372.000000;
s.CV_Voltage.units = 'V';
s.CV_Voltage.help = 'Commanded voltage during CV charge.';
s.CV_Voltage.format = '3.1';
s.CV_Voltage.group = 'BuckyWagon_01|Strategy|Control Strategy|ChargeController';
s.CV_Voltage.storage = 'FLASH';
s.CV_Voltage.access = uint8(hex2dec('ff'));
s.CV_Voltage.min = 0.000000;
s.CV_Voltage.max = 500.000000;
s.CV_Voltage.gain = 1.000000;
s.CV_Voltage.offset = 0.000000;
s.CV_Voltage.exponent = 1.000000;
s.CV_Voltage.type = 'single';

s.DisplayFaults.value =  1.000000;
s.DisplayFaults.units = '';
s.DisplayFaults.help = 'Enable displaying faults when they are active.';
s.DisplayFaults.format = '1.0';
s.DisplayFaults.group = 'BuckyWagon_01|Strategy|MiniViewDisplay|GetFaultName';
s.DisplayFaults.storage = 'FLASH';
s.DisplayFaults.access = uint8(hex2dec('ff'));
s.DisplayFaults.min = 0.000000;
s.DisplayFaults.max = 1.000000;
s.DisplayFaults.gain = 1.000000;
s.DisplayFaults.offset = 0.000000;
s.DisplayFaults.exponent = 1.000000;
s.DisplayFaults.type = 'uint8';
s.DisplayFaults.enumeration = struct('name',{'Disabled','Enabled'},'value',{0,1});

s.dispLength.value =  6.000000;
s.dispLength.units = '';
s.dispLength.help = 'Number of characters to display when scrolling fault name.';
s.dispLength.format = '3.0';
s.dispLength.group = 'BuckyWagon_01|Strategy|MiniViewDisplay|GetFaultName';
s.dispLength.storage = 'FLASH';
s.dispLength.access = uint8(hex2dec('ff'));
s.dispLength.min = 0.000000;
s.dispLength.max = 9.000000;
s.dispLength.gain = 1.000000;
s.dispLength.offset = 0.000000;
s.dispLength.exponent = 1.000000;
s.dispLength.type = 'uint8';

s.ECUP_Threshold.value =  100.000000;
s.ECUP_Threshold.units = 'ADC_counts';
s.ECUP_Threshold.help = 'ADC voltage threshold above which ECU is considered powered';
s.ECUP_Threshold.format = '5.0';
s.ECUP_Threshold.group = 'System | Main Power Relay | Main Power Relay Config';
s.ECUP_Threshold.storage = 'FLASH';
s.ECUP_Threshold.access = uint8(hex2dec('ff'));
s.ECUP_Threshold.min = 0.000000;
s.ECUP_Threshold.max = 1023.000000;
s.ECUP_Threshold.gain = 1.000000;
s.ECUP_Threshold.offset = 0.000000;
s.ECUP_Threshold.exponent = 1.000000;
s.ECUP_Threshold.type = 'uint16';

s.EHPAS_Performance_Limit.value =  100.000000;
s.EHPAS_Performance_Limit.units = '';
s.EHPAS_Performance_Limit.help = '';
s.EHPAS_Performance_Limit.format = '3.0';
s.EHPAS_Performance_Limit.group = 'Actuators | EHPAS';
s.EHPAS_Performance_Limit.storage = 'FLASH';
s.EHPAS_Performance_Limit.access = uint8(hex2dec('ff'));
s.EHPAS_Performance_Limit.min = 0.000000;
s.EHPAS_Performance_Limit.max = 255.000000;
s.EHPAS_Performance_Limit.gain = 1.000000;
s.EHPAS_Performance_Limit.offset = 0.000000;
s.EHPAS_Performance_Limit.exponent = 1.000000;
s.EHPAS_Performance_Limit.type = 'uint8';

s.EStop_Opens_Contactors.value =  1.000000;
s.EStop_Opens_Contactors.units = '';
s.EStop_Opens_Contactors.help = '';
s.EStop_Opens_Contactors.format = '1.0';
s.EStop_Opens_Contactors.group = 'BuckyWagon_01|Strategy|Control Strategy|Contacter Controller';
s.EStop_Opens_Contactors.storage = 'FLASH';
s.EStop_Opens_Contactors.access = uint8(hex2dec('ff'));
s.EStop_Opens_Contactors.min = 0.000000;
s.EStop_Opens_Contactors.max = 1.000000;
s.EStop_Opens_Contactors.gain = 1.000000;
s.EStop_Opens_Contactors.offset = 0.000000;
s.EStop_Opens_Contactors.exponent = 1.000000;
s.EStop_Opens_Contactors.type = 'uint8';

s.EStop_Polarity.value =  1.000000;
s.EStop_Polarity.units = 'bool';
s.EStop_Polarity.help = '0 = High True    1 = Low True';
s.EStop_Polarity.format = '1.0';
s.EStop_Polarity.group = 'Sensors | EStop | EStop_Switch | EStop_Switch Config';
s.EStop_Polarity.storage = 'FLASH';
s.EStop_Polarity.access = uint8(hex2dec('ff'));
s.EStop_Polarity.min = 0.000000;
s.EStop_Polarity.max = 1.000000;
s.EStop_Polarity.gain = 1.000000;
s.EStop_Polarity.offset = 0.000000;
s.EStop_Polarity.exponent = 1.000000;
s.EStop_Polarity.type = 'uint8';

s.EStop_Switch_Pin.value =  -1.000000;
s.EStop_Switch_Pin.units = '';
s.EStop_Switch_Pin.help = 'Digital input pin selection for EStop_Switch_Pin';
s.EStop_Switch_Pin.format = '5.0';
s.EStop_Switch_Pin.group = 'System | I/O Pins | Inputs Config';
s.EStop_Switch_Pin.storage = 'FLASH';
s.EStop_Switch_Pin.access = uint8(hex2dec('ff'));
s.EStop_Switch_Pin.min = -32768.000000;
s.EStop_Switch_Pin.max = 32767.000000;
s.EStop_Switch_Pin.gain = 1.000000;
s.EStop_Switch_Pin.offset = 0.000000;
s.EStop_Switch_Pin.exponent = 1.000000;
s.EStop_Switch_Pin.type = 'int16';
s.EStop_Switch_Pin.enumeration = struct('name',{'(None)','AN1M','AN2M','AN3M','AN4M','AN5M','AN6M','AN7M','AN8M','AN9M','AN10M','AN11M','AN12M','AN13M','AN14M','AN15M','AN16M','AN17M','AN18M','AN19M','AN20M','AN21M','AN22M','AN23M','AN24M','AN25M','AN26M','AN27M','AN28M','AN29M','AN30M','AN31M','AN32M','AN33M','AN34M','O2A','O2B','DG1M','DG2M','DG3M','DG4M','DG5M','DG6M','DG7M','SPD1','SPD2','DG8M'},'value',{-1,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,94,95,96,102,103,104,105,106,111});

s.FgndTimeStackMargin.value =  512.000000;
s.FgndTimeStackMargin.units = '';
s.FgndTimeStackMargin.help = 'When the available stack space drops below this threshold, the application performs a safety stop';
s.FgndTimeStackMargin.format = '5.0';
s.FgndTimeStackMargin.group = 'System | Debug | Application Monitor Config';
s.FgndTimeStackMargin.storage = 'FLASH';
s.FgndTimeStackMargin.access = uint8(hex2dec('f5'));
s.FgndTimeStackMargin.min = 0.000000;
s.FgndTimeStackMargin.max = 3072.000000;
s.FgndTimeStackMargin.gain = 1.000000;
s.FgndTimeStackMargin.offset = 0.000000;
s.FgndTimeStackMargin.exponent = 1.000000;
s.FgndTimeStackMargin.type = 'uint16';

s.firstScrollTime.value =  1.000000;
s.firstScrollTime.units = 's';
s.firstScrollTime.help = 'Time to spend on first view of the scroll';
s.firstScrollTime.format = '1.3';
s.firstScrollTime.group = 'BuckyWagon_01|Strategy|MiniViewDisplay|GetFaultName';
s.firstScrollTime.storage = 'FLASH';
s.firstScrollTime.access = uint8(hex2dec('ff'));
s.firstScrollTime.min = 0.000000;
s.firstScrollTime.max = 5.000000;
s.firstScrollTime.gain = 0.005000;
s.firstScrollTime.offset = 0.000000;
s.firstScrollTime.exponent = 1.000000;
s.firstScrollTime.type = 'uint16';

s.fwdAccThres.value =  0.020000;
s.fwdAccThres.units = '%';
s.fwdAccThres.help = 'Accelerator must be below this to switch Rev->Fwd';
s.fwdAccThres.format = '4.2';
s.fwdAccThres.group = 'BuckyWagon_01|Strategy|Control Strategy|Reverse';
s.fwdAccThres.storage = 'FLASH';
s.fwdAccThres.access = uint8(hex2dec('ff'));
s.fwdAccThres.min = 0.000000;
s.fwdAccThres.max = 1.000000;
s.fwdAccThres.gain = 1.000000;
s.fwdAccThres.offset = 0.000000;
s.fwdAccThres.exponent = 1.000000;
s.fwdAccThres.type = 'single';

s.fwdSpdThres.value =  5.000000;
s.fwdSpdThres.units = 'mph';
s.fwdSpdThres.help = 'Must be below this speed to switch Rev->Fwd';
s.fwdSpdThres.format = '4.2';
s.fwdSpdThres.group = 'BuckyWagon_01|Strategy|Control Strategy|Reverse';
s.fwdSpdThres.storage = 'FLASH';
s.fwdSpdThres.access = uint8(hex2dec('ff'));
s.fwdSpdThres.min = 0.000000;
s.fwdSpdThres.max = 100000000000000000.000000;
s.fwdSpdThres.gain = 1.000000;
s.fwdSpdThres.offset = 0.000000;
s.fwdSpdThres.exponent = 1.000000;
s.fwdSpdThres.type = 'single';

s.GndFlt_Polarity.value =  1.000000;
s.GndFlt_Polarity.units = 'bool';
s.GndFlt_Polarity.help = '0 = High True    1 = Low True';
s.GndFlt_Polarity.format = '1.0';
s.GndFlt_Polarity.group = 'Sensors | GroundFault | GroundFault Config';
s.GndFlt_Polarity.storage = 'FLASH';
s.GndFlt_Polarity.access = uint8(hex2dec('ff'));
s.GndFlt_Polarity.min = 0.000000;
s.GndFlt_Polarity.max = 1.000000;
s.GndFlt_Polarity.gain = 1.000000;
s.GndFlt_Polarity.offset = 0.000000;
s.GndFlt_Polarity.exponent = 1.000000;
s.GndFlt_Polarity.type = 'uint8';

s.GroundFault_Pin.value =  94.000000;
s.GroundFault_Pin.units = '';
s.GroundFault_Pin.help = 'Digital input pin selection for GroundFault_Pin';
s.GroundFault_Pin.format = '5.0';
s.GroundFault_Pin.group = 'System | I/O Pins | Inputs Config';
s.GroundFault_Pin.storage = 'FLASH';
s.GroundFault_Pin.access = uint8(hex2dec('ff'));
s.GroundFault_Pin.min = -32768.000000;
s.GroundFault_Pin.max = 32767.000000;
s.GroundFault_Pin.gain = 1.000000;
s.GroundFault_Pin.offset = 0.000000;
s.GroundFault_Pin.exponent = 1.000000;
s.GroundFault_Pin.type = 'int16';
s.GroundFault_Pin.enumeration = struct('name',{'(None)','AN1M','AN2M','AN3M','AN4M','AN5M','AN6M','AN7M','AN8M','AN9M','AN10M','AN11M','AN12M','AN13M','AN14M','AN15M','AN16M','AN17M','AN18M','AN19M','AN20M','AN21M','AN22M','AN23M','AN24M','AN25M','AN26M','AN27M','AN28M','AN29M','AN30M','AN31M','AN32M','AN33M','AN34M','O2A','O2B','DG1M','DG2M','DG3M','DG4M','DG5M','DG6M','DG7M','SPD1','SPD2','DG8M'},'value',{-1,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,94,95,96,102,103,104,105,106,111});

s.HeapMargin.value =  256.000000;
s.HeapMargin.units = '';
s.HeapMargin.help = 'When the available heap drops below this threshold, the application performs a safety stop';
s.HeapMargin.format = '5.0';
s.HeapMargin.group = 'System | Debug | Application Monitor Config';
s.HeapMargin.storage = 'FLASH';
s.HeapMargin.access = uint8(hex2dec('f5'));
s.HeapMargin.min = 0.000000;
s.HeapMargin.max = 4096.000000;
s.HeapMargin.gain = 1.000000;
s.HeapMargin.offset = 0.000000;
s.HeapMargin.exponent = 1.000000;
s.HeapMargin.type = 'uint16';

s.High12VThres.value =  14.500000;
s.High12VThres.units = 'V';
s.High12VThres.help = 'Voltage below with low 12V fault occurs.';
s.High12VThres.format = '4.2';
s.High12VThres.group = 'Sensors | LVVolt';
s.High12VThres.storage = 'FLASH';
s.High12VThres.access = uint8(hex2dec('ff'));
s.High12VThres.min = -100000000000000000.000000;
s.High12VThres.max = 100000000000000000.000000;
s.High12VThres.gain = 1.000000;
s.High12VThres.offset = 0.000000;
s.High12VThres.exponent = 1.000000;
s.High12VThres.type = 'single';

s.HV_Current_DfltValue.value =  1.000000;
s.HV_Current_DfltValue.units = 'A';
s.HV_Current_DfltValue.help = 'This is the initial default value should the sensor be in fault on key-up.  Otherwise the sensors outputs the last value prior to faulting';
s.HV_Current_DfltValue.format = '4.2';
s.HV_Current_DfltValue.group = 'Sensors | HV_Current | HV_Current | HV_Current Config';
s.HV_Current_DfltValue.storage = 'FLASH';
s.HV_Current_DfltValue.access = uint8(hex2dec('ff'));
s.HV_Current_DfltValue.min = -100000000000000000.000000;
s.HV_Current_DfltValue.max = 100000000000000000.000000;
s.HV_Current_DfltValue.gain = 1.000000;
s.HV_Current_DfltValue.offset = 0.000000;
s.HV_Current_DfltValue.exponent = 1.000000;
s.HV_Current_DfltValue.type = 'single';

s.HV_Current_FilterConst.value =  1.000000;
s.HV_Current_FilterConst.units = 'sec';
s.HV_Current_FilterConst.help = 'Filter time constant';
s.HV_Current_FilterConst.format = '4.2';
s.HV_Current_FilterConst.group = 'Sensors | HV_Current | HV_Current | HV_Current Config';
s.HV_Current_FilterConst.storage = 'FLASH';
s.HV_Current_FilterConst.access = uint8(hex2dec('ff'));
s.HV_Current_FilterConst.min = -100000000000000000.000000;
s.HV_Current_FilterConst.max = 100000000000000000.000000;
s.HV_Current_FilterConst.gain = 1.000000;
s.HV_Current_FilterConst.offset = 0.000000;
s.HV_Current_FilterConst.exponent = 1.000000;
s.HV_Current_FilterConst.type = 'single';

s.HV_Current_Gain.value =  0.856634;
s.HV_Current_Gain.units = 'A/ADC';
s.HV_Current_Gain.help = 'Scaling from A/D counts to engineering units';
s.HV_Current_Gain.format = '5.4';
s.HV_Current_Gain.group = 'Sensors | HV_Current | HV_Current | HV_Current Config';
s.HV_Current_Gain.storage = 'FLASH';
s.HV_Current_Gain.access = uint8(hex2dec('ff'));
s.HV_Current_Gain.min = -100000000000000000.000000;
s.HV_Current_Gain.max = 100000000000000000.000000;
s.HV_Current_Gain.gain = 1.000000;
s.HV_Current_Gain.offset = 0.000000;
s.HV_Current_Gain.exponent = 1.000000;
s.HV_Current_Gain.type = 'single';

s.HV_Current_InputHiFltPos.value =  950.000000;
s.HV_Current_InputHiFltPos.units = 'ADC';
s.HV_Current_InputHiFltPos.help = 'Maximum allowable input, indicating short or open circuit';
s.HV_Current_InputHiFltPos.format = '4.2';
s.HV_Current_InputHiFltPos.group = 'Sensors | HV_Current | HV_Current | HV_Current Config';
s.HV_Current_InputHiFltPos.storage = 'FLASH';
s.HV_Current_InputHiFltPos.access = uint8(hex2dec('ff'));
s.HV_Current_InputHiFltPos.min = -100000000000000000.000000;
s.HV_Current_InputHiFltPos.max = 100000000000000000.000000;
s.HV_Current_InputHiFltPos.gain = 1.000000;
s.HV_Current_InputHiFltPos.offset = 0.000000;
s.HV_Current_InputHiFltPos.exponent = 1.000000;
s.HV_Current_InputHiFltPos.type = 'single';

s.HV_Current_InputLoFltPos.value =  50.000000;
s.HV_Current_InputLoFltPos.units = 'ADC';
s.HV_Current_InputLoFltPos.help = 'Minimum allowable input, indicating short or open circuit';
s.HV_Current_InputLoFltPos.format = '4.2';
s.HV_Current_InputLoFltPos.group = 'Sensors | HV_Current | HV_Current | HV_Current Config';
s.HV_Current_InputLoFltPos.storage = 'FLASH';
s.HV_Current_InputLoFltPos.access = uint8(hex2dec('ff'));
s.HV_Current_InputLoFltPos.min = -100000000000000000.000000;
s.HV_Current_InputLoFltPos.max = 100000000000000000.000000;
s.HV_Current_InputLoFltPos.gain = 1.000000;
s.HV_Current_InputLoFltPos.offset = 0.000000;
s.HV_Current_InputLoFltPos.exponent = 1.000000;
s.HV_Current_InputLoFltPos.type = 'single';

s.HV_Current_Ofst.value =  -437.739990;
s.HV_Current_Ofst.units = 'A';
s.HV_Current_Ofst.help = 'Offset after gain in engineering units';
s.HV_Current_Ofst.format = '4.2';
s.HV_Current_Ofst.group = 'Sensors | HV_Current | HV_Current | HV_Current Config';
s.HV_Current_Ofst.storage = 'FLASH';
s.HV_Current_Ofst.access = uint8(hex2dec('ff'));
s.HV_Current_Ofst.min = -100000000000000000.000000;
s.HV_Current_Ofst.max = 100000000000000000.000000;
s.HV_Current_Ofst.gain = 1.000000;
s.HV_Current_Ofst.offset = 0.000000;
s.HV_Current_Ofst.exponent = 1.000000;
s.HV_Current_Ofst.type = 'single';

s.HV_Current_Pin.value =  56.000000;
s.HV_Current_Pin.units = '';
s.HV_Current_Pin.help = 'Analog input pin selection for HV_Current_Pin';
s.HV_Current_Pin.format = '5.0';
s.HV_Current_Pin.group = 'System | I/O Pins | Inputs Config';
s.HV_Current_Pin.storage = 'FLASH';
s.HV_Current_Pin.access = uint8(hex2dec('ff'));
s.HV_Current_Pin.min = -32768.000000;
s.HV_Current_Pin.max = 32767.000000;
s.HV_Current_Pin.gain = 1.000000;
s.HV_Current_Pin.offset = 0.000000;
s.HV_Current_Pin.exponent = 1.000000;
s.HV_Current_Pin.type = 'int16';
s.HV_Current_Pin.enumeration = struct('name',{'(None)','ECUP','DRVP','XDRP','AN1M','AN2M','AN3M','AN4M','AN5M','AN6M','AN7M','AN8M','AN9M','AN10M','AN11M','AN12M','AN13M','AN14M','AN15M','AN16M','AN17M','AN18M','AN19M','AN20M','AN21M','AN22M','AN23M','AN24M','AN25M','AN26M','AN27M','AN28M','AN29M','AN30M','AN31M','AN32M','AN33M','AN34M','O2A','O2B','XDRP_B','REF_14V'},'value',{-1,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,143});

s.HV_Current_Pin_ref.value =  0.000000;
s.HV_Current_Pin_ref.units = '';
s.HV_Current_Pin_ref.help = 'Reference Voltage Selection';
s.HV_Current_Pin_ref.format = '3.0';
s.HV_Current_Pin_ref.group = 'System | I/O Pins | Inputs Config';
s.HV_Current_Pin_ref.storage = 'FLASH';
s.HV_Current_Pin_ref.access = uint8(hex2dec('ff'));
s.HV_Current_Pin_ref.min = 0.000000;
s.HV_Current_Pin_ref.max = 255.000000;
s.HV_Current_Pin_ref.gain = 1.000000;
s.HV_Current_Pin_ref.offset = 0.000000;
s.HV_Current_Pin_ref.exponent = 1.000000;
s.HV_Current_Pin_ref.type = 'uint8';
s.HV_Current_Pin_ref.enumeration = struct('name',{'5V','2.7V'},'value',{0,1});

s.HV_Temp_Default.value =  0.000000;
s.HV_Temp_Default.units = 'C';
s.HV_Temp_Default.help = 'This is the initial default value should the sensor be in fault on key-up.  Otherwise the sensors outputs the last value prior to faulting';
s.HV_Temp_Default.format = '4.2';
s.HV_Temp_Default.group = 'Sensors | HV_Temp | HV_Temp Config';
s.HV_Temp_Default.storage = 'FLASH';
s.HV_Temp_Default.access = uint8(hex2dec('ff'));
s.HV_Temp_Default.min = -100000000000000000.000000;
s.HV_Temp_Default.max = 100000000000000000.000000;
s.HV_Temp_Default.gain = 1.000000;
s.HV_Temp_Default.offset = 0.000000;
s.HV_Temp_Default.exponent = 1.000000;
s.HV_Temp_Default.type = 'single';

s.HV_Temp_FiltConst.value =  0.005000;
s.HV_Temp_FiltConst.units = 'sec';
s.HV_Temp_FiltConst.help = 'Filter time constant';
s.HV_Temp_FiltConst.format = '4.2';
s.HV_Temp_FiltConst.group = 'Sensors | HV_Temp | HV_Temp Config';
s.HV_Temp_FiltConst.storage = 'FLASH';
s.HV_Temp_FiltConst.access = uint8(hex2dec('ff'));
s.HV_Temp_FiltConst.min = -100000000000000000.000000;
s.HV_Temp_FiltConst.max = 100000000000000000.000000;
s.HV_Temp_FiltConst.gain = 1.000000;
s.HV_Temp_FiltConst.offset = 0.000000;
s.HV_Temp_FiltConst.exponent = 1.000000;
s.HV_Temp_FiltConst.type = 'single';

s.HV_Temp_Max.value =  1020.000000;
s.HV_Temp_Max.units = 'ADC';
s.HV_Temp_Max.help = 'Maximum allowable input, indicating short or open circuit';
s.HV_Temp_Max.format = '4.2';
s.HV_Temp_Max.group = 'Sensors | HV_Temp | HV_Temp Config';
s.HV_Temp_Max.storage = 'FLASH';
s.HV_Temp_Max.access = uint8(hex2dec('ff'));
s.HV_Temp_Max.min = -100000000000000000.000000;
s.HV_Temp_Max.max = 100000000000000000.000000;
s.HV_Temp_Max.gain = 1.000000;
s.HV_Temp_Max.offset = 0.000000;
s.HV_Temp_Max.exponent = 1.000000;
s.HV_Temp_Max.type = 'single';

s.HV_Temp_Min.value =  10.000000;
s.HV_Temp_Min.units = 'ADC';
s.HV_Temp_Min.help = 'Minimum allowable input, indicating short or open circuit';
s.HV_Temp_Min.format = '4.2';
s.HV_Temp_Min.group = 'Sensors | HV_Temp | HV_Temp Config';
s.HV_Temp_Min.storage = 'FLASH';
s.HV_Temp_Min.access = uint8(hex2dec('ff'));
s.HV_Temp_Min.min = -100000000000000000.000000;
s.HV_Temp_Min.max = 100000000000000000.000000;
s.HV_Temp_Min.gain = 1.000000;
s.HV_Temp_Min.offset = 0.000000;
s.HV_Temp_Min.exponent = 1.000000;
s.HV_Temp_Min.type = 'single';

s.HV_Temp_Pin.value =  -1.000000;
s.HV_Temp_Pin.units = '';
s.HV_Temp_Pin.help = 'Analog input pin selection for HV_Temp_Pin';
s.HV_Temp_Pin.format = '5.0';
s.HV_Temp_Pin.group = 'System | I/O Pins | Inputs Config';
s.HV_Temp_Pin.storage = 'FLASH';
s.HV_Temp_Pin.access = uint8(hex2dec('ff'));
s.HV_Temp_Pin.min = -32768.000000;
s.HV_Temp_Pin.max = 32767.000000;
s.HV_Temp_Pin.gain = 1.000000;
s.HV_Temp_Pin.offset = 0.000000;
s.HV_Temp_Pin.exponent = 1.000000;
s.HV_Temp_Pin.type = 'int16';
s.HV_Temp_Pin.enumeration = struct('name',{'(None)','ECUP','DRVP','XDRP','AN1M','AN2M','AN3M','AN4M','AN5M','AN6M','AN7M','AN8M','AN9M','AN10M','AN11M','AN12M','AN13M','AN14M','AN15M','AN16M','AN17M','AN18M','AN19M','AN20M','AN21M','AN22M','AN23M','AN24M','AN25M','AN26M','AN27M','AN28M','AN29M','AN30M','AN31M','AN32M','AN33M','AN34M','O2A','O2B','XDRP_B','REF_14V'},'value',{-1,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,143});

s.HV_Temp_Pin_ref.value =  0.000000;
s.HV_Temp_Pin_ref.units = '';
s.HV_Temp_Pin_ref.help = 'Reference Voltage Selection';
s.HV_Temp_Pin_ref.format = '3.0';
s.HV_Temp_Pin_ref.group = 'System | I/O Pins | Inputs Config';
s.HV_Temp_Pin_ref.storage = 'FLASH';
s.HV_Temp_Pin_ref.access = uint8(hex2dec('ff'));
s.HV_Temp_Pin_ref.min = 0.000000;
s.HV_Temp_Pin_ref.max = 255.000000;
s.HV_Temp_Pin_ref.gain = 1.000000;
s.HV_Temp_Pin_ref.offset = 0.000000;
s.HV_Temp_Pin_ref.exponent = 1.000000;
s.HV_Temp_Pin_ref.type = 'uint8';
s.HV_Temp_Pin_ref.enumeration = struct('name',{'5V','2.7V'},'value',{0,1});

s.IdleStackMargin.value =  256.000000;
s.IdleStackMargin.units = '';
s.IdleStackMargin.help = 'When the available stack space drops below this threshold, the application performs a safety stop';
s.IdleStackMargin.format = '5.0';
s.IdleStackMargin.group = 'System | Debug | Application Monitor Config';
s.IdleStackMargin.storage = 'FLASH';
s.IdleStackMargin.access = uint8(hex2dec('f5'));
s.IdleStackMargin.min = 0.000000;
s.IdleStackMargin.max = 1024.000000;
s.IdleStackMargin.gain = 1.000000;
s.IdleStackMargin.offset = 0.000000;
s.IdleStackMargin.exponent = 1.000000;
s.IdleStackMargin.type = 'uint16';

s.IFilterAlpha.value =  0.010000;
s.IFilterAlpha.units = '';
s.IFilterAlpha.help = '';
s.IFilterAlpha.format = '1.4';
s.IFilterAlpha.group = 'BuckyWagon_01|Strategy|Control Strategy|ChargeController';
s.IFilterAlpha.storage = 'FLASH';
s.IFilterAlpha.access = uint8(hex2dec('ff'));
s.IFilterAlpha.min = 0.000000;
s.IFilterAlpha.max = 1.000000;
s.IFilterAlpha.gain = 1.000000;
s.IFilterAlpha.offset = 0.000000;
s.IFilterAlpha.exponent = 1.000000;
s.IFilterAlpha.type = 'single';

s.InterruptStackMargin.value =  128.000000;
s.InterruptStackMargin.units = '';
s.InterruptStackMargin.help = 'When the available stack space drops below this threshold, the application performs a safety stop';
s.InterruptStackMargin.format = '5.0';
s.InterruptStackMargin.group = 'System | Debug | Application Monitor Config';
s.InterruptStackMargin.storage = 'FLASH';
s.InterruptStackMargin.access = uint8(hex2dec('f5'));
s.InterruptStackMargin.min = 0.000000;
s.InterruptStackMargin.max = 1536.000000;
s.InterruptStackMargin.gain = 1.000000;
s.InterruptStackMargin.offset = 0.000000;
s.InterruptStackMargin.exponent = 1.000000;
s.InterruptStackMargin.type = 'uint16';

s.InvertMode.value =  0.000000;
s.InvertMode.units = '';
s.InvertMode.help = 'Sets the background color for the text.';
s.InvertMode.format = '1.0';
s.InvertMode.group = 'BuckyWagon_01|Strategy|MiniViewDisplay|GetFaultName';
s.InvertMode.storage = 'FLASH';
s.InvertMode.access = uint8(hex2dec('ff'));
s.InvertMode.min = 0.000000;
s.InvertMode.max = 1.000000;
s.InvertMode.gain = 1.000000;
s.InvertMode.offset = 0.000000;
s.InvertMode.exponent = 1.000000;
s.InvertMode.type = 'uint8';
s.InvertMode.enumeration = struct('name',{'Normal','Inverted'},'value',{0,1});

s.lastScrollTime.value =  0.500000;
s.lastScrollTime.units = 's';
s.lastScrollTime.help = 'Time to spend on the last view of the scroll';
s.lastScrollTime.format = '1.3';
s.lastScrollTime.group = 'BuckyWagon_01|Strategy|MiniViewDisplay|GetFaultName';
s.lastScrollTime.storage = 'FLASH';
s.lastScrollTime.access = uint8(hex2dec('ff'));
s.lastScrollTime.min = 0.000000;
s.lastScrollTime.max = 5.000000;
s.lastScrollTime.gain = 0.005000;
s.lastScrollTime.offset = 0.000000;
s.lastScrollTime.exponent = 1.000000;
s.lastScrollTime.type = 'uint16';

s.Low12VThres.value =  12.800000;
s.Low12VThres.units = 'V';
s.Low12VThres.help = 'Voltage below with low 12V fault occurs.';
s.Low12VThres.format = '4.2';
s.Low12VThres.group = 'Sensors | LVVolt';
s.Low12VThres.storage = 'FLASH';
s.Low12VThres.access = uint8(hex2dec('ff'));
s.Low12VThres.min = -100000000000000000.000000;
s.Low12VThres.max = 100000000000000000.000000;
s.Low12VThres.gain = 1.000000;
s.Low12VThres.offset = 0.000000;
s.Low12VThres.exponent = 1.000000;
s.Low12VThres.type = 'single';

s.LV_Voltage_Pin.value =  53.000000;
s.LV_Voltage_Pin.units = '';
s.LV_Voltage_Pin.help = 'Analog input pin selection for LV_Voltage_Pin';
s.LV_Voltage_Pin.format = '5.0';
s.LV_Voltage_Pin.group = 'System | I/O Pins | Inputs Config';
s.LV_Voltage_Pin.storage = 'FLASH';
s.LV_Voltage_Pin.access = uint8(hex2dec('ff'));
s.LV_Voltage_Pin.min = -32768.000000;
s.LV_Voltage_Pin.max = 32767.000000;
s.LV_Voltage_Pin.gain = 1.000000;
s.LV_Voltage_Pin.offset = 0.000000;
s.LV_Voltage_Pin.exponent = 1.000000;
s.LV_Voltage_Pin.type = 'int16';
s.LV_Voltage_Pin.enumeration = struct('name',{'(None)','ECUP','DRVP','XDRP','AN1M','AN2M','AN3M','AN4M','AN5M','AN6M','AN7M','AN8M','AN9M','AN10M','AN11M','AN12M','AN13M','AN14M','AN15M','AN16M','AN17M','AN18M','AN19M','AN20M','AN21M','AN22M','AN23M','AN24M','AN25M','AN26M','AN27M','AN28M','AN29M','AN30M','AN31M','AN32M','AN33M','AN34M','O2A','O2B','XDRP_B','REF_14V'},'value',{-1,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,143});

s.LV_Voltage_Pin_ref.value =  0.000000;
s.LV_Voltage_Pin_ref.units = '';
s.LV_Voltage_Pin_ref.help = 'Reference Voltage Selection';
s.LV_Voltage_Pin_ref.format = '3.0';
s.LV_Voltage_Pin_ref.group = 'System | I/O Pins | Inputs Config';
s.LV_Voltage_Pin_ref.storage = 'FLASH';
s.LV_Voltage_Pin_ref.access = uint8(hex2dec('ff'));
s.LV_Voltage_Pin_ref.min = 0.000000;
s.LV_Voltage_Pin_ref.max = 255.000000;
s.LV_Voltage_Pin_ref.gain = 1.000000;
s.LV_Voltage_Pin_ref.offset = 0.000000;
s.LV_Voltage_Pin_ref.exponent = 1.000000;
s.LV_Voltage_Pin_ref.type = 'uint8';
s.LV_Voltage_Pin_ref.enumeration = struct('name',{'5V','2.7V'},'value',{0,1});

s.LVVolt_DfltValue.value =  1.000000;
s.LVVolt_DfltValue.units = 'V';
s.LVVolt_DfltValue.help = 'This is the initial default value should the sensor be in fault on key-up.  Otherwise the sensors outputs the last value prior to faulting';
s.LVVolt_DfltValue.format = '4.2';
s.LVVolt_DfltValue.group = 'Sensors | LVVolt | LVVolt | LVVolt Config';
s.LVVolt_DfltValue.storage = 'FLASH';
s.LVVolt_DfltValue.access = uint8(hex2dec('ff'));
s.LVVolt_DfltValue.min = -100000000000000000.000000;
s.LVVolt_DfltValue.max = 100000000000000000.000000;
s.LVVolt_DfltValue.gain = 1.000000;
s.LVVolt_DfltValue.offset = 0.000000;
s.LVVolt_DfltValue.exponent = 1.000000;
s.LVVolt_DfltValue.type = 'single';

s.LVVolt_FilterConst.value =  0.000000;
s.LVVolt_FilterConst.units = 'sec';
s.LVVolt_FilterConst.help = 'Filter time constant';
s.LVVolt_FilterConst.format = '4.2';
s.LVVolt_FilterConst.group = 'Sensors | LVVolt | LVVolt | LVVolt Config';
s.LVVolt_FilterConst.storage = 'FLASH';
s.LVVolt_FilterConst.access = uint8(hex2dec('ff'));
s.LVVolt_FilterConst.min = -100000000000000000.000000;
s.LVVolt_FilterConst.max = 100000000000000000.000000;
s.LVVolt_FilterConst.gain = 1.000000;
s.LVVolt_FilterConst.offset = 0.000000;
s.LVVolt_FilterConst.exponent = 1.000000;
s.LVVolt_FilterConst.type = 'single';

s.LVVolt_Gain.value =  0.041300;
s.LVVolt_Gain.units = 'V/ADC';
s.LVVolt_Gain.help = 'Scaling from A/D counts to engineering units';
s.LVVolt_Gain.format = '5.4';
s.LVVolt_Gain.group = 'Sensors | LVVolt | LVVolt | LVVolt Config';
s.LVVolt_Gain.storage = 'FLASH';
s.LVVolt_Gain.access = uint8(hex2dec('ff'));
s.LVVolt_Gain.min = -100000000000000000.000000;
s.LVVolt_Gain.max = 100000000000000000.000000;
s.LVVolt_Gain.gain = 1.000000;
s.LVVolt_Gain.offset = 0.000000;
s.LVVolt_Gain.exponent = 1.000000;
s.LVVolt_Gain.type = 'single';

s.LVVolt_InputHiFltPos.value =  1020.000000;
s.LVVolt_InputHiFltPos.units = 'ADC';
s.LVVolt_InputHiFltPos.help = 'Maximum allowable input, indicating short or open circuit';
s.LVVolt_InputHiFltPos.format = '4.2';
s.LVVolt_InputHiFltPos.group = 'Sensors | LVVolt | LVVolt | LVVolt Config';
s.LVVolt_InputHiFltPos.storage = 'FLASH';
s.LVVolt_InputHiFltPos.access = uint8(hex2dec('ff'));
s.LVVolt_InputHiFltPos.min = -100000000000000000.000000;
s.LVVolt_InputHiFltPos.max = 100000000000000000.000000;
s.LVVolt_InputHiFltPos.gain = 1.000000;
s.LVVolt_InputHiFltPos.offset = 0.000000;
s.LVVolt_InputHiFltPos.exponent = 1.000000;
s.LVVolt_InputHiFltPos.type = 'single';

s.LVVolt_InputLoFltPos.value =  10.000000;
s.LVVolt_InputLoFltPos.units = 'ADC';
s.LVVolt_InputLoFltPos.help = 'Minimum allowable input, indicating short or open circuit';
s.LVVolt_InputLoFltPos.format = '4.2';
s.LVVolt_InputLoFltPos.group = 'Sensors | LVVolt | LVVolt | LVVolt Config';
s.LVVolt_InputLoFltPos.storage = 'FLASH';
s.LVVolt_InputLoFltPos.access = uint8(hex2dec('ff'));
s.LVVolt_InputLoFltPos.min = -100000000000000000.000000;
s.LVVolt_InputLoFltPos.max = 100000000000000000.000000;
s.LVVolt_InputLoFltPos.gain = 1.000000;
s.LVVolt_InputLoFltPos.offset = 0.000000;
s.LVVolt_InputLoFltPos.exponent = 1.000000;
s.LVVolt_InputLoFltPos.type = 'single';

s.LVVolt_Ofst.value =  0.000000;
s.LVVolt_Ofst.units = 'V';
s.LVVolt_Ofst.help = 'Offset after gain in engineering units';
s.LVVolt_Ofst.format = '4.2';
s.LVVolt_Ofst.group = 'Sensors | LVVolt | LVVolt | LVVolt Config';
s.LVVolt_Ofst.storage = 'FLASH';
s.LVVolt_Ofst.access = uint8(hex2dec('ff'));
s.LVVolt_Ofst.min = -100000000000000000.000000;
s.LVVolt_Ofst.max = 100000000000000000.000000;
s.LVVolt_Ofst.gain = 1.000000;
s.LVVolt_Ofst.offset = 0.000000;
s.LVVolt_Ofst.exponent = 1.000000;
s.LVVolt_Ofst.type = 'single';

s.MaxMainsCurrent.value =  16.000000;
s.MaxMainsCurrent.units = 'A';
s.MaxMainsCurrent.help = 'Maximum Mains Current the charger can draw';
s.MaxMainsCurrent.format = '4.2';
s.MaxMainsCurrent.group = 'BuckyWagon_01|Strategy|Control Strategy|ChargeController';
s.MaxMainsCurrent.storage = 'FLASH';
s.MaxMainsCurrent.access = uint8(hex2dec('ff'));
s.MaxMainsCurrent.min = 0.000000;
s.MaxMainsCurrent.max = 50.000000;
s.MaxMainsCurrent.gain = 1.000000;
s.MaxMainsCurrent.offset = 0.000000;
s.MaxMainsCurrent.exponent = 1.000000;
s.MaxMainsCurrent.type = 'single';

s.MaxTorque.value =  120.000000;
s.MaxTorque.units = '';
s.MaxTorque.help = '';
s.MaxTorque.format = '4.2';
s.MaxTorque.group = 'Actuators | Phoenix';
s.MaxTorque.storage = 'FLASH';
s.MaxTorque.access = uint8(hex2dec('ff'));
s.MaxTorque.min = -100000000000000000.000000;
s.MaxTorque.max = 100000000000000000.000000;
s.MaxTorque.gain = 1.000000;
s.MaxTorque.offset = 0.000000;
s.MaxTorque.exponent = 1.000000;
s.MaxTorque.type = 'single';

s.MC_En__Polarity.value =  0.000000;
s.MC_En__Polarity.units = 'bool';
s.MC_En__Polarity.help = 'Inverts the output of the actuator relative to the desired command - 0 = High True    1 = Low True';
s.MC_En__Polarity.format = '1.0';
s.MC_En__Polarity.group = 'Actuators | MC_Enable | MC_Enable | MC_Enable Config';
s.MC_En__Polarity.storage = 'FLASH';
s.MC_En__Polarity.access = uint8(hex2dec('ff'));
s.MC_En__Polarity.min = 0.000000;
s.MC_En__Polarity.max = 1.000000;
s.MC_En__Polarity.gain = 1.000000;
s.MC_En__Polarity.offset = 0.000000;
s.MC_En__Polarity.exponent = 1.000000;
s.MC_En__Polarity.type = 'uint8';

s.MC_Enable.value =  1.000000;
s.MC_Enable.units = '';
s.MC_Enable.help = '';
s.MC_Enable.format = '3.0';
s.MC_Enable.group = 'BuckyWagon_01|Strategy|Actuators';
s.MC_Enable.storage = 'FLASH';
s.MC_Enable.access = uint8(hex2dec('ff'));
s.MC_Enable.min = -128.000000;
s.MC_Enable.max = 127.000000;
s.MC_Enable.gain = 1.000000;
s.MC_Enable.offset = 0.000000;
s.MC_Enable.exponent = 1.000000;
s.MC_Enable.type = 'int8';
s.MC_Enable.enumeration = struct('name',{'Disabled','Enabled'},'value',{0,1});

s.MC_Enable_Pin.value =  12.000000;
s.MC_Enable_Pin.units = '';
s.MC_Enable_Pin.help = 'Digital output pin selection for DOut778p0001';
s.MC_Enable_Pin.format = '5.0';
s.MC_Enable_Pin.group = 'System | I/O Pins | Outputs Config';
s.MC_Enable_Pin.storage = 'FLASH';
s.MC_Enable_Pin.access = uint8(hex2dec('ff'));
s.MC_Enable_Pin.min = -32768.000000;
s.MC_Enable_Pin.max = 32767.000000;
s.MC_Enable_Pin.gain = 1.000000;
s.MC_Enable_Pin.offset = 0.000000;
s.MC_Enable_Pin.exponent = 1.000000;
s.MC_Enable_Pin.type = 'int16';
s.MC_Enable_Pin.enumeration = struct('name',{'(None)','FINJ1','FINJ2','FINJ3','FINJ4','FINJ5','FINJ6','FINJ7','FINJ8','FINJ9','FINJ10','FINJ11','FINJ12','TACH','LSD1','LSD2','LSD3','LSD4','LSD5','LSD6','LSD7','LSD8','LSD9','LSD10','EST 1','EST 2','EST 3','EST 4','EST 5','EST 6','EST 7','EST 8','EST 9','EST 10','EST 11','EST 12','EST 13','EST 14','EST 15','EST 16','MPRD'},'value',{-1,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52});

s.minTime.value =  1.500000;
s.minTime.units = 's';
s.minTime.help = 'Minimum time to display each fault name.';
s.minTime.format = '1.3';
s.minTime.group = 'BuckyWagon_01|Strategy|MiniViewDisplay|GetFaultName';
s.minTime.storage = 'FLASH';
s.minTime.access = uint8(hex2dec('ff'));
s.minTime.min = 0.000000;
s.minTime.max = 5.000000;
s.minTime.gain = 0.005000;
s.minTime.offset = 0.000000;
s.minTime.exponent = 1.000000;
s.minTime.type = 'uint16';

s.NonVolatileRestoreOnFirstStartup.value =  1.000000;
s.NonVolatileRestoreOnFirstStartup.units = '';
s.NonVolatileRestoreOnFirstStartup.help = 'Selects whether to restore from factory defaults the first time an application boots';
s.NonVolatileRestoreOnFirstStartup.format = '1.0';
s.NonVolatileRestoreOnFirstStartup.group = 'System | NonVolatile Storage | NonVolatile Storage Config';
s.NonVolatileRestoreOnFirstStartup.storage = 'FLASH';
s.NonVolatileRestoreOnFirstStartup.access = uint8(hex2dec('ff'));
s.NonVolatileRestoreOnFirstStartup.min = 0.000000;
s.NonVolatileRestoreOnFirstStartup.max = 1.000000;
s.NonVolatileRestoreOnFirstStartup.gain = 1.000000;
s.NonVolatileRestoreOnFirstStartup.offset = 0.000000;
s.NonVolatileRestoreOnFirstStartup.exponent = 1.000000;
s.NonVolatileRestoreOnFirstStartup.type = 'uint8';
s.NonVolatileRestoreOnFirstStartup.enumeration = struct('name',{'Load saved application values on next startup','Load factory defaults on next startup'},'value',{0,1});

s.NonVolatileRestoreOnStartup.value =  0.000000;
s.NonVolatileRestoreOnStartup.units = '';
s.NonVolatileRestoreOnStartup.help = 'Selects whether to restore from factory defaults on next startup';
s.NonVolatileRestoreOnStartup.format = '1.0';
s.NonVolatileRestoreOnStartup.group = 'System | NonVolatile Storage | NonVolatile Storage Config';
s.NonVolatileRestoreOnStartup.storage = 'FLASH';
s.NonVolatileRestoreOnStartup.access = uint8(hex2dec('ff'));
s.NonVolatileRestoreOnStartup.min = 0.000000;
s.NonVolatileRestoreOnStartup.max = 1.000000;
s.NonVolatileRestoreOnStartup.gain = 1.000000;
s.NonVolatileRestoreOnStartup.offset = 0.000000;
s.NonVolatileRestoreOnStartup.exponent = 1.000000;
s.NonVolatileRestoreOnStartup.type = 'uint8';
s.NonVolatileRestoreOnStartup.enumeration = struct('name',{'Load saved application values on next startup','Load factory defaults on next startup'},'value',{0,1});

s.offTime.value =  0.100000;
s.offTime.units = '%';
s.offTime.help = 'Switch must be released this long to press again.';
s.offTime.format = '1.3';
s.offTime.group = 'BuckyWagon_01|Strategy|Control Strategy|Reverse';
s.offTime.storage = 'FLASH';
s.offTime.access = uint8(hex2dec('ff'));
s.offTime.min = 0.000000;
s.offTime.max = 500000000000000.000000;
s.offTime.gain = 0.005000;
s.offTime.offset = 0.000000;
s.offTime.exponent = 1.000000;
s.offTime.type = 'single';

s.onTime.value =  0.050000;
s.onTime.units = '%';
s.onTime.help = 'Switch must be pressed this long.';
s.onTime.format = '1.3';
s.onTime.group = 'BuckyWagon_01|Strategy|Control Strategy|Reverse';
s.onTime.storage = 'FLASH';
s.onTime.access = uint8(hex2dec('ff'));
s.onTime.min = 0.000000;
s.onTime.max = 500000000000000.000000;
s.onTime.gain = 0.005000;
s.onTime.offset = 0.000000;
s.onTime.exponent = 1.000000;
s.onTime.type = 'single';

s.OveralRatio.value =  0.006940;
s.OveralRatio.units = 'mph/rpm';
s.OveralRatio.help = 'Used to calculate vehicle speed from motor speed';
s.OveralRatio.format = '1.4';
s.OveralRatio.group = 'BuckyWagon_01|Strategy|Virtual Sensors|Vehicle Speed';
s.OveralRatio.storage = 'FLASH';
s.OveralRatio.access = uint8(hex2dec('ff'));
s.OveralRatio.min = -100000000000000000.000000;
s.OveralRatio.max = 100000000000000000.000000;
s.OveralRatio.gain = 1.000000;
s.OveralRatio.offset = 0.000000;
s.OveralRatio.exponent = 1.000000;
s.OveralRatio.type = 'single';

s.PluggedInHistTime.value =  1.500000;
s.PluggedInHistTime.units = 's';
s.PluggedInHistTime.help = 'Historesis time for plugged in detection.';
s.PluggedInHistTime.format = '1.2';
s.PluggedInHistTime.group = 'BuckyWagon_01|Strategy|Sensors|Brusa Charger';
s.PluggedInHistTime.storage = 'FLASH';
s.PluggedInHistTime.access = uint8(hex2dec('ff'));
s.PluggedInHistTime.min = -500000000000000.000000;
s.PluggedInHistTime.max = 500000000000000.000000;
s.PluggedInHistTime.gain = 0.005000;
s.PluggedInHistTime.offset = 0.000000;
s.PluggedInHistTime.exponent = 1.000000;
s.PluggedInHistTime.type = 'single';

s.PluggedInMainsThes.value =  100.000000;
s.PluggedInMainsThes.units = 'V';
s.PluggedInMainsThes.help = 'Above this mains voltage the charger is plugged in.';
s.PluggedInMainsThes.format = '4.2';
s.PluggedInMainsThes.group = 'BuckyWagon_01|Strategy|Sensors|Brusa Charger';
s.PluggedInMainsThes.storage = 'FLASH';
s.PluggedInMainsThes.access = uint8(hex2dec('ff'));
s.PluggedInMainsThes.min = -100000000000000000.000000;
s.PluggedInMainsThes.max = 100000000000000000.000000;
s.PluggedInMainsThes.gain = 1.000000;
s.PluggedInMainsThes.offset = 0.000000;
s.PluggedInMainsThes.exponent = 1.000000;
s.PluggedInMainsThes.type = 'single';

s.PowerOut_Pin.value =  -1.000000;
s.PowerOut_Pin.units = '';
s.PowerOut_Pin.help = 'PWM output pin selection for PowerOut_Pin';
s.PowerOut_Pin.format = '5.0';
s.PowerOut_Pin.group = 'System | I/O Pins | Outputs Config';
s.PowerOut_Pin.storage = 'FLASH';
s.PowerOut_Pin.access = uint8(hex2dec('ff'));
s.PowerOut_Pin.min = -32768.000000;
s.PowerOut_Pin.max = 32767.000000;
s.PowerOut_Pin.gain = 1.000000;
s.PowerOut_Pin.offset = 0.000000;
s.PowerOut_Pin.exponent = 1.000000;
s.PowerOut_Pin.type = 'int16';
s.PowerOut_Pin.enumeration = struct('name',{'(None)','H1','H2','FINJ1','FINJ2','FINJ3','FINJ4','FINJ5','FINJ6','FINJ7','FINJ8','FINJ9','FINJ10','FINJ11','FINJ12','TACH','LSD1','LSD2','LSD3','LSD4','LSD5','LSD6','LSD7','LSD8','LSD9','LSD10','EST 1','EST 2','EST 3','EST 4','EST 5','EST 6','EST 7','EST 8','EST 9','EST 10','EST 11','EST 12','EST 13','EST 14','EST 15','EST 16','H3'},'value',{-1,1,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,107});

s.PwrOut_Gain.value =  0.003350;
s.PwrOut_Gain.units = 'Hz/W';
s.PwrOut_Gain.help = 'Scaling from engineering units to PWM frequency';
s.PwrOut_Gain.format = '4.2';
s.PwrOut_Gain.group = 'Actuators | Power | PowerOut | PowerOut Config';
s.PwrOut_Gain.storage = 'FLASH';
s.PwrOut_Gain.access = uint8(hex2dec('ff'));
s.PwrOut_Gain.min = -100000000000000000.000000;
s.PwrOut_Gain.max = 100000000000000000.000000;
s.PwrOut_Gain.gain = 1.000000;
s.PwrOut_Gain.offset = 0.000000;
s.PwrOut_Gain.exponent = 1.000000;
s.PwrOut_Gain.type = 'single';

s.PwrOut_MaxLimit.value =  36000.000000;
s.PwrOut_MaxLimit.units = 'Hz';
s.PwrOut_MaxLimit.help = 'Maximum limit of PWM frequency.';
s.PwrOut_MaxLimit.format = '4.2';
s.PwrOut_MaxLimit.group = 'Actuators | Power | PowerOut | PowerOut Config';
s.PwrOut_MaxLimit.storage = 'FLASH';
s.PwrOut_MaxLimit.access = uint8(hex2dec('ff'));
s.PwrOut_MaxLimit.min = -100000000000000000.000000;
s.PwrOut_MaxLimit.max = 100000000000000000.000000;
s.PwrOut_MaxLimit.gain = 1.000000;
s.PwrOut_MaxLimit.offset = 0.000000;
s.PwrOut_MaxLimit.exponent = 1.000000;
s.PwrOut_MaxLimit.type = 'single';

s.PwrOut_MinLimit.value =  0.000000;
s.PwrOut_MinLimit.units = 'Hz';
s.PwrOut_MinLimit.help = 'Minimum limit of PWM frequency.';
s.PwrOut_MinLimit.format = '4.2';
s.PwrOut_MinLimit.group = 'Actuators | Power | PowerOut | PowerOut Config';
s.PwrOut_MinLimit.storage = 'FLASH';
s.PwrOut_MinLimit.access = uint8(hex2dec('ff'));
s.PwrOut_MinLimit.min = -100000000000000000.000000;
s.PwrOut_MinLimit.max = 100000000000000000.000000;
s.PwrOut_MinLimit.gain = 1.000000;
s.PwrOut_MinLimit.offset = 0.000000;
s.PwrOut_MinLimit.exponent = 1.000000;
s.PwrOut_MinLimit.type = 'single';

s.PwrOut_Offset.value =  0.000000;
s.PwrOut_Offset.units = 'Hz';
s.PwrOut_Offset.help = 'Offset from engineering units to PWM frequency';
s.PwrOut_Offset.format = '4.2';
s.PwrOut_Offset.group = 'Actuators | Power | PowerOut | PowerOut Config';
s.PwrOut_Offset.storage = 'FLASH';
s.PwrOut_Offset.access = uint8(hex2dec('ff'));
s.PwrOut_Offset.min = -100000000000000000.000000;
s.PwrOut_Offset.max = 100000000000000000.000000;
s.PwrOut_Offset.gain = 1.000000;
s.PwrOut_Offset.offset = 0.000000;
s.PwrOut_Offset.exponent = 1.000000;
s.PwrOut_Offset.type = 'single';

s.PwrOut_PWM.value =  50.000000;
s.PwrOut_PWM.units = '%';
s.PwrOut_PWM.help = 'Duty Cycle of PWM output';
s.PwrOut_PWM.format = '5.0';
s.PwrOut_PWM.group = 'Actuators | Power | PowerOut | PowerOut Config';
s.PwrOut_PWM.storage = 'FLASH';
s.PwrOut_PWM.access = uint8(hex2dec('ff'));
s.PwrOut_PWM.min = 0.000000;
s.PwrOut_PWM.max = 100.000000;
s.PwrOut_PWM.gain = 0.024414;
s.PwrOut_PWM.offset = 0.000000;
s.PwrOut_PWM.exponent = 1.000000;
s.PwrOut_PWM.type = 'int16';

s.RampIn_Rate.value =  0.000000;
s.RampIn_Rate.units = '%/5ms';
s.RampIn_Rate.help = 'Rate at which regen ramps in';
s.RampIn_Rate.format = '1.3';
s.RampIn_Rate.group = 'BuckyWagon_01|Strategy|Control Strategy|Regen';
s.RampIn_Rate.storage = 'FLASH';
s.RampIn_Rate.access = uint8(hex2dec('ff'));
s.RampIn_Rate.min = 0.000000;
s.RampIn_Rate.max = 2.000000;
s.RampIn_Rate.gain = 1.000000;
s.RampIn_Rate.offset = 0.000000;
s.RampIn_Rate.exponent = 1.000000;
s.RampIn_Rate.type = 'single';

s.RampOut_Rate.value =  0.000000;
s.RampOut_Rate.units = '%/5ms';
s.RampOut_Rate.help = 'Rate at which regen ramps out';
s.RampOut_Rate.format = '1.3';
s.RampOut_Rate.group = 'BuckyWagon_01|Strategy|Control Strategy|Regen';
s.RampOut_Rate.storage = 'FLASH';
s.RampOut_Rate.access = uint8(hex2dec('ff'));
s.RampOut_Rate.min = 0.000000;
s.RampOut_Rate.max = 2.000000;
s.RampOut_Rate.gain = 1.000000;
s.RampOut_Rate.offset = 0.000000;
s.RampOut_Rate.exponent = 1.000000;
s.RampOut_Rate.type = 'single';

s.Regen_Enable.value =  0.000000;
s.Regen_Enable.units = '';
s.Regen_Enable.help = 'Enables Regen Braking';
s.Regen_Enable.format = '1.0';
s.Regen_Enable.group = 'BuckyWagon_01|Strategy|Control Strategy';
s.Regen_Enable.storage = 'FLASH';
s.Regen_Enable.access = uint8(hex2dec('ff'));
s.Regen_Enable.min = 0.000000;
s.Regen_Enable.max = 1.000000;
s.Regen_Enable.gain = 1.000000;
s.Regen_Enable.offset = 0.000000;
s.Regen_Enable.exponent = 1.000000;
s.Regen_Enable.type = 'single';

s.Regen_Start.value =  0.000000;
s.Regen_Start.units = '%';
s.Regen_Start.help = 'Regen Starts above this position';
s.Regen_Start.format = '1.2';
s.Regen_Start.group = 'BuckyWagon_01|Strategy|Control Strategy|Regen';
s.Regen_Start.storage = 'FLASH';
s.Regen_Start.access = uint8(hex2dec('ff'));
s.Regen_Start.min = 0.000000;
s.Regen_Start.max = 1.000000;
s.Regen_Start.gain = 1.000000;
s.Regen_Start.offset = 0.000000;
s.Regen_Start.exponent = 1.000000;
s.Regen_Start.type = 'single';

s.RegenFull_Level.value =  0.000000;
s.RegenFull_Level.units = '%';
s.RegenFull_Level.help = 'Maximum Regen Level';
s.RegenFull_Level.format = '1.3';
s.RegenFull_Level.group = 'BuckyWagon_01|Strategy|Control Strategy|Regen';
s.RegenFull_Level.storage = 'FLASH';
s.RegenFull_Level.access = uint8(hex2dec('ff'));
s.RegenFull_Level.min = -1.000000;
s.RegenFull_Level.max = 0.000000;
s.RegenFull_Level.gain = 1.000000;
s.RegenFull_Level.offset = 0.000000;
s.RegenFull_Level.exponent = 1.000000;
s.RegenFull_Level.type = 'single';

s.RegenMaxSOC.value =  0.100000;
s.RegenMaxSOC.units = '%';
s.RegenMaxSOC.help = 'Max SOC to Regen At';
s.RegenMaxSOC.format = '1.2';
s.RegenMaxSOC.group = 'BuckyWagon_01|Strategy|Control Strategy|Regen|SOC_RampOut';
s.RegenMaxSOC.storage = 'FLASH';
s.RegenMaxSOC.access = uint8(hex2dec('ff'));
s.RegenMaxSOC.min = 0.000000;
s.RegenMaxSOC.max = 1.000000;
s.RegenMaxSOC.gain = 1.000000;
s.RegenMaxSOC.offset = 0.000000;
s.RegenMaxSOC.exponent = 1.000000;
s.RegenMaxSOC.type = 'single';

s.RegenSOCRampWidth.value =  0.100000;
s.RegenSOCRampWidth.units = '%';
s.RegenSOCRampWidth.help = 'Regen ramps out this fast over max SOC';
s.RegenSOCRampWidth.format = '1.3';
s.RegenSOCRampWidth.group = 'BuckyWagon_01|Strategy|Control Strategy|Regen|SOC_RampOut';
s.RegenSOCRampWidth.storage = 'FLASH';
s.RegenSOCRampWidth.access = uint8(hex2dec('ff'));
s.RegenSOCRampWidth.min = 0.000000;
s.RegenSOCRampWidth.max = 1.000000;
s.RegenSOCRampWidth.gain = 1.000000;
s.RegenSOCRampWidth.offset = 0.000000;
s.RegenSOCRampWidth.exponent = 1.000000;
s.RegenSOCRampWidth.type = 'single';

s.RegenSpdRampStart.value =  0.000000;
s.RegenSpdRampStart.units = 'mph';
s.RegenSpdRampStart.help = 'Speed at which regen starts to ramp out';
s.RegenSpdRampStart.format = '4.2';
s.RegenSpdRampStart.group = 'BuckyWagon_01|Strategy|Control Strategy|Regen|speed_RampOut';
s.RegenSpdRampStart.storage = 'FLASH';
s.RegenSpdRampStart.access = uint8(hex2dec('ff'));
s.RegenSpdRampStart.min = 0.000000;
s.RegenSpdRampStart.max = 5000.000000;
s.RegenSpdRampStart.gain = 1.000000;
s.RegenSpdRampStart.offset = 0.000000;
s.RegenSpdRampStart.exponent = 1.000000;
s.RegenSpdRampStart.type = 'single';

s.RegenSpdRampStop.value =  0.000000;
s.RegenSpdRampStop.units = 'mph';
s.RegenSpdRampStop.help = 'Speed at which regen is ramped out';
s.RegenSpdRampStop.format = '4.2';
s.RegenSpdRampStop.group = 'BuckyWagon_01|Strategy|Control Strategy|Regen|speed_RampOut';
s.RegenSpdRampStop.storage = 'FLASH';
s.RegenSpdRampStop.access = uint8(hex2dec('ff'));
s.RegenSpdRampStop.min = 0.000000;
s.RegenSpdRampStop.max = 5000.000000;
s.RegenSpdRampStop.gain = 1.000000;
s.RegenSpdRampStop.offset = 0.000000;
s.RegenSpdRampStop.exponent = 1.000000;
s.RegenSpdRampStop.type = 'single';

s.restartChargeVolt.value =  350.000000;
s.restartChargeVolt.units = 'V';
s.restartChargeVolt.help = 'Below this voltage a completed charge will restart.';
s.restartChargeVolt.format = '3.1';
s.restartChargeVolt.group = 'BuckyWagon_01|Strategy|Control Strategy|ChargeController';
s.restartChargeVolt.storage = 'FLASH';
s.restartChargeVolt.access = uint8(hex2dec('ff'));
s.restartChargeVolt.min = 0.000000;
s.restartChargeVolt.max = 500.000000;
s.restartChargeVolt.gain = 1.000000;
s.restartChargeVolt.offset = 0.000000;
s.restartChargeVolt.exponent = 1.000000;
s.restartChargeVolt.type = 'single';

s.revAccThres.value =  0.020000;
s.revAccThres.units = '%';
s.revAccThres.help = 'Accelerator must be below this to switch Fwd->Rev';
s.revAccThres.format = '4.2';
s.revAccThres.group = 'BuckyWagon_01|Strategy|Control Strategy|Reverse';
s.revAccThres.storage = 'FLASH';
s.revAccThres.access = uint8(hex2dec('ff'));
s.revAccThres.min = 0.000000;
s.revAccThres.max = 1.000000;
s.revAccThres.gain = 1.000000;
s.revAccThres.offset = 0.000000;
s.revAccThres.exponent = 1.000000;
s.revAccThres.type = 'single';

s.Reverse_Polarity.value =  1.000000;
s.Reverse_Polarity.units = 'bool';
s.Reverse_Polarity.help = '0 = High True    1 = Low True';
s.Reverse_Polarity.format = '1.0';
s.Reverse_Polarity.group = 'Sensors | Reverse | Reverse_Switch | Reverse_Switch Config';
s.Reverse_Polarity.storage = 'FLASH';
s.Reverse_Polarity.access = uint8(hex2dec('ff'));
s.Reverse_Polarity.min = 0.000000;
s.Reverse_Polarity.max = 1.000000;
s.Reverse_Polarity.gain = 1.000000;
s.Reverse_Polarity.offset = 0.000000;
s.Reverse_Polarity.exponent = 1.000000;
s.Reverse_Polarity.type = 'uint8';

s.Reverse_Switch_Pin.value =  64.000000;
s.Reverse_Switch_Pin.units = '';
s.Reverse_Switch_Pin.help = 'Analog input pin selection for Reverse_Switch_Pin';
s.Reverse_Switch_Pin.format = '5.0';
s.Reverse_Switch_Pin.group = 'System | I/O Pins | Inputs Config';
s.Reverse_Switch_Pin.storage = 'FLASH';
s.Reverse_Switch_Pin.access = uint8(hex2dec('ff'));
s.Reverse_Switch_Pin.min = -32768.000000;
s.Reverse_Switch_Pin.max = 32767.000000;
s.Reverse_Switch_Pin.gain = 1.000000;
s.Reverse_Switch_Pin.offset = 0.000000;
s.Reverse_Switch_Pin.exponent = 1.000000;
s.Reverse_Switch_Pin.type = 'int16';
s.Reverse_Switch_Pin.enumeration = struct('name',{'(None)','ECUP','DRVP','XDRP','AN1M','AN2M','AN3M','AN4M','AN5M','AN6M','AN7M','AN8M','AN9M','AN10M','AN11M','AN12M','AN13M','AN14M','AN15M','AN16M','AN17M','AN18M','AN19M','AN20M','AN21M','AN22M','AN23M','AN24M','AN25M','AN26M','AN27M','AN28M','AN29M','AN30M','AN31M','AN32M','AN33M','AN34M','O2A','O2B','XDRP_B','REF_14V'},'value',{-1,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,143});

s.Reverse_Switch_Pin_ref.value =  0.000000;
s.Reverse_Switch_Pin_ref.units = '';
s.Reverse_Switch_Pin_ref.help = 'Reference Voltage Selection';
s.Reverse_Switch_Pin_ref.format = '3.0';
s.Reverse_Switch_Pin_ref.group = 'System | I/O Pins | Inputs Config';
s.Reverse_Switch_Pin_ref.storage = 'FLASH';
s.Reverse_Switch_Pin_ref.access = uint8(hex2dec('ff'));
s.Reverse_Switch_Pin_ref.min = 0.000000;
s.Reverse_Switch_Pin_ref.max = 255.000000;
s.Reverse_Switch_Pin_ref.gain = 1.000000;
s.Reverse_Switch_Pin_ref.offset = 0.000000;
s.Reverse_Switch_Pin_ref.exponent = 1.000000;
s.Reverse_Switch_Pin_ref.type = 'uint8';
s.Reverse_Switch_Pin_ref.enumeration = struct('name',{'5V','2.7V'},'value',{0,1});

s.Reverse_SwitchPt.value =  500.000000;
s.Reverse_SwitchPt.units = 'ADC';
s.Reverse_SwitchPt.help = 'Defines switch point in ADC units boolean conversion';
s.Reverse_SwitchPt.format = '4.2';
s.Reverse_SwitchPt.group = 'Sensors | Reverse | Reverse_Switch | Reverse_Switch Config';
s.Reverse_SwitchPt.storage = 'FLASH';
s.Reverse_SwitchPt.access = uint8(hex2dec('ff'));
s.Reverse_SwitchPt.min = -100000000000000000.000000;
s.Reverse_SwitchPt.max = 100000000000000000.000000;
s.Reverse_SwitchPt.gain = 1.000000;
s.Reverse_SwitchPt.offset = 0.000000;
s.Reverse_SwitchPt.exponent = 1.000000;
s.Reverse_SwitchPt.type = 'single';

s.ReverseDerate.value =  -1.000000;
s.ReverseDerate.units = '%';
s.ReverseDerate.help = 'Torque Derating Factor in reverse';
s.ReverseDerate.format = '4.2';
s.ReverseDerate.group = 'BuckyWagon_01|Strategy|Control Strategy|Reverse';
s.ReverseDerate.storage = 'FLASH';
s.ReverseDerate.access = uint8(hex2dec('ff'));
s.ReverseDerate.min = -1.000000;
s.ReverseDerate.max = 0.000000;
s.ReverseDerate.gain = 1.000000;
s.ReverseDerate.offset = 0.000000;
s.ReverseDerate.exponent = 1.000000;
s.ReverseDerate.type = 'single';

s.ReverseIndFlash_Period.value =  0.750000;
s.ReverseIndFlash_Period.units = 's';
s.ReverseIndFlash_Period.help = 'Period for the flashing reverse indicator.';
s.ReverseIndFlash_Period.format = '1.3';
s.ReverseIndFlash_Period.group = 'BuckyWagon_01|Strategy|Actuators|ReverseInd';
s.ReverseIndFlash_Period.storage = 'FLASH';
s.ReverseIndFlash_Period.access = uint8(hex2dec('ff'));
s.ReverseIndFlash_Period.min = 0.000000;
s.ReverseIndFlash_Period.max = 100.000000;
s.ReverseIndFlash_Period.gain = 0.005000;
s.ReverseIndFlash_Period.offset = 0.000000;
s.ReverseIndFlash_Period.exponent = 1.000000;
s.ReverseIndFlash_Period.type = 'int16';

s.ReverseOut_Pin.value =  17.000000;
s.ReverseOut_Pin.units = '';
s.ReverseOut_Pin.help = 'Digital output pin selection for DOut779p0001';
s.ReverseOut_Pin.format = '5.0';
s.ReverseOut_Pin.group = 'System | I/O Pins | Outputs Config';
s.ReverseOut_Pin.storage = 'FLASH';
s.ReverseOut_Pin.access = uint8(hex2dec('ff'));
s.ReverseOut_Pin.min = -32768.000000;
s.ReverseOut_Pin.max = 32767.000000;
s.ReverseOut_Pin.gain = 1.000000;
s.ReverseOut_Pin.offset = 0.000000;
s.ReverseOut_Pin.exponent = 1.000000;
s.ReverseOut_Pin.type = 'int16';
s.ReverseOut_Pin.enumeration = struct('name',{'(None)','FINJ1','FINJ2','FINJ3','FINJ4','FINJ5','FINJ6','FINJ7','FINJ8','FINJ9','FINJ10','FINJ11','FINJ12','TACH','LSD1','LSD2','LSD3','LSD4','LSD5','LSD6','LSD7','LSD8','LSD9','LSD10','EST 1','EST 2','EST 3','EST 4','EST 5','EST 6','EST 7','EST 8','EST 9','EST 10','EST 11','EST 12','EST 13','EST 14','EST 15','EST 16','MPRD'},'value',{-1,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52});

s.RevIndType.value =  1.000000;
s.RevIndType.units = '';
s.RevIndType.help = 'Mode for Reverse Indicator';
s.RevIndType.format = '3.0';
s.RevIndType.group = 'BuckyWagon_01|Strategy|Actuators|ReverseInd';
s.RevIndType.storage = 'FLASH';
s.RevIndType.access = uint8(hex2dec('ff'));
s.RevIndType.min = 0.000000;
s.RevIndType.max = 100.000000;
s.RevIndType.gain = 1.000000;
s.RevIndType.offset = 0.000000;
s.RevIndType.exponent = 1.000000;
s.RevIndType.type = 'uint8';
s.RevIndType.enumeration = struct('name',{'Flash','Solid'},'value',{0,1});

s.RevOut__Polarity.value =  0.000000;
s.RevOut__Polarity.units = 'bool';
s.RevOut__Polarity.help = 'Inverts the output of the actuator relative to the desired command - 0 = High True    1 = Low True';
s.RevOut__Polarity.format = '1.0';
s.RevOut__Polarity.group = 'Actuators | Reverse | ReverseOut | ReverseOut Config';
s.RevOut__Polarity.storage = 'FLASH';
s.RevOut__Polarity.access = uint8(hex2dec('ff'));
s.RevOut__Polarity.min = 0.000000;
s.RevOut__Polarity.max = 1.000000;
s.RevOut__Polarity.gain = 1.000000;
s.RevOut__Polarity.offset = 0.000000;
s.RevOut__Polarity.exponent = 1.000000;
s.RevOut__Polarity.type = 'uint8';

s.revSpdThres.value =  5.000000;
s.revSpdThres.units = 'mph';
s.revSpdThres.help = 'Must be below this speed to switch Fwd->Rev.';
s.revSpdThres.format = '4.2';
s.revSpdThres.group = 'BuckyWagon_01|Strategy|Control Strategy|Reverse';
s.revSpdThres.storage = 'FLASH';
s.revSpdThres.access = uint8(hex2dec('ff'));
s.revSpdThres.min = 0.000000;
s.revSpdThres.max = 100000000000000000.000000;
s.revSpdThres.gain = 1.000000;
s.revSpdThres.offset = 0.000000;
s.revSpdThres.exponent = 1.000000;
s.revSpdThres.type = 'single';

s.scrollTime.value =  0.200000;
s.scrollTime.units = 's';
s.scrollTime.help = 'Time to spend on each view of the scroll';
s.scrollTime.format = '1.3';
s.scrollTime.group = 'BuckyWagon_01|Strategy|MiniViewDisplay|GetFaultName';
s.scrollTime.storage = 'FLASH';
s.scrollTime.access = uint8(hex2dec('ff'));
s.scrollTime.min = 0.000000;
s.scrollTime.max = 5.000000;
s.scrollTime.gain = 0.005000;
s.scrollTime.offset = 0.000000;
s.scrollTime.exponent = 1.000000;
s.scrollTime.type = 'uint16';

s.SOC_Dead.value =  0.030000;
s.SOC_Dead.units = '%';
s.SOC_Dead.help = 'Below this SOC a Batt Dead fault will occur.';
s.SOC_Dead.format = '1.3';
s.SOC_Dead.group = 'BuckyWagon_01|Strategy|Virtual Sensors|Batt SOC';
s.SOC_Dead.storage = 'FLASH';
s.SOC_Dead.access = uint8(hex2dec('ff'));
s.SOC_Dead.min = 0.000000;
s.SOC_Dead.max = 1.000000;
s.SOC_Dead.gain = 1.000000;
s.SOC_Dead.offset = 0.000000;
s.SOC_Dead.exponent = 1.000000;
s.SOC_Dead.type = 'single';

s.SOC_Flash.value =  0.200000;
s.SOC_Flash.units = '%';
s.SOC_Flash.help = 'At or below this SOC the battery light will flash.';
s.SOC_Flash.format = '4.2';
s.SOC_Flash.group = 'BuckyWagon_01|Strategy|Actuators|BattIndicator';
s.SOC_Flash.storage = 'FLASH';
s.SOC_Flash.access = uint8(hex2dec('ff'));
s.SOC_Flash.min = -100000000000000000.000000;
s.SOC_Flash.max = 100000000000000000.000000;
s.SOC_Flash.gain = 1.000000;
s.SOC_Flash.offset = 0.000000;
s.SOC_Flash.exponent = 1.000000;
s.SOC_Flash.type = 'single';

s.SOC_Solid.value =  0.100000;
s.SOC_Solid.units = '%';
s.SOC_Solid.help = 'At or below this SOC the battery light will be solid.';
s.SOC_Solid.format = '4.2';
s.SOC_Solid.group = 'BuckyWagon_01|Strategy|Actuators|BattIndicator';
s.SOC_Solid.storage = 'FLASH';
s.SOC_Solid.access = uint8(hex2dec('ff'));
s.SOC_Solid.min = -100000000000000000.000000;
s.SOC_Solid.max = 100000000000000000.000000;
s.SOC_Solid.gain = 1.000000;
s.SOC_Solid.offset = 0.000000;
s.SOC_Solid.exponent = 1.000000;
s.SOC_Solid.type = 'single';

s.SOCOut_Gain.value =  1.000000;
s.SOCOut_Gain.units = 'Hz/%';
s.SOCOut_Gain.help = 'Scaling from engineering units to PWM frequency';
s.SOCOut_Gain.format = '4.2';
s.SOCOut_Gain.group = 'Actuators | SOC | SOCOut | SOCOut Config';
s.SOCOut_Gain.storage = 'FLASH';
s.SOCOut_Gain.access = uint8(hex2dec('ff'));
s.SOCOut_Gain.min = -100000000000000000.000000;
s.SOCOut_Gain.max = 100000000000000000.000000;
s.SOCOut_Gain.gain = 1.000000;
s.SOCOut_Gain.offset = 0.000000;
s.SOCOut_Gain.exponent = 1.000000;
s.SOCOut_Gain.type = 'single';

s.SOCOut_MaxLimit.value =  100.000000;
s.SOCOut_MaxLimit.units = 'Hz';
s.SOCOut_MaxLimit.help = 'Maximum limit of PWM frequency.';
s.SOCOut_MaxLimit.format = '4.2';
s.SOCOut_MaxLimit.group = 'Actuators | SOC | SOCOut | SOCOut Config';
s.SOCOut_MaxLimit.storage = 'FLASH';
s.SOCOut_MaxLimit.access = uint8(hex2dec('ff'));
s.SOCOut_MaxLimit.min = -100000000000000000.000000;
s.SOCOut_MaxLimit.max = 100000000000000000.000000;
s.SOCOut_MaxLimit.gain = 1.000000;
s.SOCOut_MaxLimit.offset = 0.000000;
s.SOCOut_MaxLimit.exponent = 1.000000;
s.SOCOut_MaxLimit.type = 'single';

s.SOCOut_MinLimit.value =  0.000000;
s.SOCOut_MinLimit.units = 'Hz';
s.SOCOut_MinLimit.help = 'Minimum limit of PWM frequency.';
s.SOCOut_MinLimit.format = '4.2';
s.SOCOut_MinLimit.group = 'Actuators | SOC | SOCOut | SOCOut Config';
s.SOCOut_MinLimit.storage = 'FLASH';
s.SOCOut_MinLimit.access = uint8(hex2dec('ff'));
s.SOCOut_MinLimit.min = -100000000000000000.000000;
s.SOCOut_MinLimit.max = 100000000000000000.000000;
s.SOCOut_MinLimit.gain = 1.000000;
s.SOCOut_MinLimit.offset = 0.000000;
s.SOCOut_MinLimit.exponent = 1.000000;
s.SOCOut_MinLimit.type = 'single';

s.SOCOut_Offset.value =  0.000000;
s.SOCOut_Offset.units = 'Hz';
s.SOCOut_Offset.help = 'Offset from engineering units to PWM frequency';
s.SOCOut_Offset.format = '4.2';
s.SOCOut_Offset.group = 'Actuators | SOC | SOCOut | SOCOut Config';
s.SOCOut_Offset.storage = 'FLASH';
s.SOCOut_Offset.access = uint8(hex2dec('ff'));
s.SOCOut_Offset.min = -100000000000000000.000000;
s.SOCOut_Offset.max = 100000000000000000.000000;
s.SOCOut_Offset.gain = 1.000000;
s.SOCOut_Offset.offset = 0.000000;
s.SOCOut_Offset.exponent = 1.000000;
s.SOCOut_Offset.type = 'single';

s.SOCOut_Pin.value =  -1.000000;
s.SOCOut_Pin.units = '';
s.SOCOut_Pin.help = 'PWM output pin selection for SOCOut_Pin';
s.SOCOut_Pin.format = '5.0';
s.SOCOut_Pin.group = 'System | I/O Pins | Outputs Config';
s.SOCOut_Pin.storage = 'FLASH';
s.SOCOut_Pin.access = uint8(hex2dec('ff'));
s.SOCOut_Pin.min = -32768.000000;
s.SOCOut_Pin.max = 32767.000000;
s.SOCOut_Pin.gain = 1.000000;
s.SOCOut_Pin.offset = 0.000000;
s.SOCOut_Pin.exponent = 1.000000;
s.SOCOut_Pin.type = 'int16';
s.SOCOut_Pin.enumeration = struct('name',{'(None)','H1','H2','FINJ1','FINJ2','FINJ3','FINJ4','FINJ5','FINJ6','FINJ7','FINJ8','FINJ9','FINJ10','FINJ11','FINJ12','TACH','LSD1','LSD2','LSD3','LSD4','LSD5','LSD6','LSD7','LSD8','LSD9','LSD10','EST 1','EST 2','EST 3','EST 4','EST 5','EST 6','EST 7','EST 8','EST 9','EST 10','EST 11','EST 12','EST 13','EST 14','EST 15','EST 16','H3'},'value',{-1,1,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,107});

s.SOCOut_PWM.value =  50.000000;
s.SOCOut_PWM.units = '%';
s.SOCOut_PWM.help = 'Duty Cycle of PWM output';
s.SOCOut_PWM.format = '5.0';
s.SOCOut_PWM.group = 'Actuators | SOC | SOCOut | SOCOut Config';
s.SOCOut_PWM.storage = 'FLASH';
s.SOCOut_PWM.access = uint8(hex2dec('ff'));
s.SOCOut_PWM.min = 0.000000;
s.SOCOut_PWM.max = 100.000000;
s.SOCOut_PWM.gain = 0.024414;
s.SOCOut_PWM.offset = 0.000000;
s.SOCOut_PWM.exponent = 1.000000;
s.SOCOut_PWM.type = 'int16';

s.Solectria_Enable_Delay.value =  2.000000;
s.Solectria_Enable_Delay.units = '';
s.Solectria_Enable_Delay.help = '';
s.Solectria_Enable_Delay.format = '1.2';
s.Solectria_Enable_Delay.group = 'BuckyWagon_01|Strategy|Control Strategy|Contacter Controller';
s.Solectria_Enable_Delay.storage = 'FLASH';
s.Solectria_Enable_Delay.access = uint8(hex2dec('ff'));
s.Solectria_Enable_Delay.min = 0.000000;
s.Solectria_Enable_Delay.max = 10.000000;
s.Solectria_Enable_Delay.gain = 1.000000;
s.Solectria_Enable_Delay.offset = 0.000000;
s.Solectria_Enable_Delay.exponent = 1.000000;
s.Solectria_Enable_Delay.type = 'single';

s.Solectria_Power_LSD__Polarity.value =  0.000000;
s.Solectria_Power_LSD__Polarity.units = 'bool';
s.Solectria_Power_LSD__Polarity.help = 'Inverts the output of the actuator relative to the desired command - 0 = High True    1 = Low True';
s.Solectria_Power_LSD__Polarity.format = '1.0';
s.Solectria_Power_LSD__Polarity.group = 'Actuators | Solectria Power LSD | Solectria_Power_LSD | Solectria_Power_LSD Config';
s.Solectria_Power_LSD__Polarity.storage = 'FLASH';
s.Solectria_Power_LSD__Polarity.access = uint8(hex2dec('ff'));
s.Solectria_Power_LSD__Polarity.min = 0.000000;
s.Solectria_Power_LSD__Polarity.max = 1.000000;
s.Solectria_Power_LSD__Polarity.gain = 1.000000;
s.Solectria_Power_LSD__Polarity.offset = 0.000000;
s.Solectria_Power_LSD__Polarity.exponent = 1.000000;
s.Solectria_Power_LSD__Polarity.type = 'uint8';

s.SolectriaPowerLSD_Pin.value =  -1.000000;
s.SolectriaPowerLSD_Pin.units = '';
s.SolectriaPowerLSD_Pin.help = 'Digital output pin selection for DOut785p0001';
s.SolectriaPowerLSD_Pin.format = '5.0';
s.SolectriaPowerLSD_Pin.group = 'System | I/O Pins | Outputs Config';
s.SolectriaPowerLSD_Pin.storage = 'FLASH';
s.SolectriaPowerLSD_Pin.access = uint8(hex2dec('ff'));
s.SolectriaPowerLSD_Pin.min = -32768.000000;
s.SolectriaPowerLSD_Pin.max = 32767.000000;
s.SolectriaPowerLSD_Pin.gain = 1.000000;
s.SolectriaPowerLSD_Pin.offset = 0.000000;
s.SolectriaPowerLSD_Pin.exponent = 1.000000;
s.SolectriaPowerLSD_Pin.type = 'int16';
s.SolectriaPowerLSD_Pin.enumeration = struct('name',{'(None)','FINJ1','FINJ2','FINJ3','FINJ4','FINJ5','FINJ6','FINJ7','FINJ8','FINJ9','FINJ10','FINJ11','FINJ12','TACH','LSD1','LSD2','LSD3','LSD4','LSD5','LSD6','LSD7','LSD8','LSD9','LSD10','EST 1','EST 2','EST 3','EST 4','EST 5','EST 6','EST 7','EST 8','EST 9','EST 10','EST 11','EST 12','EST 13','EST 14','EST 15','EST 16','MPRD'},'value',{-1,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52});

s.SpdOut_Gain.value =  6.985667;
s.SpdOut_Gain.units = 'Hz/mph';
s.SpdOut_Gain.help = 'Scaling from engineering units to PWM frequency';
s.SpdOut_Gain.format = '4.2';
s.SpdOut_Gain.group = 'Actuators | Speed | SpeedOut | SpeedOut Config';
s.SpdOut_Gain.storage = 'FLASH';
s.SpdOut_Gain.access = uint8(hex2dec('ff'));
s.SpdOut_Gain.min = -100000000000000000.000000;
s.SpdOut_Gain.max = 100000000000000000.000000;
s.SpdOut_Gain.gain = 1.000000;
s.SpdOut_Gain.offset = 0.000000;
s.SpdOut_Gain.exponent = 1.000000;
s.SpdOut_Gain.type = 'single';

s.SpdOut_MaxLimit.value =  10000.000000;
s.SpdOut_MaxLimit.units = 'Hz';
s.SpdOut_MaxLimit.help = 'Maximum limit of PWM frequency.';
s.SpdOut_MaxLimit.format = '4.2';
s.SpdOut_MaxLimit.group = 'Actuators | Speed | SpeedOut | SpeedOut Config';
s.SpdOut_MaxLimit.storage = 'FLASH';
s.SpdOut_MaxLimit.access = uint8(hex2dec('ff'));
s.SpdOut_MaxLimit.min = -100000000000000000.000000;
s.SpdOut_MaxLimit.max = 100000000000000000.000000;
s.SpdOut_MaxLimit.gain = 1.000000;
s.SpdOut_MaxLimit.offset = 0.000000;
s.SpdOut_MaxLimit.exponent = 1.000000;
s.SpdOut_MaxLimit.type = 'single';

s.SpdOut_MinLimit.value =  0.000000;
s.SpdOut_MinLimit.units = 'Hz';
s.SpdOut_MinLimit.help = 'Minimum limit of PWM frequency.';
s.SpdOut_MinLimit.format = '4.2';
s.SpdOut_MinLimit.group = 'Actuators | Speed | SpeedOut | SpeedOut Config';
s.SpdOut_MinLimit.storage = 'FLASH';
s.SpdOut_MinLimit.access = uint8(hex2dec('ff'));
s.SpdOut_MinLimit.min = -100000000000000000.000000;
s.SpdOut_MinLimit.max = 100000000000000000.000000;
s.SpdOut_MinLimit.gain = 1.000000;
s.SpdOut_MinLimit.offset = 0.000000;
s.SpdOut_MinLimit.exponent = 1.000000;
s.SpdOut_MinLimit.type = 'single';

s.SpdOut_Offset.value =  0.000000;
s.SpdOut_Offset.units = 'Hz';
s.SpdOut_Offset.help = 'Offset from engineering units to PWM frequency';
s.SpdOut_Offset.format = '4.2';
s.SpdOut_Offset.group = 'Actuators | Speed | SpeedOut | SpeedOut Config';
s.SpdOut_Offset.storage = 'FLASH';
s.SpdOut_Offset.access = uint8(hex2dec('ff'));
s.SpdOut_Offset.min = -100000000000000000.000000;
s.SpdOut_Offset.max = 100000000000000000.000000;
s.SpdOut_Offset.gain = 1.000000;
s.SpdOut_Offset.offset = 0.000000;
s.SpdOut_Offset.exponent = 1.000000;
s.SpdOut_Offset.type = 'single';

s.SpdOut_PWM.value =  50.000000;
s.SpdOut_PWM.units = '%';
s.SpdOut_PWM.help = 'Duty Cycle of PWM output';
s.SpdOut_PWM.format = '5.0';
s.SpdOut_PWM.group = 'Actuators | Speed | SpeedOut | SpeedOut Config';
s.SpdOut_PWM.storage = 'FLASH';
s.SpdOut_PWM.access = uint8(hex2dec('ff'));
s.SpdOut_PWM.min = 0.000000;
s.SpdOut_PWM.max = 100.000000;
s.SpdOut_PWM.gain = 0.024414;
s.SpdOut_PWM.offset = 0.000000;
s.SpdOut_PWM.exponent = 1.000000;
s.SpdOut_PWM.type = 'int16';

s.SpeedOut_Pin.value =  36.000000;
s.SpeedOut_Pin.units = '';
s.SpeedOut_Pin.help = 'PWM output pin selection for SpeedOut_Pin';
s.SpeedOut_Pin.format = '5.0';
s.SpeedOut_Pin.group = 'System | I/O Pins | Outputs Config';
s.SpeedOut_Pin.storage = 'FLASH';
s.SpeedOut_Pin.access = uint8(hex2dec('ff'));
s.SpeedOut_Pin.min = -32768.000000;
s.SpeedOut_Pin.max = 32767.000000;
s.SpeedOut_Pin.gain = 1.000000;
s.SpeedOut_Pin.offset = 0.000000;
s.SpeedOut_Pin.exponent = 1.000000;
s.SpeedOut_Pin.type = 'int16';
s.SpeedOut_Pin.enumeration = struct('name',{'(None)','H1','H2','FINJ1','FINJ2','FINJ3','FINJ4','FINJ5','FINJ6','FINJ7','FINJ8','FINJ9','FINJ10','FINJ11','FINJ12','TACH','LSD1','LSD2','LSD3','LSD4','LSD5','LSD6','LSD7','LSD8','LSD9','LSD10','EST 1','EST 2','EST 3','EST 4','EST 5','EST 6','EST 7','EST 8','EST 9','EST 10','EST 11','EST 12','EST 13','EST 14','EST 15','EST 16','H3'},'value',{-1,1,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,107});

s.StallSpd.value =  1.000000;
s.StallSpd.units = 'mph';
s.StallSpd.help = 'Below this vehicle speed is concidered locked rotor.';
s.StallSpd.format = '4.2';
s.StallSpd.group = 'BuckyWagon_01|Strategy|Control Strategy|Assist|StallTorqueFault';
s.StallSpd.storage = 'FLASH';
s.StallSpd.access = uint8(hex2dec('ff'));
s.StallSpd.min = 0.000000;
s.StallSpd.max = 100.000000;
s.StallSpd.gain = 1.000000;
s.StallSpd.offset = 0.000000;
s.StallSpd.exponent = 1.000000;
s.StallSpd.type = 'single';

s.StallTrqThres.value =  3.000000;
s.StallTrqThres.units = '% s';
s.StallTrqThres.help = '% seconds of torque allowed while speed is below thres.';
s.StallTrqThres.format = '4.2';
s.StallTrqThres.group = 'BuckyWagon_01|Strategy|Control Strategy|Assist|StallTorqueFault';
s.StallTrqThres.storage = 'FLASH';
s.StallTrqThres.access = uint8(hex2dec('ff'));
s.StallTrqThres.min = -100000000000000000.000000;
s.StallTrqThres.max = 100000000000000000.000000;
s.StallTrqThres.gain = 1.000000;
s.StallTrqThres.offset = 0.000000;
s.StallTrqThres.exponent = 1.000000;
s.StallTrqThres.type = 'single';

s.startupDelay.value =  1.500000;
s.startupDelay.units = 's';
s.startupDelay.help = 'Time to wait before drawing on the miniview.';
s.startupDelay.format = '1.3';
s.startupDelay.group = 'BuckyWagon_01|Strategy|MiniViewDisplay';
s.startupDelay.storage = 'FLASH';
s.startupDelay.access = uint8(hex2dec('ff'));
s.startupDelay.min = 0.000000;
s.startupDelay.max = 10.000000;
s.startupDelay.gain = 0.005000;
s.startupDelay.offset = 0.000000;
s.startupDelay.exponent = 1.000000;
s.startupDelay.type = 'uint16';

s.TempFlash_Period.value =  0.500000;
s.TempFlash_Period.units = 's';
s.TempFlash_Period.help = 'Period for the flashing check engine indicator.';
s.TempFlash_Period.format = '1.3';
s.TempFlash_Period.group = 'BuckyWagon_01|Strategy|Actuators|TempIndicator';
s.TempFlash_Period.storage = 'FLASH';
s.TempFlash_Period.access = uint8(hex2dec('ff'));
s.TempFlash_Period.min = 0.000000;
s.TempFlash_Period.max = 100.000000;
s.TempFlash_Period.gain = 0.005000;
s.TempFlash_Period.offset = 0.000000;
s.TempFlash_Period.exponent = 1.000000;
s.TempFlash_Period.type = 'int16';

s.TempInd__Polarity.value =  0.000000;
s.TempInd__Polarity.units = 'bool';
s.TempInd__Polarity.help = 'Inverts the output of the actuator relative to the desired command - 0 = High True    1 = Low True';
s.TempInd__Polarity.format = '1.0';
s.TempInd__Polarity.group = 'Actuators | TempInd | TempInd | TempInd Config';
s.TempInd__Polarity.storage = 'FLASH';
s.TempInd__Polarity.access = uint8(hex2dec('ff'));
s.TempInd__Polarity.min = 0.000000;
s.TempInd__Polarity.max = 1.000000;
s.TempInd__Polarity.gain = 1.000000;
s.TempInd__Polarity.offset = 0.000000;
s.TempInd__Polarity.exponent = 1.000000;
s.TempInd__Polarity.type = 'uint8';

s.TempInd_Pin.value =  13.000000;
s.TempInd_Pin.units = '';
s.TempInd_Pin.help = 'Digital output pin selection for DOut783p0001';
s.TempInd_Pin.format = '5.0';
s.TempInd_Pin.group = 'System | I/O Pins | Outputs Config';
s.TempInd_Pin.storage = 'FLASH';
s.TempInd_Pin.access = uint8(hex2dec('ff'));
s.TempInd_Pin.min = -32768.000000;
s.TempInd_Pin.max = 32767.000000;
s.TempInd_Pin.gain = 1.000000;
s.TempInd_Pin.offset = 0.000000;
s.TempInd_Pin.exponent = 1.000000;
s.TempInd_Pin.type = 'int16';
s.TempInd_Pin.enumeration = struct('name',{'(None)','FINJ1','FINJ2','FINJ3','FINJ4','FINJ5','FINJ6','FINJ7','FINJ8','FINJ9','FINJ10','FINJ11','FINJ12','TACH','LSD1','LSD2','LSD3','LSD4','LSD5','LSD6','LSD7','LSD8','LSD9','LSD10','EST 1','EST 2','EST 3','EST 4','EST 5','EST 6','EST 7','EST 8','EST 9','EST 10','EST 11','EST 12','EST 13','EST 14','EST 15','EST 16','MPRD'},'value',{-1,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52});

s.TorqueOut_Pin.value =  24.000000;
s.TorqueOut_Pin.units = '';
s.TorqueOut_Pin.help = 'PWM output pin selection for TorqueOut_Pin';
s.TorqueOut_Pin.format = '5.0';
s.TorqueOut_Pin.group = 'System | I/O Pins | Outputs Config';
s.TorqueOut_Pin.storage = 'FLASH';
s.TorqueOut_Pin.access = uint8(hex2dec('ff'));
s.TorqueOut_Pin.min = -32768.000000;
s.TorqueOut_Pin.max = 32767.000000;
s.TorqueOut_Pin.gain = 1.000000;
s.TorqueOut_Pin.offset = 0.000000;
s.TorqueOut_Pin.exponent = 1.000000;
s.TorqueOut_Pin.type = 'int16';
s.TorqueOut_Pin.enumeration = struct('name',{'(None)','H1','H2','FINJ1','FINJ2','FINJ3','FINJ4','FINJ5','FINJ6','FINJ7','FINJ8','FINJ9','FINJ10','FINJ11','FINJ12','TACH','LSD1','LSD2','LSD3','LSD4','LSD5','LSD6','LSD7','LSD8','LSD9','LSD10','EST 1','EST 2','EST 3','EST 4','EST 5','EST 6','EST 7','EST 8','EST 9','EST 10','EST 11','EST 12','EST 13','EST 14','EST 15','EST 16','H3'},'value',{-1,1,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,107});

s.TrackLubePump_CyclePeriod.value =  10.000000;
s.TrackLubePump_CyclePeriod.units = 's';
s.TrackLubePump_CyclePeriod.help = 'Period that track lube pump is cycled';
s.TrackLubePump_CyclePeriod.format = '4.2';
s.TrackLubePump_CyclePeriod.group = 'BuckyWagon_01|Strategy|Control Strategy|TrackLubePumpController';
s.TrackLubePump_CyclePeriod.storage = 'FLASH';
s.TrackLubePump_CyclePeriod.access = uint8(hex2dec('ff'));
s.TrackLubePump_CyclePeriod.min = 0.000000;
s.TrackLubePump_CyclePeriod.max = 100.000000;
s.TrackLubePump_CyclePeriod.gain = 1.000000;
s.TrackLubePump_CyclePeriod.offset = 0.000000;
s.TrackLubePump_CyclePeriod.exponent = 1.000000;
s.TrackLubePump_CyclePeriod.type = 'single';

s.TrackLubePump_DutyCycle.value =  100.000000;
s.TrackLubePump_DutyCycle.units = '%';
s.TrackLubePump_DutyCycle.help = 'Duty cycle to run pump at (when it is on)';
s.TrackLubePump_DutyCycle.format = '4.2';
s.TrackLubePump_DutyCycle.group = 'BuckyWagon_01|Strategy|Control Strategy|TrackLubePumpController';
s.TrackLubePump_DutyCycle.storage = 'FLASH';
s.TrackLubePump_DutyCycle.access = uint8(hex2dec('ff'));
s.TrackLubePump_DutyCycle.min = 0.000000;
s.TrackLubePump_DutyCycle.max = 100.000000;
s.TrackLubePump_DutyCycle.gain = 1.000000;
s.TrackLubePump_DutyCycle.offset = 0.000000;
s.TrackLubePump_DutyCycle.exponent = 1.000000;
s.TrackLubePump_DutyCycle.type = 'single';

s.TrackLubePump_MinSpeed.value =  5.000000;
s.TrackLubePump_MinSpeed.units = 'mph';
s.TrackLubePump_MinSpeed.help = 'Below this vehicle speed the track lube pump is disabled';
s.TrackLubePump_MinSpeed.format = '4.2';
s.TrackLubePump_MinSpeed.group = 'BuckyWagon_01|Strategy|Control Strategy|TrackLubePumpController';
s.TrackLubePump_MinSpeed.storage = 'FLASH';
s.TrackLubePump_MinSpeed.access = uint8(hex2dec('ff'));
s.TrackLubePump_MinSpeed.min = 0.000000;
s.TrackLubePump_MinSpeed.max = 100.000000;
s.TrackLubePump_MinSpeed.gain = 1.000000;
s.TrackLubePump_MinSpeed.offset = 0.000000;
s.TrackLubePump_MinSpeed.exponent = 1.000000;
s.TrackLubePump_MinSpeed.type = 'single';

s.TrackLubePump_OnTime.value =  1.000000;
s.TrackLubePump_OnTime.units = 's';
s.TrackLubePump_OnTime.help = 'Portion of each cycle that track lube pump is switched on';
s.TrackLubePump_OnTime.format = '4.2';
s.TrackLubePump_OnTime.group = 'BuckyWagon_01|Strategy|Control Strategy|TrackLubePumpController';
s.TrackLubePump_OnTime.storage = 'FLASH';
s.TrackLubePump_OnTime.access = uint8(hex2dec('ff'));
s.TrackLubePump_OnTime.min = 0.000000;
s.TrackLubePump_OnTime.max = 100.000000;
s.TrackLubePump_OnTime.gain = 1.000000;
s.TrackLubePump_OnTime.offset = 0.000000;
s.TrackLubePump_OnTime.exponent = 1.000000;
s.TrackLubePump_OnTime.type = 'single';

s.TrackLubePump_Pin.value =  -1.000000;
s.TrackLubePump_Pin.units = '';
s.TrackLubePump_Pin.help = 'PWM output pin selection for TrackLubePump_Pin';
s.TrackLubePump_Pin.format = '5.0';
s.TrackLubePump_Pin.group = 'System | I/O Pins | Outputs Config';
s.TrackLubePump_Pin.storage = 'FLASH';
s.TrackLubePump_Pin.access = uint8(hex2dec('ff'));
s.TrackLubePump_Pin.min = -32768.000000;
s.TrackLubePump_Pin.max = 32767.000000;
s.TrackLubePump_Pin.gain = 1.000000;
s.TrackLubePump_Pin.offset = 0.000000;
s.TrackLubePump_Pin.exponent = 1.000000;
s.TrackLubePump_Pin.type = 'int16';
s.TrackLubePump_Pin.enumeration = struct('name',{'(None)','H1','H2','FINJ1','FINJ2','FINJ3','FINJ4','FINJ5','FINJ6','FINJ7','FINJ8','FINJ9','FINJ10','FINJ11','FINJ12','TACH','LSD1','LSD2','LSD3','LSD4','LSD5','LSD6','LSD7','LSD8','LSD9','LSD10','EST 1','EST 2','EST 3','EST 4','EST 5','EST 6','EST 7','EST 8','EST 9','EST 10','EST 11','EST 12','EST 13','EST 14','EST 15','EST 16','H3'},'value',{-1,1,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,107});

s.TrackLubePumpOut_Frequency.value =  100.000000;
s.TrackLubePumpOut_Frequency.units = 'Hz';
s.TrackLubePumpOut_Frequency.help = 'Frequency of PWM output';
s.TrackLubePumpOut_Frequency.format = '4.2';
s.TrackLubePumpOut_Frequency.group = 'Actuators | TrackLubePump | TrackLubePumpOut | TrackLubePumpOut Config';
s.TrackLubePumpOut_Frequency.storage = 'FLASH';
s.TrackLubePumpOut_Frequency.access = uint8(hex2dec('ff'));
s.TrackLubePumpOut_Frequency.min = -100000000000000000.000000;
s.TrackLubePumpOut_Frequency.max = 100000000000000000.000000;
s.TrackLubePumpOut_Frequency.gain = 1.000000;
s.TrackLubePumpOut_Frequency.offset = 0.000000;
s.TrackLubePumpOut_Frequency.exponent = 1.000000;
s.TrackLubePumpOut_Frequency.type = 'single';

s.TrackLubePumpOut_Gain.value =  1.000000;
s.TrackLubePumpOut_Gain.units = '%/%';
s.TrackLubePumpOut_Gain.help = 'Scaling from engineering units to PWM duty cycle';
s.TrackLubePumpOut_Gain.format = '4.2';
s.TrackLubePumpOut_Gain.group = 'Actuators | TrackLubePump | TrackLubePumpOut | TrackLubePumpOut Config';
s.TrackLubePumpOut_Gain.storage = 'FLASH';
s.TrackLubePumpOut_Gain.access = uint8(hex2dec('ff'));
s.TrackLubePumpOut_Gain.min = -100000000000000000.000000;
s.TrackLubePumpOut_Gain.max = 100000000000000000.000000;
s.TrackLubePumpOut_Gain.gain = 1.000000;
s.TrackLubePumpOut_Gain.offset = 0.000000;
s.TrackLubePumpOut_Gain.exponent = 1.000000;
s.TrackLubePumpOut_Gain.type = 'single';

s.TrackLubePumpOut_MaxLimit.value =  100.000000;
s.TrackLubePumpOut_MaxLimit.units = '%';
s.TrackLubePumpOut_MaxLimit.help = 'Maximum limit of PWM signal.';
s.TrackLubePumpOut_MaxLimit.format = '4.2';
s.TrackLubePumpOut_MaxLimit.group = 'Actuators | TrackLubePump | TrackLubePumpOut | TrackLubePumpOut Config';
s.TrackLubePumpOut_MaxLimit.storage = 'FLASH';
s.TrackLubePumpOut_MaxLimit.access = uint8(hex2dec('ff'));
s.TrackLubePumpOut_MaxLimit.min = -100000000000000000.000000;
s.TrackLubePumpOut_MaxLimit.max = 100000000000000000.000000;
s.TrackLubePumpOut_MaxLimit.gain = 1.000000;
s.TrackLubePumpOut_MaxLimit.offset = 0.000000;
s.TrackLubePumpOut_MaxLimit.exponent = 1.000000;
s.TrackLubePumpOut_MaxLimit.type = 'single';

s.TrackLubePumpOut_MinLimit.value =  0.000000;
s.TrackLubePumpOut_MinLimit.units = '%';
s.TrackLubePumpOut_MinLimit.help = 'Minimum limit of PWM signal.';
s.TrackLubePumpOut_MinLimit.format = '4.2';
s.TrackLubePumpOut_MinLimit.group = 'Actuators | TrackLubePump | TrackLubePumpOut | TrackLubePumpOut Config';
s.TrackLubePumpOut_MinLimit.storage = 'FLASH';
s.TrackLubePumpOut_MinLimit.access = uint8(hex2dec('ff'));
s.TrackLubePumpOut_MinLimit.min = -100000000000000000.000000;
s.TrackLubePumpOut_MinLimit.max = 100000000000000000.000000;
s.TrackLubePumpOut_MinLimit.gain = 1.000000;
s.TrackLubePumpOut_MinLimit.offset = 0.000000;
s.TrackLubePumpOut_MinLimit.exponent = 1.000000;
s.TrackLubePumpOut_MinLimit.type = 'single';

s.TrackLubePumpOut_Offset.value =  0.000000;
s.TrackLubePumpOut_Offset.units = '%';
s.TrackLubePumpOut_Offset.help = 'Offset from engineering units to PWM duty cycle';
s.TrackLubePumpOut_Offset.format = '4.2';
s.TrackLubePumpOut_Offset.group = 'Actuators | TrackLubePump | TrackLubePumpOut | TrackLubePumpOut Config';
s.TrackLubePumpOut_Offset.storage = 'FLASH';
s.TrackLubePumpOut_Offset.access = uint8(hex2dec('ff'));
s.TrackLubePumpOut_Offset.min = -100000000000000000.000000;
s.TrackLubePumpOut_Offset.max = 100000000000000000.000000;
s.TrackLubePumpOut_Offset.gain = 1.000000;
s.TrackLubePumpOut_Offset.offset = 0.000000;
s.TrackLubePumpOut_Offset.exponent = 1.000000;
s.TrackLubePumpOut_Offset.type = 'single';

s.TrqOut_Gain.value =  3.340000;
s.TrqOut_Gain.units = 'Hz/Nm';
s.TrqOut_Gain.help = 'Scaling from engineering units to PWM frequency';
s.TrqOut_Gain.format = '4.2';
s.TrqOut_Gain.group = 'Actuators | Torque | TorqueOut | TorqueOut Config';
s.TrqOut_Gain.storage = 'FLASH';
s.TrqOut_Gain.access = uint8(hex2dec('ff'));
s.TrqOut_Gain.min = -100000000000000000.000000;
s.TrqOut_Gain.max = 100000000000000000.000000;
s.TrqOut_Gain.gain = 1.000000;
s.TrqOut_Gain.offset = 0.000000;
s.TrqOut_Gain.exponent = 1.000000;
s.TrqOut_Gain.type = 'single';

s.TrqOut_MaxLimit.value =  36000.000000;
s.TrqOut_MaxLimit.units = 'Hz';
s.TrqOut_MaxLimit.help = 'Maximum limit of PWM frequency.';
s.TrqOut_MaxLimit.format = '4.2';
s.TrqOut_MaxLimit.group = 'Actuators | Torque | TorqueOut | TorqueOut Config';
s.TrqOut_MaxLimit.storage = 'FLASH';
s.TrqOut_MaxLimit.access = uint8(hex2dec('ff'));
s.TrqOut_MaxLimit.min = -100000000000000000.000000;
s.TrqOut_MaxLimit.max = 100000000000000000.000000;
s.TrqOut_MaxLimit.gain = 1.000000;
s.TrqOut_MaxLimit.offset = 0.000000;
s.TrqOut_MaxLimit.exponent = 1.000000;
s.TrqOut_MaxLimit.type = 'single';

s.TrqOut_MinLimit.value =  0.000000;
s.TrqOut_MinLimit.units = 'Hz';
s.TrqOut_MinLimit.help = 'Minimum limit of PWM frequency.';
s.TrqOut_MinLimit.format = '4.2';
s.TrqOut_MinLimit.group = 'Actuators | Torque | TorqueOut | TorqueOut Config';
s.TrqOut_MinLimit.storage = 'FLASH';
s.TrqOut_MinLimit.access = uint8(hex2dec('ff'));
s.TrqOut_MinLimit.min = -100000000000000000.000000;
s.TrqOut_MinLimit.max = 100000000000000000.000000;
s.TrqOut_MinLimit.gain = 1.000000;
s.TrqOut_MinLimit.offset = 0.000000;
s.TrqOut_MinLimit.exponent = 1.000000;
s.TrqOut_MinLimit.type = 'single';

s.TrqOut_Offset.value =  0.000000;
s.TrqOut_Offset.units = 'Hz';
s.TrqOut_Offset.help = 'Offset from engineering units to PWM frequency';
s.TrqOut_Offset.format = '4.2';
s.TrqOut_Offset.group = 'Actuators | Torque | TorqueOut | TorqueOut Config';
s.TrqOut_Offset.storage = 'FLASH';
s.TrqOut_Offset.access = uint8(hex2dec('ff'));
s.TrqOut_Offset.min = -100000000000000000.000000;
s.TrqOut_Offset.max = 100000000000000000.000000;
s.TrqOut_Offset.gain = 1.000000;
s.TrqOut_Offset.offset = 0.000000;
s.TrqOut_Offset.exponent = 1.000000;
s.TrqOut_Offset.type = 'single';

s.TrqOut_PWM.value =  50.000000;
s.TrqOut_PWM.units = '%';
s.TrqOut_PWM.help = 'Duty Cycle of PWM output';
s.TrqOut_PWM.format = '5.0';
s.TrqOut_PWM.group = 'Actuators | Torque | TorqueOut | TorqueOut Config';
s.TrqOut_PWM.storage = 'FLASH';
s.TrqOut_PWM.access = uint8(hex2dec('ff'));
s.TrqOut_PWM.min = 0.000000;
s.TrqOut_PWM.max = 100.000000;
s.TrqOut_PWM.gain = 0.024414;
s.TrqOut_PWM.offset = 0.000000;
s.TrqOut_PWM.exponent = 1.000000;
s.TrqOut_PWM.type = 'int16';

s.VltOut_Gain.value =  1.000000;
s.VltOut_Gain.units = 'Hz/V';
s.VltOut_Gain.help = 'Scaling from engineering units to PWM frequency';
s.VltOut_Gain.format = '4.2';
s.VltOut_Gain.group = 'Actuators | Voltage | VoltageOut | VoltageOut Config';
s.VltOut_Gain.storage = 'FLASH';
s.VltOut_Gain.access = uint8(hex2dec('ff'));
s.VltOut_Gain.min = -100000000000000000.000000;
s.VltOut_Gain.max = 100000000000000000.000000;
s.VltOut_Gain.gain = 1.000000;
s.VltOut_Gain.offset = 0.000000;
s.VltOut_Gain.exponent = 1.000000;
s.VltOut_Gain.type = 'single';

s.VltOut_MaxLimit.value =  100.000000;
s.VltOut_MaxLimit.units = 'Hz';
s.VltOut_MaxLimit.help = 'Maximum limit of PWM frequency.';
s.VltOut_MaxLimit.format = '4.2';
s.VltOut_MaxLimit.group = 'Actuators | Voltage | VoltageOut | VoltageOut Config';
s.VltOut_MaxLimit.storage = 'FLASH';
s.VltOut_MaxLimit.access = uint8(hex2dec('ff'));
s.VltOut_MaxLimit.min = -100000000000000000.000000;
s.VltOut_MaxLimit.max = 100000000000000000.000000;
s.VltOut_MaxLimit.gain = 1.000000;
s.VltOut_MaxLimit.offset = 0.000000;
s.VltOut_MaxLimit.exponent = 1.000000;
s.VltOut_MaxLimit.type = 'single';

s.VltOut_MinLimit.value =  0.000000;
s.VltOut_MinLimit.units = 'Hz';
s.VltOut_MinLimit.help = 'Minimum limit of PWM frequency.';
s.VltOut_MinLimit.format = '4.2';
s.VltOut_MinLimit.group = 'Actuators | Voltage | VoltageOut | VoltageOut Config';
s.VltOut_MinLimit.storage = 'FLASH';
s.VltOut_MinLimit.access = uint8(hex2dec('ff'));
s.VltOut_MinLimit.min = -100000000000000000.000000;
s.VltOut_MinLimit.max = 100000000000000000.000000;
s.VltOut_MinLimit.gain = 1.000000;
s.VltOut_MinLimit.offset = 0.000000;
s.VltOut_MinLimit.exponent = 1.000000;
s.VltOut_MinLimit.type = 'single';

s.VltOut_Offset.value =  0.000000;
s.VltOut_Offset.units = 'Hz';
s.VltOut_Offset.help = 'Offset from engineering units to PWM frequency';
s.VltOut_Offset.format = '4.2';
s.VltOut_Offset.group = 'Actuators | Voltage | VoltageOut | VoltageOut Config';
s.VltOut_Offset.storage = 'FLASH';
s.VltOut_Offset.access = uint8(hex2dec('ff'));
s.VltOut_Offset.min = -100000000000000000.000000;
s.VltOut_Offset.max = 100000000000000000.000000;
s.VltOut_Offset.gain = 1.000000;
s.VltOut_Offset.offset = 0.000000;
s.VltOut_Offset.exponent = 1.000000;
s.VltOut_Offset.type = 'single';

s.VltOut_PWM.value =  50.000000;
s.VltOut_PWM.units = '%';
s.VltOut_PWM.help = 'Duty Cycle of PWM output';
s.VltOut_PWM.format = '5.0';
s.VltOut_PWM.group = 'Actuators | Voltage | VoltageOut | VoltageOut Config';
s.VltOut_PWM.storage = 'FLASH';
s.VltOut_PWM.access = uint8(hex2dec('ff'));
s.VltOut_PWM.min = 0.000000;
s.VltOut_PWM.max = 100.000000;
s.VltOut_PWM.gain = 0.024414;
s.VltOut_PWM.offset = 0.000000;
s.VltOut_PWM.exponent = 1.000000;
s.VltOut_PWM.type = 'int16';

s.VoltageOut_Pin.value =  -1.000000;
s.VoltageOut_Pin.units = '';
s.VoltageOut_Pin.help = 'PWM output pin selection for VoltageOut_Pin';
s.VoltageOut_Pin.format = '5.0';
s.VoltageOut_Pin.group = 'System | I/O Pins | Outputs Config';
s.VoltageOut_Pin.storage = 'FLASH';
s.VoltageOut_Pin.access = uint8(hex2dec('ff'));
s.VoltageOut_Pin.min = -32768.000000;
s.VoltageOut_Pin.max = 32767.000000;
s.VoltageOut_Pin.gain = 1.000000;
s.VoltageOut_Pin.offset = 0.000000;
s.VoltageOut_Pin.exponent = 1.000000;
s.VoltageOut_Pin.type = 'int16';
s.VoltageOut_Pin.enumeration = struct('name',{'(None)','H1','H2','FINJ1','FINJ2','FINJ3','FINJ4','FINJ5','FINJ6','FINJ7','FINJ8','FINJ9','FINJ10','FINJ11','FINJ12','TACH','LSD1','LSD2','LSD3','LSD4','LSD5','LSD6','LSD7','LSD8','LSD9','LSD10','EST 1','EST 2','EST 3','EST 4','EST 5','EST 6','EST 7','EST 8','EST 9','EST 10','EST 11','EST 12','EST 13','EST 14','EST 15','EST 16','H3'},'value',{-1,1,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,107});

s.WaterPump_Pin.value =  -1.000000;
s.WaterPump_Pin.units = '';
s.WaterPump_Pin.help = 'PWM output pin selection for WaterPump_Pin';
s.WaterPump_Pin.format = '5.0';
s.WaterPump_Pin.group = 'System | I/O Pins | Outputs Config';
s.WaterPump_Pin.storage = 'FLASH';
s.WaterPump_Pin.access = uint8(hex2dec('ff'));
s.WaterPump_Pin.min = -32768.000000;
s.WaterPump_Pin.max = 32767.000000;
s.WaterPump_Pin.gain = 1.000000;
s.WaterPump_Pin.offset = 0.000000;
s.WaterPump_Pin.exponent = 1.000000;
s.WaterPump_Pin.type = 'int16';
s.WaterPump_Pin.enumeration = struct('name',{'(None)','H1','H2','FINJ1','FINJ2','FINJ3','FINJ4','FINJ5','FINJ6','FINJ7','FINJ8','FINJ9','FINJ10','FINJ11','FINJ12','TACH','LSD1','LSD2','LSD3','LSD4','LSD5','LSD6','LSD7','LSD8','LSD9','LSD10','EST 1','EST 2','EST 3','EST 4','EST 5','EST 6','EST 7','EST 8','EST 9','EST 10','EST 11','EST 12','EST 13','EST 14','EST 15','EST 16','H3'},'value',{-1,1,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,107});

s.WtrPmpOut_Frequency.value =  100.000000;
s.WtrPmpOut_Frequency.units = 'Hz';
s.WtrPmpOut_Frequency.help = 'Frequency of PWM output';
s.WtrPmpOut_Frequency.format = '4.2';
s.WtrPmpOut_Frequency.group = 'Actuators | WaterPump | WaterPumpOut | WaterPumpOut Config';
s.WtrPmpOut_Frequency.storage = 'FLASH';
s.WtrPmpOut_Frequency.access = uint8(hex2dec('ff'));
s.WtrPmpOut_Frequency.min = -100000000000000000.000000;
s.WtrPmpOut_Frequency.max = 100000000000000000.000000;
s.WtrPmpOut_Frequency.gain = 1.000000;
s.WtrPmpOut_Frequency.offset = 0.000000;
s.WtrPmpOut_Frequency.exponent = 1.000000;
s.WtrPmpOut_Frequency.type = 'single';

s.WtrPmpOut_Gain.value =  1.000000;
s.WtrPmpOut_Gain.units = '%/%';
s.WtrPmpOut_Gain.help = 'Scaling from engineering units to PWM duty cycle';
s.WtrPmpOut_Gain.format = '4.2';
s.WtrPmpOut_Gain.group = 'Actuators | WaterPump | WaterPumpOut | WaterPumpOut Config';
s.WtrPmpOut_Gain.storage = 'FLASH';
s.WtrPmpOut_Gain.access = uint8(hex2dec('ff'));
s.WtrPmpOut_Gain.min = -100000000000000000.000000;
s.WtrPmpOut_Gain.max = 100000000000000000.000000;
s.WtrPmpOut_Gain.gain = 1.000000;
s.WtrPmpOut_Gain.offset = 0.000000;
s.WtrPmpOut_Gain.exponent = 1.000000;
s.WtrPmpOut_Gain.type = 'single';

s.WtrPmpOut_MaxLimit.value =  100.000000;
s.WtrPmpOut_MaxLimit.units = '%';
s.WtrPmpOut_MaxLimit.help = 'Maximum limit of PWM signal.';
s.WtrPmpOut_MaxLimit.format = '4.2';
s.WtrPmpOut_MaxLimit.group = 'Actuators | WaterPump | WaterPumpOut | WaterPumpOut Config';
s.WtrPmpOut_MaxLimit.storage = 'FLASH';
s.WtrPmpOut_MaxLimit.access = uint8(hex2dec('ff'));
s.WtrPmpOut_MaxLimit.min = -100000000000000000.000000;
s.WtrPmpOut_MaxLimit.max = 100000000000000000.000000;
s.WtrPmpOut_MaxLimit.gain = 1.000000;
s.WtrPmpOut_MaxLimit.offset = 0.000000;
s.WtrPmpOut_MaxLimit.exponent = 1.000000;
s.WtrPmpOut_MaxLimit.type = 'single';

s.WtrPmpOut_MinLimit.value =  0.000000;
s.WtrPmpOut_MinLimit.units = '%';
s.WtrPmpOut_MinLimit.help = 'Minimum limit of PWM signal.';
s.WtrPmpOut_MinLimit.format = '4.2';
s.WtrPmpOut_MinLimit.group = 'Actuators | WaterPump | WaterPumpOut | WaterPumpOut Config';
s.WtrPmpOut_MinLimit.storage = 'FLASH';
s.WtrPmpOut_MinLimit.access = uint8(hex2dec('ff'));
s.WtrPmpOut_MinLimit.min = -100000000000000000.000000;
s.WtrPmpOut_MinLimit.max = 100000000000000000.000000;
s.WtrPmpOut_MinLimit.gain = 1.000000;
s.WtrPmpOut_MinLimit.offset = 0.000000;
s.WtrPmpOut_MinLimit.exponent = 1.000000;
s.WtrPmpOut_MinLimit.type = 'single';

s.WtrPmpOut_Offset.value =  0.000000;
s.WtrPmpOut_Offset.units = '%';
s.WtrPmpOut_Offset.help = 'Offset from engineering units to PWM duty cycle';
s.WtrPmpOut_Offset.format = '4.2';
s.WtrPmpOut_Offset.group = 'Actuators | WaterPump | WaterPumpOut | WaterPumpOut Config';
s.WtrPmpOut_Offset.storage = 'FLASH';
s.WtrPmpOut_Offset.access = uint8(hex2dec('ff'));
s.WtrPmpOut_Offset.min = -100000000000000000.000000;
s.WtrPmpOut_Offset.max = 100000000000000000.000000;
s.WtrPmpOut_Offset.gain = 1.000000;
s.WtrPmpOut_Offset.offset = 0.000000;
s.WtrPmpOut_Offset.exponent = 1.000000;
s.WtrPmpOut_Offset.type = 'single';

s.project_id.value =  6.000000;
s.project_id.units = '';
s.project_id.help = 'This is the Platform ID used by the tools.';
s.project_id.format = '3.0';
s.project_id.group = 'System | System Config | Project Config';
s.project_id.storage = 'FLASH';
s.project_id.access = uint8(hex2dec('d5'));
s.project_id.min = 0.000000;
s.project_id.max = 255.000000;
s.project_id.gain = 1.000000;
s.project_id.offset = 0.000000;
s.project_id.exponent = 1.000000;
s.project_id.type = 'uint8';

s.project_id.value =  6.000000;
s.project_id.units = '';
s.project_id.help = 'This is the Platform ID used by the tools.';
s.project_id.format = '3.0';
s.project_id.group = 'System | System Config | Project Config';
s.project_id.storage = 'FLASH';
s.project_id.access = uint8(hex2dec('d5'));
s.project_id.min = 0.000000;
s.project_id.max = 255.000000;
s.project_id.gain = 1.000000;
s.project_id.offset = 0.000000;
s.project_id.exponent = 1.000000;
s.project_id.type = 'uint8';

s.project_id.value =  6.000000;
s.project_id.units = '';
s.project_id.help = 'This is the Platform ID used by the tools.';
s.project_id.format = '3.0';
s.project_id.group = 'System | System Config | Project Config';
s.project_id.storage = 'FLASH';
s.project_id.access = uint8(hex2dec('d5'));
s.project_id.min = 0.000000;
s.project_id.max = 255.000000;
s.project_id.gain = 1.000000;
s.project_id.offset = 0.000000;
s.project_id.exponent = 1.000000;
s.project_id.type = 'uint8';

s.project_id.value =  6.000000;
s.project_id.units = '';
s.project_id.help = 'This is the Platform ID used by the tools.';
s.project_id.format = '3.0';
s.project_id.group = 'System | System Config | Project Config';
s.project_id.storage = 'FLASH';
s.project_id.access = uint8(hex2dec('d5'));
s.project_id.min = 0.000000;
s.project_id.max = 255.000000;
s.project_id.gain = 1.000000;
s.project_id.offset = 0.000000;
s.project_id.exponent = 1.000000;
s.project_id.type = 'uint8';

s.project_id.value =  6.000000;
s.project_id.units = '';
s.project_id.help = 'This is the Platform ID used by the tools.';
s.project_id.format = '3.0';
s.project_id.group = 'System | System Config | Project Config';
s.project_id.storage = 'FLASH';
s.project_id.access = uint8(hex2dec('d5'));
s.project_id.min = 0.000000;
s.project_id.max = 255.000000;
s.project_id.gain = 1.000000;
s.project_id.offset = 0.000000;
s.project_id.exponent = 1.000000;
s.project_id.type = 'uint8';

s.project_id.value =  6.000000;
s.project_id.units = '';
s.project_id.help = 'This is the Platform ID used by the tools.';
s.project_id.format = '3.0';
s.project_id.group = 'System | System Config | Project Config';
s.project_id.storage = 'FLASH';
s.project_id.access = uint8(hex2dec('d5'));
s.project_id.min = 0.000000;
s.project_id.max = 255.000000;
s.project_id.gain = 1.000000;
s.project_id.offset = 0.000000;
s.project_id.exponent = 1.000000;
s.project_id.type = 'uint8';

s.CalIdTxt.value =  'BuckyWagon_0101000';
s.CalIdTxt.units = '';
s.CalIdTxt.help = 'Calibration ID';
s.CalIdTxt.format = '';
s.CalIdTxt.group = 'System | Version';
s.CalIdTxt.storage = 'FLASH';
s.CalIdTxt.access = uint8(hex2dec('ff'));
s.CalIdTxt.min = -inf;
s.CalIdTxt.max =  inf;

s.FriendlyName.value =  'PCM';
s.FriendlyName.units = '';
s.FriendlyName.help = 'The device''s friendly name.';
s.FriendlyName.format = '';
s.FriendlyName.group = 'System | System Config';
s.FriendlyName.storage = 'FLASH';
s.FriendlyName.access = uint8(hex2dec('f5'));
s.FriendlyName.min = -inf;
s.FriendlyName.max =  inf;

s.noErrText.value =  'BuckEV';
s.noErrText.units = '';
s.noErrText.help = 'Text to display if there are no faults.';
s.noErrText.format = '';
s.noErrText.group = 'BuckyWagon_01|Strategy|MiniViewDisplay|GetFaultName';
s.noErrText.storage = 'FLASH';
s.noErrText.access = uint8(hex2dec('ff'));
s.noErrText.min = -inf;
s.noErrText.max =  inf;

s.PasswordTxt.value =  '';
s.PasswordTxt.units = '';
s.PasswordTxt.help = 'Password protection for this calibration';
s.PasswordTxt.format = '';
s.PasswordTxt.group = 'System | System Config';
s.PasswordTxt.storage = 'FLASH';
s.PasswordTxt.access = uint8(hex2dec('f5'));
s.PasswordTxt.min = -inf;
s.PasswordTxt.max =  inf;

s.AccelTorqueMapIdxArr.value =  ...
[
	    0.000000 	    0.100000 	    0.200000 	    0.300000 	    0.400000 	    0.500000 	    0.600000 	    0.700000 	    0.800000 	    0.900000 	    1.000000 
];
s.AccelTorqueMapIdxArr.units = '';
s.AccelTorqueMapIdxArr.help = '';
s.AccelTorqueMapIdxArr.format = '4.2';
s.AccelTorqueMapIdxArr.group = 'BuckyWagon_01|Strategy|Control Strategy|Assist';
s.AccelTorqueMapIdxArr.storage = 'FLASH';
s.AccelTorqueMapIdxArr.access = uint8(hex2dec('ff'));
s.AccelTorqueMapIdxArr.min = 0.000000;
s.AccelTorqueMapIdxArr.max = 1.000000;
s.AccelTorqueMapIdxArr.gain = 1.000000;
s.AccelTorqueMapIdxArr.offset = 0.000000;
s.AccelTorqueMapIdxArr.exponent = 1.000000;
s.AccelTorqueMapIdxArr.type = 'single';

s.AccelTorqueMapTbl.value =  ...
[
	    0.000000 	    0.100000 	    0.200000 	    0.300000 	    0.400000 	    0.500000 	    0.600000 	    0.700000 	    0.800000 	    0.900000 	    1.000000 
];
s.AccelTorqueMapTbl.units = '';
s.AccelTorqueMapTbl.help = '';
s.AccelTorqueMapTbl.format = '4.2';
s.AccelTorqueMapTbl.group = 'BuckyWagon_01|Strategy|Control Strategy|Assist';
s.AccelTorqueMapTbl.storage = 'FLASH';
s.AccelTorqueMapTbl.access = uint8(hex2dec('ff'));
s.AccelTorqueMapTbl.min = -100000000000000000.000000;
s.AccelTorqueMapTbl.max = 100000000000000000.000000;
s.AccelTorqueMapTbl.gain = 1.000000;
s.AccelTorqueMapTbl.offset = 0.000000;
s.AccelTorqueMapTbl.exponent = 1.000000;
s.AccelTorqueMapTbl.type = 'single';

s.Batt_Pol_ResTbl.value =  ...
[
	    0.579400 	    0.403700 	    0.228000 	    0.185100 
];
s.Batt_Pol_ResTbl.units = 'Ohms';
s.Batt_Pol_ResTbl.help = 'Battery internal resistance for polarization resistance.';
s.Batt_Pol_ResTbl.format = '1.4';
s.Batt_Pol_ResTbl.group = 'BuckyWagon_01|Strategy|Virtual Sensors|Batt SOC';
s.Batt_Pol_ResTbl.storage = 'FLASH';
s.Batt_Pol_ResTbl.access = uint8(hex2dec('ff'));
s.Batt_Pol_ResTbl.min = -100000000000000000.000000;
s.Batt_Pol_ResTbl.max = 100000000000000000.000000;
s.Batt_Pol_ResTbl.gain = 1.000000;
s.Batt_Pol_ResTbl.offset = 0.000000;
s.Batt_Pol_ResTbl.exponent = 1.000000;
s.Batt_Pol_ResTbl.type = 'single';

s.Batt_ResTbl.value =  ...
[
	    0.277700 	    0.171400 	    0.065100 	    0.039400 
];
s.Batt_ResTbl.units = 'Ohms';
s.Batt_ResTbl.help = 'Battery internal resistance.';
s.Batt_ResTbl.format = '1.4';
s.Batt_ResTbl.group = 'BuckyWagon_01|Strategy|Virtual Sensors|Batt SOC';
s.Batt_ResTbl.storage = 'FLASH';
s.Batt_ResTbl.access = uint8(hex2dec('ff'));
s.Batt_ResTbl.min = -100000000000000000.000000;
s.Batt_ResTbl.max = 100000000000000000.000000;
s.Batt_ResTbl.gain = 1.000000;
s.Batt_ResTbl.offset = 0.000000;
s.Batt_ResTbl.exponent = 1.000000;
s.Batt_ResTbl.type = 'single';

s.BattTempIdxArr.value =  ...
[
	  -10.000000 	    7.500000 	   25.000000 	   50.000000 
];
s.BattTempIdxArr.units = '';
s.BattTempIdxArr.help = '';
s.BattTempIdxArr.format = '4.2';
s.BattTempIdxArr.group = 'BuckyWagon_01|Strategy|Virtual Sensors|Batt SOC';
s.BattTempIdxArr.storage = 'FLASH';
s.BattTempIdxArr.access = uint8(hex2dec('ff'));
s.BattTempIdxArr.min = -100000000000000000.000000;
s.BattTempIdxArr.max = 100000000000000000.000000;
s.BattTempIdxArr.gain = 1.000000;
s.BattTempIdxArr.offset = 0.000000;
s.BattTempIdxArr.exponent = 1.000000;
s.BattTempIdxArr.type = 'single';

s.FaultManager.value =  ...
[
	    0.000000 	    0.000000 	    0.000000 	   25.000000 	   50.000000 	    5.000000 	    2.000000 	   10.000000 	    0.000000 	   10.000000 	    0.000000 	   10.000000 	    0.000000 
	    0.000000 	    0.000000 	    0.000000 	   25.000000 	   50.000000 	    5.000000 	    2.000000 	   10.000000 	    0.000000 	   10.000000 	    0.000000 	   10.000000 	    0.000000 
	    0.000000 	    0.000000 	    0.000000 	   25.000000 	   50.000000 	    6.000000 	    2.000000 	    3.000000 	    2.000000 	    8.000000 	    2.000000 	    1.000000 	    2.000000 
	    0.000000 	    0.000000 	    0.000000 	  100.000000 	  200.000000 	    9.000000 	    2.000000 	   10.000000 	    0.000000 	   10.000000 	    0.000000 	   10.000000 	    0.000000 
	    0.000000 	    0.000000 	    0.000000 	   25.000000 	   50.000000 	   10.000000 	    0.000000 	   10.000000 	    0.000000 	   10.000000 	    0.000000 	   10.000000 	    0.000000 
	    0.000000 	    0.000000 	    0.000000 	   25.000000 	   50.000000 	   10.000000 	    0.000000 	   10.000000 	    0.000000 	   10.000000 	    0.000000 	   10.000000 	    0.000000 
	    0.000000 	    0.000000 	    0.000000 	   25.000000 	   50.000000 	    7.000000 	    2.000000 	    6.000000 	    2.000000 	    3.000000 	    2.000000 	    0.000000 	    2.000000 
	    0.000000 	    0.000000 	    0.000000 	   25.000000 	   50.000000 	   10.000000 	    0.000000 	   10.000000 	    0.000000 	   10.000000 	    0.000000 	   10.000000 	    0.000000 
	    0.000000 	    0.000000 	    0.000000 	   25.000000 	   50.000000 	   10.000000 	    0.000000 	   10.000000 	    0.000000 	   10.000000 	    0.000000 	   10.000000 	    0.000000 
	    0.000000 	    0.000000 	    0.000000 	   25.000000 	   50.000000 	   10.000000 	    0.000000 	   10.000000 	    0.000000 	   10.000000 	    0.000000 	   10.000000 	    0.000000 
	    0.000000 	    0.000000 	    0.000000 	   25.000000 	   50.000000 	   10.000000 	    0.000000 	   10.000000 	    0.000000 	   10.000000 	    0.000000 	   10.000000 	    0.000000 
	    1.000000 	    0.000000 	    0.000000 	   25.000000 	   50.000000 	    5.000000 	    2.000000 	   10.000000 	    0.000000 	   10.000000 	    0.000000 	   10.000000 	    0.000000 
	    1.000000 	    0.000000 	    0.000000 	  100.000000 	  200.000000 	    5.000000 	    2.000000 	   10.000000 	    0.000000 	   10.000000 	    0.000000 	   10.000000 	    0.000000 
	    1.000000 	    0.000000 	    0.000000 	   25.000000 	   50.000000 	   10.000000 	    0.000000 	   10.000000 	    0.000000 	   10.000000 	    0.000000 	   10.000000 	    0.000000 
	    1.000000 	    0.000000 	    0.000000 	   25.000000 	   50.000000 	   10.000000 	    0.000000 	   10.000000 	    0.000000 	   10.000000 	    0.000000 	   10.000000 	    0.000000 
	    0.000000 	    0.000000 	    0.000000 	   25.000000 	   50.000000 	    6.000000 	    2.000000 	    1.000000 	    2.000000 	   10.000000 	    0.000000 	   10.000000 	    0.000000 
	    1.000000 	    0.000000 	    0.000000 	   10.000000 	   20.000000 	   10.000000 	    0.000000 	   10.000000 	    0.000000 	   10.000000 	    0.000000 	   10.000000 	    0.000000 
	    1.000000 	    0.000000 	    0.000000 	   10.000000 	   20.000000 	   10.000000 	    0.000000 	   10.000000 	    0.000000 	   10.000000 	    0.000000 	   10.000000 	    0.000000 
	    1.000000 	    0.000000 	    0.000000 	   10.000000 	   20.000000 	   10.000000 	    0.000000 	   10.000000 	    0.000000 	   10.000000 	    0.000000 	   10.000000 	    0.000000 
	    1.000000 	    0.000000 	    0.000000 	   10.000000 	   20.000000 	   10.000000 	    0.000000 	   10.000000 	    0.000000 	   10.000000 	    0.000000 	   10.000000 	    0.000000 
	    0.000000 	    0.000000 	    0.000000 	   10.000000 	   40.000000 	    3.000000 	    2.000000 	    4.000000 	    2.000000 	   10.000000 	    0.000000 	   10.000000 	    0.000000 
	    0.000000 	    0.000000 	    0.000000 	   10.000000 	   40.000000 	    3.000000 	    2.000000 	    4.000000 	    2.000000 	   10.000000 	    0.000000 	   10.000000 	    0.000000 
	    0.000000 	    0.000000 	    0.000000 	   10.000000 	   40.000000 	    3.000000 	    0.000000 	    4.000000 	    2.000000 	   10.000000 	    0.000000 	   10.000000 	    0.000000 
	    0.000000 	    0.000000 	    0.000000 	  100.000000 	  400.000000 	   10.000000 	    0.000000 	   10.000000 	    0.000000 	   10.000000 	    0.000000 	   10.000000 	    0.000000 
	    0.000000 	    0.000000 	    0.000000 	  100.000000 	  400.000000 	   10.000000 	    0.000000 	   10.000000 	    0.000000 	   10.000000 	    0.000000 	   10.000000 	    0.000000 
];
s.FaultManager.units = '';
s.FaultManager.help = 'Fault manager configuration.  Select up to 4 actions for each fault.';
s.FaultManager.format = '3.0';
s.FaultManager.group = 'Faults';
s.FaultManager.storage = 'FLASH';
s.FaultManager.access = uint8(hex2dec('ff'));
s.FaultManager.min = -inf;
s.FaultManager.max =  inf;
s.FaultManager.column_enumeration = struct('name',{'Mode','ID','Test','Faulty Samples (X)','Total Samples (Y)','Action 1','Action 1 Condition','Action 2','Action 2 Condition','Action 3','Action 3 Condition','Action 4','Action 4 Condition'},'value',{0,1,2,3,4,5,6,7,8,9,10,11,12});
s.FaultManager.row_enumeration = struct('name',{'Accel_RangeHigh','Accel_RangeLow','BatTempFlt','BattDead','BattOverTemp','BattUnderTemp','GroundFlt','HV_Current_RangeHigh','HV_Current_RangeLow','HV_Temp_RangeHigh','HV_Temp_RangeLow','LVVoltHigh','LVVoltLow','LVVolt_RangeHigh','LVVolt_RangeLow','LockedRotor','Phoenix_NoCAN_Status_1','Phoenix_NoCAN_Status_2','Phoenix_NoCAN_Status_3','PowerSteering_NoCAN_Status','canNLG5_610','canNLG5_611','canNLG5_612','canNLG5_613','canNLG5_614'},'value',{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24});
s.FaultManager.field_enumeration{1} = struct('name',{'Disabled','Enabled','Sticky','Enabled - Persistent','Sticky - Persistent','Save Occurred'},'value',{0,1,2,3,4,5});
s.FaultManager.field_enumeration{2} = struct('name',{'no enumeration'},'value',{-1});
s.FaultManager.field_enumeration{3} = struct('name',{'-','Test'},'value',{0,1});
s.FaultManager.field_enumeration{4} = struct('name',{'no enumeration'},'value',{-1});
s.FaultManager.field_enumeration{5} = struct('name',{'no enumeration'},'value',{-1});
s.FaultManager.field_enumeration{6} = struct('name',{'AllFlash','BrakeFlash','BrakeSolid','Charge_Fault','CheckEngineFlash','CheckEngineSolid','DisableDrive','OpenContactor','TempFlash','TempSolid','(None)'},'value',{0,1,2,3,4,5,6,7,8,9,10});
s.FaultManager.field_enumeration{7} = struct('name',{'(None)','Suspected','Active','Suspected or Active','Occurred','Suspected or Occurred','Active or Occurred','Suspected or Active or Occurred'},'value',{0,1,2,3,4,5,6,7});
s.FaultManager.field_enumeration{8} = struct('name',{'AllFlash','BrakeFlash','BrakeSolid','Charge_Fault','CheckEngineFlash','CheckEngineSolid','DisableDrive','OpenContactor','TempFlash','TempSolid','(None)'},'value',{0,1,2,3,4,5,6,7,8,9,10});
s.FaultManager.field_enumeration{9} = struct('name',{'(None)','Suspected','Active','Suspected or Active','Occurred','Suspected or Occurred','Active or Occurred','Suspected or Active or Occurred'},'value',{0,1,2,3,4,5,6,7});
s.FaultManager.field_enumeration{10} = struct('name',{'AllFlash','BrakeFlash','BrakeSolid','Charge_Fault','CheckEngineFlash','CheckEngineSolid','DisableDrive','OpenContactor','TempFlash','TempSolid','(None)'},'value',{0,1,2,3,4,5,6,7,8,9,10});
s.FaultManager.field_enumeration{11} = struct('name',{'(None)','Suspected','Active','Suspected or Active','Occurred','Suspected or Occurred','Active or Occurred','Suspected or Active or Occurred'},'value',{0,1,2,3,4,5,6,7});
s.FaultManager.field_enumeration{12} = struct('name',{'AllFlash','BrakeFlash','BrakeSolid','Charge_Fault','CheckEngineFlash','CheckEngineSolid','DisableDrive','OpenContactor','TempFlash','TempSolid','(None)'},'value',{0,1,2,3,4,5,6,7,8,9,10});
s.FaultManager.field_enumeration{13} = struct('name',{'(None)','Suspected','Active','Suspected or Active','Occurred','Suspected or Occurred','Active or Occurred','Suspected or Active or Occurred'},'value',{0,1,2,3,4,5,6,7});

s.HV_TempIdxArr.value =  ...
[
	    1.000000 	    2.000000 	    3.000000 	    4.000000 	    5.000000 	    6.000000 	    7.000000 	    8.000000 	    9.000000 	   10.000000 	   11.000000 	   12.000000 	   13.000000 	   14.000000 	   15.000000 	   16.000000 	   17.000000 	   18.000000 	   19.000000 	   20.000000 
];
s.HV_TempIdxArr.units = 'ADC';
s.HV_TempIdxArr.help = 'Look up table to allownon-linear characterization of sensors';
s.HV_TempIdxArr.format = '4.2';
s.HV_TempIdxArr.group = 'Sensors | HV_Temp';
s.HV_TempIdxArr.storage = 'FLASH';
s.HV_TempIdxArr.access = uint8(hex2dec('ff'));
s.HV_TempIdxArr.min = -100000000000000000.000000;
s.HV_TempIdxArr.max = 100000000000000000.000000;
s.HV_TempIdxArr.gain = 1.000000;
s.HV_TempIdxArr.offset = 0.000000;
s.HV_TempIdxArr.exponent = 1.000000;
s.HV_TempIdxArr.type = 'single';

s.HV_TempTbl.value =  ...
[
	    0.000000 	    0.000000 	    0.000000 	    0.000000 	    0.000000 	    0.000000 	    0.000000 	    0.000000 	    0.000000 	    0.000000 	    0.000000 	    0.000000 	    0.000000 	    0.000000 	    0.000000 	    0.000000 	    0.000000 	    0.000000 	    0.000000 	    0.000000 
];
s.HV_TempTbl.units = 'C';
s.HV_TempTbl.help = 'Look up table to allownon-linear characterization of sensors';
s.HV_TempTbl.format = '4.2';
s.HV_TempTbl.group = 'Sensors | HV_Temp';
s.HV_TempTbl.storage = 'FLASH';
s.HV_TempTbl.access = uint8(hex2dec('ff'));
s.HV_TempTbl.min = -100000000000000000.000000;
s.HV_TempTbl.max = 100000000000000000.000000;
s.HV_TempTbl.gain = 1.000000;
s.HV_TempTbl.offset = 0.000000;
s.HV_TempTbl.exponent = 1.000000;
s.HV_TempTbl.type = 'single';

s.MCUTempIdxArr.value =  ...
[
	    0.000000 	   10.000000 	   20.000000 	   30.000000 	   40.000000 	   50.000000 	   60.000000 	   70.000000 	   80.000000 	   90.000000 	  100.000000 
];
s.MCUTempIdxArr.units = '';
s.MCUTempIdxArr.help = '';
s.MCUTempIdxArr.format = '4.2';
s.MCUTempIdxArr.group = 'BuckyWagon_01|Strategy|Control Strategy';
s.MCUTempIdxArr.storage = 'FLASH';
s.MCUTempIdxArr.access = uint8(hex2dec('ff'));
s.MCUTempIdxArr.min = -100000000000000000.000000;
s.MCUTempIdxArr.max = 100000000000000000.000000;
s.MCUTempIdxArr.gain = 1.000000;
s.MCUTempIdxArr.offset = 0.000000;
s.MCUTempIdxArr.exponent = 1.000000;
s.MCUTempIdxArr.type = 'single';

s.MotorTorqueIdxArr.value =  ...
[
	    0.000000 	    0.050000 	    0.100000 	    0.200000 	    0.300000 	    0.400000 	    0.500000 	    0.600000 	    0.700000 	    0.800000 	    1.000000 
];
s.MotorTorqueIdxArr.units = '';
s.MotorTorqueIdxArr.help = '';
s.MotorTorqueIdxArr.format = '4.2';
s.MotorTorqueIdxArr.group = 'BuckyWagon_01|Strategy|Control Strategy';
s.MotorTorqueIdxArr.storage = 'FLASH';
s.MotorTorqueIdxArr.access = uint8(hex2dec('ff'));
s.MotorTorqueIdxArr.min = -100000000000000000.000000;
s.MotorTorqueIdxArr.max = 100000000000000000.000000;
s.MotorTorqueIdxArr.gain = 1.000000;
s.MotorTorqueIdxArr.offset = 0.000000;
s.MotorTorqueIdxArr.exponent = 1.000000;
s.MotorTorqueIdxArr.type = 'single';

s.WaterPumpDutyMapMap.value =  ...
[
	    0.000000 	    0.000000 	    0.000000 	    0.000000 	    0.000000 	  100.000000 	  100.000000 	  100.000000 	  100.000000 	  100.000000 	  100.000000 
	   50.000000 	   50.000000 	   50.000000 	   50.000000 	   50.000000 	  100.000000 	  100.000000 	  100.000000 	  100.000000 	  100.000000 	  100.000000 
	   50.000000 	   50.000000 	   50.000000 	   50.000000 	   50.000000 	  100.000000 	  100.000000 	  100.000000 	  100.000000 	  100.000000 	  100.000000 
	   50.000000 	   50.000000 	   50.000000 	   50.000000 	   50.000000 	  100.000000 	  100.000000 	  100.000000 	  100.000000 	  100.000000 	  100.000000 
	   50.000000 	   50.000000 	   50.000000 	   50.000000 	   50.000000 	  100.000000 	  100.000000 	  100.000000 	  100.000000 	  100.000000 	  100.000000 
	   50.000000 	   50.000000 	   50.000000 	   50.000000 	  100.000000 	  100.000000 	  100.000000 	  100.000000 	  100.000000 	  100.000000 	  100.000000 
	  100.000000 	  100.000000 	  100.000000 	  100.000000 	  100.000000 	  100.000000 	  100.000000 	  100.000000 	  100.000000 	  100.000000 	  100.000000 
	  100.000000 	  100.000000 	  100.000000 	  100.000000 	  100.000000 	  100.000000 	  100.000000 	  100.000000 	  100.000000 	  100.000000 	  100.000000 
	  100.000000 	  100.000000 	  100.000000 	  100.000000 	  100.000000 	  100.000000 	  100.000000 	  100.000000 	  100.000000 	  100.000000 	  100.000000 
	  100.000000 	  100.000000 	  100.000000 	  100.000000 	  100.000000 	  100.000000 	  100.000000 	  100.000000 	  100.000000 	  100.000000 	  100.000000 
	  100.000000 	  100.000000 	  100.000000 	  100.000000 	  100.000000 	  100.000000 	  100.000000 	  100.000000 	  100.000000 	  100.000000 	  100.000000 
];
s.WaterPumpDutyMapMap.units = '';
s.WaterPumpDutyMapMap.help = '';
s.WaterPumpDutyMapMap.format = '4.2';
s.WaterPumpDutyMapMap.group = 'BuckyWagon_01|Strategy|Control Strategy';
s.WaterPumpDutyMapMap.storage = 'FLASH';
s.WaterPumpDutyMapMap.access = uint8(hex2dec('ff'));
s.WaterPumpDutyMapMap.min = -100000000000000000.000000;
s.WaterPumpDutyMapMap.max = 100000000000000000.000000;
s.WaterPumpDutyMapMap.gain = 1.000000;
s.WaterPumpDutyMapMap.offset = 0.000000;
s.WaterPumpDutyMapMap.exponent = 1.000000;
s.WaterPumpDutyMapMap.type = 'single';

