
/* MotoCoder_IO.h */
/* Generated by MotoCoder */
/* Version: 0.12.4 */
/* At: 2018-04-08 00:47:54 */
/* Copyright: 2018 Woodward. */


#ifndef MOTOCODER_IO_H
#define MOTOCODER_IO_H



#include <MotoCoder_Callbacks.h>
#include <MotoCoder_Types.h>
#include <MotoCoder_DataStore.h>
	
extern boolean_T ESTOP2_DigitalInput_Get(void);extern void DOut4362p0004_DiscreteOutput_Set(boolean_T value);extern void DOut4363p0004_DiscreteOutput_Set(boolean_T value);extern void DOut4372p0004_DiscreteOutput_Set(boolean_T value);extern void DOut4373p0004_DiscreteOutput_Set(boolean_T value);extern void DOut4374p0004_DiscreteOutput_Set(boolean_T value);extern void DOut4601p0004_DiscreteOutput_Set(boolean_T value);extern void DOut4602p0004_DiscreteOutput_Set(boolean_T value);extern void DOut4605p0004_DiscreteOutput_Set(boolean_T value);extern NativeError_S VISTA_1_Register_Write(NativeVar_U eReg, void const* pData, NativeVar_U uNumRegs);
extern NativeError_S VISTA_1_Register_Read(NativeVar_U eReg, void* out_pBuffer, NativeVar_U uNumRegs);extern uint16_T DRVP_AnalogInput_Get(void);extern uint16_T Heater_Core_Blend_Position_AnalogInput_Get(void);
extern uint16_T Radiator_Blend_Position_AnalogInput_Get(void);
extern uint16_T Heater_Temp_AnalogInput_Get(void);
extern uint16_T DCDC_Conveter_AnalogInput_Get(void);
extern uint16_T Cruise_Control_AnalogInput_Get(void);
extern uint16_T Throttle_Position_AnalogInput_Get(void);
extern uint16_T ECUP_AnalogInput_Get(void);extern void H1m_PWMOutput_Create(void);
extern boolean_T H1m_PWMOutput_Set(uint32_T frequency, int16_T dutyCycle, boolean_T brake, boolean_T enable);extern boolean_T H1m_PWMOutput_PWMOutput_Set(uint32_T frequency, int16_T dutyCycle, boolean_T brake, boolean_T enable);extern NativeError_S DOut4364p0004_DiscreteOutput_Get(boolean_T* const out_pValue);
extern void DOut4364p0004_DiscreteOutput_Set(boolean_T value);
extern NativeError_S DOut4365p0004_DiscreteOutput_Get(boolean_T* const out_pValue);
extern void DOut4365p0004_DiscreteOutput_Set(boolean_T value);
extern NativeError_S DOut4366p0004_DiscreteOutput_Get(boolean_T* const out_pValue);
extern void DOut4366p0004_DiscreteOutput_Set(boolean_T value);
extern NativeError_S DOut4367p0004_DiscreteOutput_Get(boolean_T* const out_pValue);
extern void DOut4367p0004_DiscreteOutput_Set(boolean_T value);
extern NativeError_S DOut4368p0004_DiscreteOutput_Get(boolean_T* const out_pValue);
extern void DOut4368p0004_DiscreteOutput_Set(boolean_T value);
extern NativeError_S DOut4369p0004_DiscreteOutput_Get(boolean_T* const out_pValue);
extern void DOut4369p0004_DiscreteOutput_Set(boolean_T value);
extern NativeError_S DOut4370p0004_DiscreteOutput_Get(boolean_T* const out_pValue);
extern void DOut4370p0004_DiscreteOutput_Set(boolean_T value);
extern NativeError_S DOut4371p0004_DiscreteOutput_Get(boolean_T* const out_pValue);
extern void DOut4371p0004_DiscreteOutput_Set(boolean_T value);
extern NativeError_S DOut4600p0004_DiscreteOutput_Get(boolean_T* const out_pValue);
extern void DOut4600p0004_DiscreteOutput_Set(boolean_T value);
extern NativeError_S DOut4603p0004_DiscreteOutput_Get(boolean_T* const out_pValue);
extern void DOut4603p0004_DiscreteOutput_Set(boolean_T value);
extern NativeError_S DOut4604p0004_DiscreteOutput_Get(boolean_T* const out_pValue);
extern void DOut4604p0004_DiscreteOutput_Set(boolean_T value);
extern NativeError_S DOut5671p0001_DiscreteOutput_Get(boolean_T* const out_pValue);
extern void DOut5671p0001_DiscreteOutput_Set(boolean_T value);
extern NativeError_S H1_InhibitB_DiscreteOutput_Get(boolean_T* const out_pValue);
extern void H1_InhibitB_DiscreteOutput_Set(boolean_T value);
extern NativeError_S ODRC_DiscreteOutput_Get(boolean_T* const out_pValue);/* Create all I/O resources */
extern void IO_Create(void);/* Stop all I/O by putting each resource into a safe state */
extern void IO_Stop(void);

#endif

