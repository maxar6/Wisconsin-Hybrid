
/* MotoCoder_IO.h */
/* Generated by MotoCoder */
/* Version: 0.12.4 */
/* At: 2018-09-04 13:38:00 */
/* Copyright: 2018 Woodward. */


#ifndef MOTOCODER_IO_H
#define MOTOCODER_IO_H



#include <MotoCoder_Callbacks.h>
#include <MotoCoder_Types.h>
#include <MotoCoder_DataStore.h>
	
extern boolean_T ESTOP2_DigitalInput_Get(void);extern void DOut4600p0001_DiscreteOutput_Set(boolean_T value);extern void DOut4601p0001_DiscreteOutput_Set(boolean_T value);extern void DOut4610p0001_DiscreteOutput_Set(boolean_T value);extern void DOut4611p0001_DiscreteOutput_Set(boolean_T value);extern void DOut4612p0001_DiscreteOutput_Set(boolean_T value);extern void DOut4827p0001_DiscreteOutput_Set(boolean_T value);extern void DOut4828p0001_DiscreteOutput_Set(boolean_T value);extern NativeError_S VISTA_1_Register_Write(NativeVar_U eReg, void const* pData, NativeVar_U uNumRegs);
extern NativeError_S VISTA_1_Register_Read(NativeVar_U eReg, void* out_pBuffer, NativeVar_U uNumRegs);extern uint16_T DRVP_AnalogInput_Get(void);extern int32_T Heater_Core_Blend_Position_AnalogInput_Get(void);
extern uint16_T Radiator_Blend_Position_AnalogInput_Get(void);
extern uint16_T Heater_Temp_AnalogInput_Get(void);
extern uint16_T Cruise_Control_AnalogInput_Get(void);
extern uint16_T DCDC_Conveter_AnalogInput_Get(void);
extern uint16_T Throttle_Position_AnalogInput_Get(void);
extern uint16_T ECUP_AnalogInput_Get(void);extern void H1m_PWMOutput_Create(void);
extern boolean_T H1m_PWMOutput_Set(uint32_T frequency, int16_T dutyCycle, boolean_T brake, boolean_T enable);extern boolean_T IPT_PWMOutput_PWMOutput_Set(uint32_T frequency, int16_T dutyCycle, boolean_T brake, boolean_T enable);extern NativeError_S DOut4602p0001_DiscreteOutput_Get(boolean_T* const out_pValue);
extern void DOut4602p0001_DiscreteOutput_Set(boolean_T value);
extern NativeError_S DOut4603p0001_DiscreteOutput_Get(boolean_T* const out_pValue);
extern void DOut4603p0001_DiscreteOutput_Set(boolean_T value);
extern NativeError_S DOut4604p0001_DiscreteOutput_Get(boolean_T* const out_pValue);
extern void DOut4604p0001_DiscreteOutput_Set(boolean_T value);
extern NativeError_S DOut4605p0001_DiscreteOutput_Get(boolean_T* const out_pValue);
extern void DOut4605p0001_DiscreteOutput_Set(boolean_T value);
extern NativeError_S DOut4606p0001_DiscreteOutput_Get(boolean_T* const out_pValue);
extern void DOut4606p0001_DiscreteOutput_Set(boolean_T value);
extern NativeError_S DOut4607p0001_DiscreteOutput_Get(boolean_T* const out_pValue);
extern void DOut4607p0001_DiscreteOutput_Set(boolean_T value);
extern NativeError_S DOut4608p0001_DiscreteOutput_Get(boolean_T* const out_pValue);
extern void DOut4608p0001_DiscreteOutput_Set(boolean_T value);
extern NativeError_S DOut4609p0001_DiscreteOutput_Get(boolean_T* const out_pValue);
extern void DOut4609p0001_DiscreteOutput_Set(boolean_T value);
extern NativeError_S DOut4826p0001_DiscreteOutput_Get(boolean_T* const out_pValue);
extern void DOut4826p0001_DiscreteOutput_Set(boolean_T value);
extern NativeError_S DOut4829p0001_DiscreteOutput_Get(boolean_T* const out_pValue);
extern void DOut4829p0001_DiscreteOutput_Set(boolean_T value);
extern NativeError_S DOut4830p0001_DiscreteOutput_Get(boolean_T* const out_pValue);
extern void DOut4830p0001_DiscreteOutput_Set(boolean_T value);
extern NativeError_S DOut4831p0001_DiscreteOutput_Get(boolean_T* const out_pValue);
extern void DOut4831p0001_DiscreteOutput_Set(boolean_T value);
extern NativeError_S DOut5969p0004_DiscreteOutput_Get(boolean_T* const out_pValue);
extern void DOut5969p0004_DiscreteOutput_Set(boolean_T value);
extern NativeError_S H1_InhibitB_DiscreteOutput_Get(boolean_T* const out_pValue);
extern void H1_InhibitB_DiscreteOutput_Set(boolean_T value);
extern NativeError_S ODRC_DiscreteOutput_Get(boolean_T* const out_pValue);
extern NativeError_S DOut4830p0001_DiagDisable_DiscreteOutput_Get(boolean_T* const out_pValue);
extern NativeError_S DOut4831p0001_DiagDisable_DiscreteOutput_Get(boolean_T* const out_pValue);/* Create all I/O resources */
extern void IO_Create(void);/* Stop all I/O by putting each resource into a safe state */
extern void IO_Stop(void);

#endif

