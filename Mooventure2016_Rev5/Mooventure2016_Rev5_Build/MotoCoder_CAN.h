
/* MotoCoder_CAN.h */
/* Generated by MotoCoder */
/* Version: 0.12.4 */
/* At: 2018-04-07 15:01:57 */
/* Copyright: 2018 Woodward. */


#ifndef MOTOCODER_CAN_H
#define MOTOCODER_CAN_H



#include <MotoCoder_Types.h>
	
/* CAN Interface for CAN_1 */
extern void CAN_1_Error_Status_Get(boolean_T* inout_bBusPassivePtr, uint8_T* inout_uTXErrorCountPtr, uint8_T* inout_uRXErrorCountPtr);
extern boolean_T CAN_1_Transmit(boolean_T extended, uint32_T id, uint8_T length, const uint8_T data[]);
extern uint32_T CAN_1_TransmitQueueDepth(void);
extern boolean_T RxSlot_3053p0002_Receive(boolean_T *extended, uint32_T *id, uint8_T *length, uint8_T data[]);
extern boolean_T RxSlot_3054p0001_Receive(boolean_T *extended, uint32_T *id, uint8_T *length, uint8_T data[]);
extern boolean_T RxSlot_3055p0001_Receive(boolean_T *extended, uint32_T *id, uint8_T *length, uint8_T data[]);
extern boolean_T RxSlot_10273p001_Receive(boolean_T *extended, uint32_T *id, uint8_T *length, uint8_T data[]);
extern boolean_T RxSlot_3670p0001_Receive(boolean_T *extended, uint32_T *id, uint8_T *length, uint8_T data[]);
extern boolean_T RxSlot_3729p0001_Receive(boolean_T *extended, uint32_T *id, uint8_T *length, uint8_T data[]);
extern boolean_T RxSlot_3858p0001_Receive(boolean_T *extended, uint32_T *id, uint8_T *length, uint8_T data[]);
extern boolean_T RxSlot_3859p0001_Receive(boolean_T *extended, uint32_T *id, uint8_T *length, uint8_T data[]);
extern boolean_T RxSlot_3860p0001_Receive(boolean_T *extended, uint32_T *id, uint8_T *length, uint8_T data[]);
extern boolean_T RxSlot_3861p0001_Receive(boolean_T *extended, uint32_T *id, uint8_T *length, uint8_T data[]);
extern boolean_T RxSlot_4019p0001_Receive(boolean_T *extended, uint32_T *id, uint8_T *length, uint8_T data[]);
extern void CAN_1_KeySuite_SetIDFilter(uint32_T id, uint32_T id_mask);
extern boolean_T CAN_1_KeySuite_Receive(boolean_T *extended, uint32_T *id, uint8_T *length, uint8_T data[]);
extern void CAN_1_Create(void);/* CAN Interface for CAN_2 */
extern void CAN_2_Error_Status_Get(boolean_T* inout_bBusPassivePtr, uint8_T* inout_uTXErrorCountPtr, uint8_T* inout_uRXErrorCountPtr);
extern boolean_T CAN_2_Transmit(boolean_T extended, uint32_T id, uint8_T length, const uint8_T data[]);
extern uint32_T CAN_2_TransmitQueueDepth(void);
extern boolean_T RxSlot_3672p0001_Receive(boolean_T *extended, uint32_T *id, uint8_T *length, uint8_T data[]);
extern void CAN_2_KeySuite_SetIDFilter(uint32_T id, uint32_T id_mask);
extern boolean_T CAN_2_KeySuite_Receive(boolean_T *extended, uint32_T *id, uint8_T *length, uint8_T data[]);
extern void CAN_2_Create(void);/* CAN Interface for CAN_3 */
extern void CAN_3_Error_Status_Get(boolean_T* inout_bBusPassivePtr, uint8_T* inout_uTXErrorCountPtr, uint8_T* inout_uRXErrorCountPtr);
extern boolean_T CAN_3_Transmit(boolean_T extended, uint32_T id, uint8_T length, const uint8_T data[]);
extern uint32_T CAN_3_TransmitQueueDepth(void);
extern boolean_T RxSlot_3251p0001_Receive(boolean_T *extended, uint32_T *id, uint8_T *length, uint8_T data[]);
extern boolean_T RxSlot_3252p0001_Receive(boolean_T *extended, uint32_T *id, uint8_T *length, uint8_T data[]);
extern boolean_T RxSlot_3253p0001_Receive(boolean_T *extended, uint32_T *id, uint8_T *length, uint8_T data[]);
extern boolean_T RxSlot_3254p0001_Receive(boolean_T *extended, uint32_T *id, uint8_T *length, uint8_T data[]);
extern boolean_T RxSlot_3255p0001_Receive(boolean_T *extended, uint32_T *id, uint8_T *length, uint8_T data[]);
extern boolean_T RxSlot_3256p0001_Receive(boolean_T *extended, uint32_T *id, uint8_T *length, uint8_T data[]);
extern boolean_T RxSlot_3257p0001_Receive(boolean_T *extended, uint32_T *id, uint8_T *length, uint8_T data[]);
extern boolean_T RxSlot_3669p0004_Receive(boolean_T *extended, uint32_T *id, uint8_T *length, uint8_T data[]);
extern boolean_T RxSlot_3671p0001_Receive(boolean_T *extended, uint32_T *id, uint8_T *length, uint8_T data[]);
extern boolean_T RxSlot_3808p0001_Receive(boolean_T *extended, uint32_T *id, uint8_T *length, uint8_T data[]);
extern void CAN_3_KeySuite_SetIDFilter(uint32_T id, uint32_T id_mask);
extern boolean_T CAN_3_KeySuite_Receive(boolean_T *extended, uint32_T *id, uint8_T *length, uint8_T data[]);
extern void CAN_3_Create(void);

#endif

