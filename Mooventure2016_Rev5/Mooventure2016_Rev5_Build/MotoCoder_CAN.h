
/* MotoCoder_CAN.h */
/* Generated by MotoCoder */
/* Version: 0.12.4 */
/* At: 2018-04-08 00:47:54 */
/* Copyright: 2018 Woodward. */


#ifndef MOTOCODER_CAN_H
#define MOTOCODER_CAN_H



#include <MotoCoder_Types.h>
	
/* CAN Interface for CAN_1 */
extern void CAN_1_Error_Status_Get(boolean_T* inout_bBusPassivePtr, uint8_T* inout_uTXErrorCountPtr, uint8_T* inout_uRXErrorCountPtr);
extern boolean_T CAN_1_Transmit(boolean_T extended, uint32_T id, uint8_T length, const uint8_T data[]);
extern uint32_T CAN_1_TransmitQueueDepth(void);
extern boolean_T RxSlot_3064p0002_Receive(boolean_T *extended, uint32_T *id, uint8_T *length, uint8_T data[]);
extern boolean_T RxSlot_3065p0001_Receive(boolean_T *extended, uint32_T *id, uint8_T *length, uint8_T data[]);
extern boolean_T RxSlot_3066p0001_Receive(boolean_T *extended, uint32_T *id, uint8_T *length, uint8_T data[]);
extern boolean_T RxSlot_3478p0004_Receive(boolean_T *extended, uint32_T *id, uint8_T *length, uint8_T data[]);
extern boolean_T RxSlot_3698p0001_Receive(boolean_T *extended, uint32_T *id, uint8_T *length, uint8_T data[]);
extern boolean_T RxSlot_3757p0001_Receive(boolean_T *extended, uint32_T *id, uint8_T *length, uint8_T data[]);
extern boolean_T RxSlot_3886p0001_Receive(boolean_T *extended, uint32_T *id, uint8_T *length, uint8_T data[]);
extern boolean_T RxSlot_3887p0001_Receive(boolean_T *extended, uint32_T *id, uint8_T *length, uint8_T data[]);
extern boolean_T RxSlot_3888p0001_Receive(boolean_T *extended, uint32_T *id, uint8_T *length, uint8_T data[]);
extern boolean_T RxSlot_3889p0001_Receive(boolean_T *extended, uint32_T *id, uint8_T *length, uint8_T data[]);
extern boolean_T RxSlot_4047p0001_Receive(boolean_T *extended, uint32_T *id, uint8_T *length, uint8_T data[]);
extern void CAN_1_KeySuite_SetIDFilter(uint32_T id, uint32_T id_mask);
extern boolean_T CAN_1_KeySuite_Receive(boolean_T *extended, uint32_T *id, uint8_T *length, uint8_T data[]);
extern void CAN_1_Create(void);/* CAN Interface for CAN_2 */
extern void CAN_2_Error_Status_Get(boolean_T* inout_bBusPassivePtr, uint8_T* inout_uTXErrorCountPtr, uint8_T* inout_uRXErrorCountPtr);
extern boolean_T CAN_2_Transmit(boolean_T extended, uint32_T id, uint8_T length, const uint8_T data[]);
extern uint32_T CAN_2_TransmitQueueDepth(void);
extern boolean_T RxSlot_3700p0001_Receive(boolean_T *extended, uint32_T *id, uint8_T *length, uint8_T data[]);
extern void CAN_2_KeySuite_SetIDFilter(uint32_T id, uint32_T id_mask);
extern boolean_T CAN_2_KeySuite_Receive(boolean_T *extended, uint32_T *id, uint8_T *length, uint8_T data[]);
extern void CAN_2_Create(void);/* CAN Interface for CAN_3 */
extern void CAN_3_Error_Status_Get(boolean_T* inout_bBusPassivePtr, uint8_T* inout_uTXErrorCountPtr, uint8_T* inout_uRXErrorCountPtr);
extern boolean_T CAN_3_Transmit(boolean_T extended, uint32_T id, uint8_T length, const uint8_T data[]);
extern uint32_T CAN_3_TransmitQueueDepth(void);
extern boolean_T RxSlot_3262p0001_Receive(boolean_T *extended, uint32_T *id, uint8_T *length, uint8_T data[]);
extern boolean_T RxSlot_3263p0001_Receive(boolean_T *extended, uint32_T *id, uint8_T *length, uint8_T data[]);
extern boolean_T RxSlot_3264p0001_Receive(boolean_T *extended, uint32_T *id, uint8_T *length, uint8_T data[]);
extern boolean_T RxSlot_3265p0001_Receive(boolean_T *extended, uint32_T *id, uint8_T *length, uint8_T data[]);
extern boolean_T RxSlot_3266p0001_Receive(boolean_T *extended, uint32_T *id, uint8_T *length, uint8_T data[]);
extern boolean_T RxSlot_3267p0001_Receive(boolean_T *extended, uint32_T *id, uint8_T *length, uint8_T data[]);
extern boolean_T RxSlot_3268p0001_Receive(boolean_T *extended, uint32_T *id, uint8_T *length, uint8_T data[]);
extern boolean_T RxSlot_3697p0004_Receive(boolean_T *extended, uint32_T *id, uint8_T *length, uint8_T data[]);
extern boolean_T RxSlot_3699p0001_Receive(boolean_T *extended, uint32_T *id, uint8_T *length, uint8_T data[]);
extern boolean_T RxSlot_3836p0001_Receive(boolean_T *extended, uint32_T *id, uint8_T *length, uint8_T data[]);
extern void CAN_3_KeySuite_SetIDFilter(uint32_T id, uint32_T id_mask);
extern boolean_T CAN_3_KeySuite_Receive(boolean_T *extended, uint32_T *id, uint8_T *length, uint8_T data[]);
extern void CAN_3_Create(void);

#endif

